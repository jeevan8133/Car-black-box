

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Mon Mar  6 23:00:00 2023

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F4580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    60                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    61  0000                     
    62                           	psect	idataCOMRAM
    63  000F31                     __pidataCOMRAM:
    64                           	opt stack 0
    65                           
    66                           ;initializer for _str1
    67  000F31  30                 	db	48
    68  000F32  30                 	db	48
    69  000F33  30                 	db	48
    70  000F34  30                 	db	48
    71  000F35  30                 	db	48
    72  000F36  30                 	db	48
    73  000F37  30                 	db	48
    74  000F38  30                 	db	48
    75  000F39  00                 	db	0
    76                           
    77                           ;initializer for changepass@F15943
    78  000F3A  30                 	db	48
    79  000F3B  30                 	db	48
    80  000F3C  30                 	db	48
    81  000F3D  30                 	db	48
    82  000F3E  30                 	db	48
    83  000F3F  30                 	db	48
    84  000F40  30                 	db	48
    85  000F41  30                 	db	48
    86  000F42  00                 	db	0
    87                           
    88                           ;initializer for read_switches@once
    89  000F43  01                 	db	1
    90                           
    91                           	psect	idataBANK0
    92  001570                     __pidataBANK0:
    93                           	opt stack 0
    94                           
    95                           ;initializer for main@F16006
    96  001570  76                 	db	118
    97  001571  69                 	db	105
    98  001572  65                 	db	101
    99  001573  77                 	db	119
   100  001574  20                 	db	32
   101  001575  6C                 	db	108
   102  001576  6F                 	db	111
   103  001577  67                 	db	103
   104  001578  20                 	db	32
   105  001579  20                 	db	32
   106  00157A  20                 	db	32
   107  00157B  20                 	db	32
   108  00157C  20                 	db	32
   109  00157D  20                 	db	32
   110  00157E  20                 	db	32
   111  00157F  20                 	db	32
   112  001580  00                 	db	0
   113  001581  64                 	db	100
   114  001582  6F                 	db	111
   115  001583  77                 	db	119
   116  001584  6E                 	db	110
   117  001585  6C                 	db	108
   118  001586  6F                 	db	111
   119  001587  61                 	db	97
   120  001588  64                 	db	100
   121  001589  20                 	db	32
   122  00158A  6C                 	db	108
   123  00158B  6F                 	db	111
   124  00158C  67                 	db	103
   125  00158D  20                 	db	32
   126  00158E  20                 	db	32
   127  00158F  20                 	db	32
   128  001590  20                 	db	32
   129  001591  00                 	db	0
   130  001592  63                 	db	99
   131  001593  6C                 	db	108
   132  001594  65                 	db	101
   133  001595  61                 	db	97
   134  001596  72                 	db	114
   135  001597  20                 	db	32
   136  001598  6C                 	db	108
   137  001599  6F                 	db	111
   138  00159A  67                 	db	103
   139  00159B  20                 	db	32
   140  00159C  20                 	db	32
   141  00159D  20                 	db	32
   142  00159E  20                 	db	32
   143  00159F  20                 	db	32
   144  0015A0  20                 	db	32
   145  0015A1  20                 	db	32
   146  0015A2  00                 	db	0
   147  0015A3  63                 	db	99
   148  0015A4  68                 	db	104
   149  0015A5  61                 	db	97
   150  0015A6  6E                 	db	110
   151  0015A7  67                 	db	103
   152  0015A8  65                 	db	101
   153  0015A9  20                 	db	32
   154  0015AA  70                 	db	112
   155  0015AB  61                 	db	97
   156  0015AC  73                 	db	115
   157  0015AD  73                 	db	115
   158  0015AE  77                 	db	119
   159  0015AF  6F                 	db	111
   160  0015B0  72                 	db	114
   161  0015B1  64                 	db	100
   162  0015B2  20                 	db	32
   163  0015B3  00                 	db	0
   164  0015B4  73                 	db	115
   165  0015B5  65                 	db	101
   166  0015B6  74                 	db	116
   167  0015B7  20                 	db	32
   168  0015B8  74                 	db	116
   169  0015B9  69                 	db	105
   170  0015BA  6D                 	db	109
   171  0015BB  65                 	db	101
   172  0015BC  20                 	db	32
   173  0015BD  20                 	db	32
   174  0015BE  20                 	db	32
   175  0015BF  20                 	db	32
   176  0015C0  20                 	db	32
   177  0015C1  20                 	db	32
   178  0015C2  20                 	db	32
   179  0015C3  20                 	db	32
   180  0015C4  00                 	db	0
   181  0015C5  20                 	db	32
   182  0015C6  20                 	db	32
   183  0015C7  20                 	db	32
   184  0015C8  20                 	db	32
   185  0015C9  20                 	db	32
   186  0015CA  20                 	db	32
   187  0015CB  20                 	db	32
   188  0015CC  20                 	db	32
   189  0015CD  20                 	db	32
   190  0015CE  20                 	db	32
   191  0015CF  20                 	db	32
   192  0015D0  20                 	db	32
   193  0015D1  20                 	db	32
   194  0015D2  00                 	db	0
   195  0015D3  00                 	db	0
   196  0015D4  00                 	db	0
   197  0015D5  00                 	db	0
   198                           
   199                           ;initializer for changepass@F15945
   200  0015D6  30                 	db	48
   201  0015D7  30                 	db	48
   202  0015D8  30                 	db	48
   203  0015D9  30                 	db	48
   204  0015DA  30                 	db	48
   205  0015DB  30                 	db	48
   206  0015DC  30                 	db	48
   207  0015DD  30                 	db	48
   208  0015DE  00                 	db	0
   209                           
   210                           ;initializer for pass@F15952
   211  0015DF  30                 	db	48
   212  0015E0  30                 	db	48
   213  0015E1  30                 	db	48
   214  0015E2  30                 	db	48
   215  0015E3  30                 	db	48
   216  0015E4  30                 	db	48
   217  0015E5  30                 	db	48
   218  0015E6  30                 	db	48
   219  0015E7  00                 	db	0
   220                           
   221                           	psect	idataBANK1
   222  000F11                     __pidataBANK1:
   223                           	opt stack 0
   224                           
   225                           ;initializer for main@F16002
   226  000F11  30                 	db	48
   227  000F12  30                 	db	48
   228  000F13  30                 	db	48
   229  000F14  00                 	db	0
   230                           
   231                           ;initializer for _set
   232  000F15  30                 	db	48
   233  000F16  30                 	db	48
   234  000F17  3A                 	db	58
   235  000F18  30                 	db	48
   236  000F19  30                 	db	48
   237  000F1A  3A                 	db	58
   238  000F1B  30                 	db	48
   239  000F1C  30                 	db	48
   240  000F1D  00                 	db	0
   241  0000                     _ADCON0	set	4034
   242  0000                     _ADCON1	set	4033
   243  0000                     _ADRESH	set	4036
   244  0000                     _ADRESL	set	4035
   245  0000                     _PORTB	set	3969
   246  0000                     _PORTBbits	set	3969
   247  0000                     _PORTD	set	3971
   248  0000                     _RCREG	set	4014
   249  0000                     _SPBRG	set	4015
   250  0000                     _SSPADD	set	4040
   251  0000                     _SSPBUF	set	4041
   252  0000                     _SSPCON1	set	4038
   253  0000                     _TRISB	set	3987
   254  0000                     _TRISC	set	3988
   255  0000                     _TRISD	set	3989
   256  0000                     _TXREG	set	4013
   257  0000                     _ABDEN	set	32192
   258  0000                     _ABDOVF	set	32199
   259  0000                     _ACKDT	set	32301
   260  0000                     _ACKEN	set	32300
   261  0000                     _ACKSTAT	set	32302
   262  0000                     _ACQT0	set	32259
   263  0000                     _ACQT1	set	32260
   264  0000                     _ACQT2	set	32261
   265  0000                     _ADCS0	set	32256
   266  0000                     _ADCS1	set	32257
   267  0000                     _ADCS2	set	32258
   268  0000                     _ADDEN	set	32091
   269  0000                     _ADFM	set	32263
   270  0000                     _ADON	set	32272
   271  0000                     _BCLIF	set	32011
   272  0000                     _BRG16	set	32195
   273  0000                     _BRGH	set	32098
   274  0000                     _CKE	set	32318
   275  0000                     _CREN	set	32092
   276  0000                     _CSRC	set	32103
   277  0000                     _FERR	set	32090
   278  0000                     _GO	set	32273
   279  0000                     _GODONE	set	32273
   280  0000                     _OERR	set	32089
   281  0000                     _PEN	set	32298
   282  0000                     _RB0	set	31752
   283  0000                     _RBPU	set	32655
   284  0000                     _RC0	set	31760
   285  0000                     _RC1	set	31761
   286  0000                     _RC2	set	31762
   287  0000                     _RCEN	set	32299
   288  0000                     _RCIDL	set	32198
   289  0000                     _RCIE	set	31981
   290  0000                     _RCIF	set	31989
   291  0000                     _RD7	set	31775
   292  0000                     _RSEN	set	32297
   293  0000                     _RX9	set	32094
   294  0000                     _RX9D	set	32088
   295  0000                     _SCKP	set	32196
   296  0000                     _SEN	set	32296
   297  0000                     _SENDB	set	32099
   298  0000                     _SMP	set	32319
   299  0000                     _SPEN	set	32095
   300  0000                     _SREN	set	32093
   301  0000                     _SSPIF	set	31987
   302  0000                     _SYNC	set	32100
   303  0000                     _TRISB0	set	31896
   304  0000                     _TRISC3	set	31907
   305  0000                     _TRISC4	set	31908
   306  0000                     _TRISC6	set	31910
   307  0000                     _TRISC7	set	31911
   308  0000                     _TRISD7	set	31919
   309  0000                     _TRMT	set	32097
   310  0000                     _TX9	set	32102
   311  0000                     _TX9D	set	32096
   312  0000                     _TXEN	set	32101
   313  0000                     _TXIE	set	31980
   314  0000                     _TXIF	set	31988
   315  0000                     _VCFG0	set	32268
   316  0000                     _VCFG1	set	32269
   317  0000                     _WUE	set	32193
   318                           
   319                           	psect	mediumconst
   320  002EFC                     __pmediumconst:
   321                           	opt stack 0
   322  002EFC  00                 	db	0
   323  002EFD                     STR_32:
   324  002EFD  20                 	db	32
   325  002EFE  20                 	db	32
   326  002EFF  20                 	db	32
   327  002F00  20                 	db	32
   328  002F01  20                 	db	32
   329  002F02  20                 	db	32
   330  002F03  20                 	db	32
   331  002F04  20                 	db	32
   332  002F05  20                 	db	32
   333  002F06  20                 	db	32
   334  002F07  20                 	db	32
   335  002F08  20                 	db	32
   336  002F09  20                 	db	32
   337  002F0A  20                 	db	32
   338  002F0B  20                 	db	32
   339  002F0C  20                 	db	32
   340  002F0D  20                 	db	32
   341  002F0E  20                 	db	32
   342  002F0F  00                 	db	0
   343  002F10                     STR_7:
   344  002F10  63                 	db	99	;'c'
   345  002F11  6F                 	db	111	;'o'
   346  002F12  6E                 	db	110	;'n'
   347  002F13  66                 	db	102	;'f'
   348  002F14  69                 	db	105	;'i'
   349  002F15  72                 	db	114	;'r'
   350  002F16  6D                 	db	109	;'m'
   351  002F17  20                 	db	32
   352  002F18  50                 	db	80	;'P'
   353  002F19  61                 	db	97	;'a'
   354  002F1A  73                 	db	115	;'s'
   355  002F1B  73                 	db	115	;'s'
   356  002F1C  77                 	db	119	;'w'
   357  002F1D  6F                 	db	111	;'o'
   358  002F1E  72                 	db	114	;'r'
   359  002F1F  64                 	db	100	;'d'
   360  002F20  20                 	db	32
   361  002F21  20                 	db	32
   362  002F22  00                 	db	0
   363  002F23                     STR_1:
   364  002F23  63                 	db	99	;'c'
   365  002F24  68                 	db	104	;'h'
   366  002F25  61                 	db	97	;'a'
   367  002F26  6E                 	db	110	;'n'
   368  002F27  67                 	db	103	;'g'
   369  002F28  65                 	db	101	;'e'
   370  002F29  20                 	db	32
   371  002F2A  50                 	db	80	;'P'
   372  002F2B  61                 	db	97	;'a'
   373  002F2C  73                 	db	115	;'s'
   374  002F2D  73                 	db	115	;'s'
   375  002F2E  77                 	db	119	;'w'
   376  002F2F  6F                 	db	111	;'o'
   377  002F30  72                 	db	114	;'r'
   378  002F31  64                 	db	100	;'d'
   379  002F32  20                 	db	32
   380  002F33  20                 	db	32
   381  002F34  00                 	db	0
   382  002F35                     STR_37:
   383  002F35  20                 	db	32
   384  002F36  20                 	db	32
   385  002F37  20                 	db	32
   386  002F38  53                 	db	83	;'S'
   387  002F39  45                 	db	69	;'E'
   388  002F3A  54                 	db	84	;'T'
   389  002F3B  20                 	db	32
   390  002F3C  5F                 	db	95	;'_'
   391  002F3D  20                 	db	32
   392  002F3E  54                 	db	84	;'T'
   393  002F3F  49                 	db	73	;'I'
   394  002F40  4D                 	db	77	;'M'
   395  002F41  45                 	db	69	;'E'
   396  002F42  20                 	db	32
   397  002F43  20                 	db	32
   398  002F44  20                 	db	32
   399  002F45  00                 	db	0
   400  002F46                     STR_24:
   401  002F46  45                 	db	69	;'E'
   402  002F47  6E                 	db	110	;'n'
   403  002F48  74                 	db	116	;'t'
   404  002F49  65                 	db	101	;'e'
   405  002F4A  72                 	db	114	;'r'
   406  002F4B  20                 	db	32
   407  002F4C  50                 	db	80	;'P'
   408  002F4D  61                 	db	97	;'a'
   409  002F4E  73                 	db	115	;'s'
   410  002F4F  73                 	db	115	;'s'
   411  002F50  77                 	db	119	;'w'
   412  002F51  6F                 	db	111	;'o'
   413  002F52  72                 	db	114	;'r'
   414  002F53  64                 	db	100	;'d'
   415  002F54  20                 	db	32
   416  002F55  20                 	db	32
   417  002F56  00                 	db	0
   418  002F57                     STR_21:
   419  002F57  53                 	db	83	;'S'
   420  002F58  55                 	db	85	;'U'
   421  002F59  43                 	db	67	;'C'
   422  002F5A  43                 	db	67	;'C'
   423  002F5B  45                 	db	69	;'E'
   424  002F5C  53                 	db	83	;'S'
   425  002F5D  53                 	db	83	;'S'
   426  002F5E  46                 	db	70	;'F'
   427  002F5F  55                 	db	85	;'U'
   428  002F60  4C                 	db	76	;'L'
   429  002F61  4C                 	db	76	;'L'
   430  002F62  20                 	db	32
   431  002F63  20                 	db	32
   432  002F64  20                 	db	32
   433  002F65  20                 	db	32
   434  002F66  20                 	db	32
   435  002F67  00                 	db	0
   436  002F68                     STR_20:
   437  002F68  44                 	db	68	;'D'
   438  002F69  4F                 	db	79	;'O'
   439  002F6A  57                 	db	87	;'W'
   440  002F6B  4E                 	db	78	;'N'
   441  002F6C  4C                 	db	76	;'L'
   442  002F6D  4F                 	db	79	;'O'
   443  002F6E  41                 	db	65	;'A'
   444  002F6F  44                 	db	68	;'D'
   445  002F70  20                 	db	32
   446  002F71  44                 	db	68	;'D'
   447  002F72  4F                 	db	79	;'O'
   448  002F73  4E                 	db	78	;'N'
   449  002F74  45                 	db	69	;'E'
   450  002F75  20                 	db	32
   451  002F76  20                 	db	32
   452  002F77  20                 	db	32
   453  002F78  00                 	db	0
   454  002F79                     STR_22:
   455  002F79  43                 	db	67	;'C'
   456  002F7A  4C                 	db	76	;'L'
   457  002F7B  45                 	db	69	;'E'
   458  002F7C  41                 	db	65	;'A'
   459  002F7D  52                 	db	82	;'R'
   460  002F7E  20                 	db	32
   461  002F7F  4C                 	db	76	;'L'
   462  002F80  4F                 	db	79	;'O'
   463  002F81  47                 	db	71	;'G'
   464  002F82  20                 	db	32
   465  002F83  53                 	db	83	;'S'
   466  002F84  55                 	db	85	;'U'
   467  002F85  43                 	db	67	;'C'
   468  002F86  43                 	db	67	;'C'
   469  002F87  20                 	db	32
   470  002F88  20                 	db	32
   471  002F89  00                 	db	0
   472  002F8A                     STR_15:
   473  002F8A  54                 	db	84	;'T'
   474  002F8B  49                 	db	73	;'I'
   475  002F8C  4D                 	db	77	;'M'
   476  002F8D  45                 	db	69	;'E'
   477  002F8E  20                 	db	32
   478  002F8F  20                 	db	32
   479  002F90  20                 	db	32
   480  002F91  45                 	db	69	;'E'
   481  002F92  56                 	db	86	;'V'
   482  002F93  45                 	db	69	;'E'
   483  002F94  4E                 	db	78	;'N'
   484  002F95  54                 	db	84	;'T'
   485  002F96  20                 	db	32
   486  002F97  20                 	db	32
   487  002F98  53                 	db	83	;'S'
   488  002F99  50                 	db	80	;'P'
   489  002F9A  00                 	db	0
   490  002F9B                     STR_12:
   491  002F9B  20                 	db	32
   492  002F9C  54                 	db	84	;'T'
   493  002F9D  52                 	db	82	;'R'
   494  002F9E  59                 	db	89	;'Y'
   495  002F9F  20                 	db	32
   496  002FA0  41                 	db	65	;'A'
   497  002FA1  47                 	db	71	;'G'
   498  002FA2  41                 	db	65	;'A'
   499  002FA3  49                 	db	73	;'I'
   500  002FA4  4E                 	db	78	;'N'
   501  002FA5  20                 	db	32
   502  002FA6  20                 	db	32
   503  002FA7  20                 	db	32
   504  002FA8  20                 	db	32
   505  002FA9  20                 	db	32
   506  002FAA  20                 	db	32
   507  002FAB  00                 	db	0
   508  002FAC                     STR_14:
   509  002FAC  20                 	db	32
   510  002FAD  20                 	db	32
   511  002FAE  20                 	db	32
   512  002FAF  53                 	db	83	;'S'
   513  002FB0  55                 	db	85	;'U'
   514  002FB1  43                 	db	67	;'C'
   515  002FB2  43                 	db	67	;'C'
   516  002FB3  45                 	db	69	;'E'
   517  002FB4  53                 	db	83	;'S'
   518  002FB5  53                 	db	83	;'S'
   519  002FB6  20                 	db	32
   520  002FB7  20                 	db	32
   521  002FB8  20                 	db	32
   522  002FB9  20                 	db	32
   523  002FBA  20                 	db	32
   524  002FBB  20                 	db	32
   525  002FBC  00                 	db	0
   526  002FBD                     STR_34:
   527  002FBD  20                 	db	32
   528  002FBE  20                 	db	32
   529  002FBF  20                 	db	32
   530  002FC0  20                 	db	32
   531  002FC1  46                 	db	70	;'F'
   532  002FC2  41                 	db	65	;'A'
   533  002FC3  49                 	db	73	;'I'
   534  002FC4  4C                 	db	76	;'L'
   535  002FC5  55                 	db	85	;'U'
   536  002FC6  52                 	db	82	;'R'
   537  002FC7  45                 	db	69	;'E'
   538  002FC8  20                 	db	32
   539  002FC9  20                 	db	32
   540  002FCA  20                 	db	32
   541  002FCB  20                 	db	32
   542  002FCC  00                 	db	0
   543  002FCD                     STR_33:
   544  002FCD  20                 	db	32
   545  002FCE  20                 	db	32
   546  002FCF  20                 	db	32
   547  002FD0  20                 	db	32
   548  002FD1  53                 	db	83	;'S'
   549  002FD2  55                 	db	85	;'U'
   550  002FD3  43                 	db	67	;'C'
   551  002FD4  43                 	db	67	;'C'
   552  002FD5  45                 	db	69	;'E'
   553  002FD6  53                 	db	83	;'S'
   554  002FD7  53                 	db	83	;'S'
   555  002FD8  20                 	db	32
   556  002FD9  20                 	db	32
   557  002FDA  20                 	db	32
   558  002FDB  20                 	db	32
   559  002FDC  00                 	db	0
   560  002FDD                     STR_30:
   561  002FDD  54                 	db	84	;'T'
   562  002FDE  52                 	db	82	;'R'
   563  002FDF  59                 	db	89	;'Y'
   564  002FE0  20                 	db	32
   565  002FE1  41                 	db	65	;'A'
   566  002FE2  47                 	db	71	;'G'
   567  002FE3  41                 	db	65	;'A'
   568  002FE4  49                 	db	73	;'I'
   569  002FE5  4E                 	db	78	;'N'
   570  002FE6  00                 	db	0
   571  002FE7                     STR_16:
   572  002FE7  20                 	db	32
   573  002FE8  20                 	db	32
   574  002FE9  43                 	db	67	;'C'
   575  002FEA  4C                 	db	76	;'L'
   576  002FEB  20                 	db	32
   577  002FEC  00                 	db	0
   578  002FED                     STR_18:
   579  002FED  20                 	db	32
   580  002FEE  20                 	db	32
   581  002FEF  44                 	db	68	;'D'
   582  002FF0  4C                 	db	76	;'L'
   583  002FF1  20                 	db	32
   584  002FF2  00                 	db	0
   585  002FF3                     STR_31:
   586  002FF3  4C                 	db	76	;'L'
   587  002FF4  45                 	db	69	;'E'
   588  002FF5  46                 	db	70	;'F'
   589  002FF6  54                 	db	84	;'T'
   590  002FF7  00                 	db	0
   591  002FF8                     STR_17:
   592  002FF8  0A                 	db	10
   593  002FF9  0D                 	db	13
   594  002FFA  00                 	db	0
   595  002FFB                     STR_4:
   596  002FFB  2A                 	db	42
   597  002FFC  00                 	db	0
   598  002FFD                     STR_3:
   599  002FFD  5F                 	db	95	;'_'
   600  002FFE  00                 	db	0
   601  002FFF  00                 	db	0	; dummy byte at the end
   602  0000                     
   603                           ; #config settings
   604                           
   605                           	psect	cinit
   606  001482                     __pcinit:
   607                           	opt stack 0
   608  001482                     start_initialization:
   609                           	opt stack 0
   610  001482                     __initialization:
   611                           	opt stack 0
   612                           
   613                           ; Clear objects allocated to COMRAM (18 bytes)
   614  001482  EE00  F04E         	lfsr	0,__pbssCOMRAM
   615  001486  0E12               	movlw	18
   616  001488                     clear_0:
   617  001488  6AEE               	clrf	postinc0,c
   618  00148A  06E8               	decf	wreg,f,c
   619  00148C  E1FD               	bnz	clear_0
   620                           
   621                           ; Initialize objects allocated to BANK1 (13 bytes)
   622                           ; load TBLPTR registers with __pidataBANK1
   623  00148E  0E11               	movlw	low __pidataBANK1
   624  001490  6EF6               	movwf	tblptrl,c
   625  001492  0E0F               	movlw	high __pidataBANK1
   626  001494  6EF7               	movwf	tblptrh,c
   627  001496  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   628  001498  6EF8               	movwf	tblptru,c
   629  00149A  EE01  F0B9         	lfsr	0,__pdataBANK1
   630  00149E  EE10 F00D          	lfsr	1,13
   631  0014A2                     copy_data0:
   632  0014A2  0009               	tblrd		*+
   633  0014A4  CFF5 FFEE          	movff	tablat,postinc0
   634  0014A8  50E5               	movf	postdec1,w,c
   635  0014AA  50E1               	movf	fsr1l,w,c
   636  0014AC  E1FA               	bnz	copy_data0
   637                           
   638                           ; Initialize objects allocated to BANK0 (120 bytes)
   639                           ; load TBLPTR registers with __pidataBANK0
   640  0014AE  0E70               	movlw	low __pidataBANK0
   641  0014B0  6EF6               	movwf	tblptrl,c
   642  0014B2  0E15               	movlw	high __pidataBANK0
   643  0014B4  6EF7               	movwf	tblptrh,c
   644  0014B6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   645  0014B8  6EF8               	movwf	tblptru,c
   646  0014BA  EE00  F060         	lfsr	0,__pdataBANK0
   647  0014BE  EE10 F078          	lfsr	1,120
   648  0014C2                     copy_data1:
   649  0014C2  0009               	tblrd		*+
   650  0014C4  CFF5 FFEE          	movff	tablat,postinc0
   651  0014C8  50E5               	movf	postdec1,w,c
   652  0014CA  50E1               	movf	fsr1l,w,c
   653  0014CC  E1FA               	bnz	copy_data1
   654                           
   655                           ; Initialize objects allocated to COMRAM (19 bytes)
   656                           ; load TBLPTR registers with __pidataCOMRAM
   657  0014CE  0E31               	movlw	low __pidataCOMRAM
   658  0014D0  6EF6               	movwf	tblptrl,c
   659  0014D2  0E0F               	movlw	high __pidataCOMRAM
   660  0014D4  6EF7               	movwf	tblptrh,c
   661  0014D6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   662  0014D8  6EF8               	movwf	tblptru,c
   663  0014DA  EE00  F03B         	lfsr	0,__pdataCOMRAM
   664  0014DE  EE10 F013          	lfsr	1,19
   665  0014E2                     copy_data2:
   666  0014E2  0009               	tblrd		*+
   667  0014E4  CFF5 FFEE          	movff	tablat,postinc0
   668  0014E8  50E5               	movf	postdec1,w,c
   669  0014EA  50E1               	movf	fsr1l,w,c
   670  0014EC  E1FA               	bnz	copy_data2
   671  0014EE                     end_of_initialization:
   672                           	opt stack 0
   673  0014EE                     __end_of__initialization:
   674                           	opt stack 0
   675  0014EE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   676  0014F0  6EF8               	movwf	tblptru,c
   677  0014F2  0100               	movlb	0
   678  0014F4  EF02  F012         	goto	_main	;jump to C main() function
   679                           tblptru	equ	0xFF8
   680                           tblptrh	equ	0xFF7
   681                           tblptrl	equ	0xFF6
   682                           tablat	equ	0xFF5
   683                           postinc0	equ	0xFEE
   684                           wreg	equ	0xFE8
   685                           postdec1	equ	0xFE5
   686                           fsr1l	equ	0xFE1
   687                           
   688                           	psect	bssCOMRAM
   689  00004E                     __pbssCOMRAM:
   690                           	opt stack 0
   691  00004E                     _clock_reg:
   692                           	opt stack 0
   693  00004E                     	ds	3
   694  000051                     _corrpass:
   695                           	opt stack 0
   696  000051                     	ds	2
   697  000053                     _flag1:
   698                           	opt stack 0
   699  000053                     	ds	2
   700  000055                     _key:
   701                           	opt stack 0
   702  000055                     	ds	1
   703  000056                     read_switches@key:
   704                           	opt stack 0
   705  000056                     	ds	1
   706  000057                     _time:
   707                           	opt stack 0
   708  000057                     	ds	9
   709                           tblptru	equ	0xFF8
   710                           tblptrh	equ	0xFF7
   711                           tblptrl	equ	0xFF6
   712                           tablat	equ	0xFF5
   713                           postinc0	equ	0xFEE
   714                           wreg	equ	0xFE8
   715                           postdec1	equ	0xFE5
   716                           fsr1l	equ	0xFE1
   717                           
   718                           	psect	dataCOMRAM
   719  00003B                     __pdataCOMRAM:
   720                           	opt stack 0
   721  00003B                     _str1:
   722                           	opt stack 0
   723  00003B                     	ds	9
   724  000044                     changepass@F15943:
   725                           	opt stack 0
   726  000044                     	ds	9
   727  00004D                     read_switches@once:
   728                           	opt stack 0
   729  00004D                     	ds	1
   730                           tblptru	equ	0xFF8
   731                           tblptrh	equ	0xFF7
   732                           tblptrl	equ	0xFF6
   733                           tablat	equ	0xFF5
   734                           postinc0	equ	0xFEE
   735                           wreg	equ	0xFE8
   736                           postdec1	equ	0xFE5
   737                           fsr1l	equ	0xFE1
   738                           
   739                           	psect	dataBANK0
   740  000060                     __pdataBANK0:
   741                           	opt stack 0
   742  000060                     main@F16006:
   743                           	opt stack 0
   744  000060                     	ds	102
   745  0000C6                     changepass@F15945:
   746                           	opt stack 0
   747  0000C6                     	ds	9
   748  0000CF                     pass@F15952:
   749                           	opt stack 0
   750  0000CF                     	ds	9
   751                           tblptru	equ	0xFF8
   752                           tblptrh	equ	0xFF7
   753                           tblptrl	equ	0xFF6
   754                           tablat	equ	0xFF5
   755                           postinc0	equ	0xFEE
   756                           wreg	equ	0xFE8
   757                           postdec1	equ	0xFE5
   758                           fsr1l	equ	0xFE1
   759                           
   760                           	psect	dataBANK1
   761  0001B9                     __pdataBANK1:
   762                           	opt stack 0
   763  0001B9                     main@F16002:
   764                           	opt stack 0
   765  0001B9                     	ds	4
   766  0001BD                     _set:
   767                           	opt stack 0
   768  0001BD                     	ds	9
   769                           tblptru	equ	0xFF8
   770                           tblptrh	equ	0xFF7
   771                           tblptrl	equ	0xFF6
   772                           tablat	equ	0xFF5
   773                           postinc0	equ	0xFEE
   774                           wreg	equ	0xFE8
   775                           postdec1	equ	0xFE5
   776                           fsr1l	equ	0xFE1
   777                           
   778                           	psect	cstackBANK1
   779  000100                     __pcstackBANK1:
   780                           	opt stack 0
   781  000100                     main@str:
   782                           	opt stack 0
   783                           
   784                           ; 102 bytes @ 0x0
   785  000100                     	ds	102
   786  000166                     main@speed:
   787                           	opt stack 0
   788                           
   789                           ; 4 bytes @ 0x66
   790  000166                     	ds	4
   791  00016A                     main@j:
   792                           	opt stack 0
   793                           
   794                           ; 2 bytes @ 0x6A
   795  00016A                     	ds	2
   796  00016C                     main@option1:
   797                           	opt stack 0
   798                           
   799                           ; 2 bytes @ 0x6C
   800  00016C                     	ds	2
   801  00016E                     main@flag2:
   802                           	opt stack 0
   803                           
   804                           ; 2 bytes @ 0x6E
   805  00016E                     	ds	2
   806  000170                     main@flag3:
   807                           	opt stack 0
   808                           
   809                           ; 2 bytes @ 0x70
   810  000170                     	ds	2
   811  000172                     main@clear:
   812                           	opt stack 0
   813                           
   814                           ; 9 bytes @ 0x72
   815  000172                     	ds	9
   816  00017B                     main@i:
   817                           	opt stack 0
   818                           
   819                           ; 2 bytes @ 0x7B
   820  00017B                     	ds	2
   821  00017D                     main@cl:
   822                           	opt stack 0
   823                           
   824                           ; 2 bytes @ 0x7D
   825  00017D                     	ds	2
   826  00017F                     main@store:
   827                           	opt stack 0
   828                           
   829                           ; 17 bytes @ 0x7F
   830  00017F                     	ds	17
   831  000190                     main@save:
   832                           	opt stack 0
   833                           
   834                           ; 2 bytes @ 0x90
   835  000190                     	ds	2
   836  000192                     main@i_243:
   837                           	opt stack 0
   838                           
   839                           ; 4 bytes @ 0x92
   840  000192                     	ds	4
   841  000196                     main@i_247:
   842                           	opt stack 0
   843                           
   844                           ; 4 bytes @ 0x96
   845  000196                     	ds	4
   846  00019A                     main@i_231:
   847                           	opt stack 0
   848                           
   849                           ; 2 bytes @ 0x9A
   850  00019A                     	ds	2
   851  00019C                     main@i_235:
   852                           	opt stack 0
   853                           
   854                           ; 2 bytes @ 0x9C
   855  00019C                     	ds	2
   856  00019E                     main@a:
   857                           	opt stack 0
   858                           
   859                           ; 2 bytes @ 0x9E
   860  00019E                     	ds	2
   861  0001A0                     main@add:
   862                           	opt stack 0
   863                           
   864                           ; 1 bytes @ 0xA0
   865  0001A0                     	ds	1
   866  0001A1                     main@i_234:
   867                           	opt stack 0
   868                           
   869                           ; 2 bytes @ 0xA1
   870  0001A1                     	ds	2
   871  0001A3                     main@option:
   872                           	opt stack 0
   873                           
   874                           ; 2 bytes @ 0xA3
   875  0001A3                     	ds	2
   876  0001A5                     main@c:
   877                           	opt stack 0
   878                           
   879                           ; 4 bytes @ 0xA5
   880  0001A5                     	ds	4
   881  0001A9                     main@c1:
   882                           	opt stack 0
   883                           
   884                           ; 4 bytes @ 0xA9
   885  0001A9                     	ds	4
   886  0001AD                     main@i_233:
   887                           	opt stack 0
   888                           
   889                           ; 2 bytes @ 0xAD
   890  0001AD                     	ds	2
   891  0001AF                     main@i_244:
   892                           	opt stack 0
   893                           
   894                           ; 2 bytes @ 0xAF
   895  0001AF                     	ds	2
   896  0001B1                     main@value:
   897                           	opt stack 0
   898                           
   899                           ; 1 bytes @ 0xB1
   900  0001B1                     	ds	1
   901  0001B2                     main@key:
   902                           	opt stack 0
   903                           
   904                           ; 4 bytes @ 0xB2
   905  0001B2                     	ds	4
   906  0001B6                     main@k:
   907                           	opt stack 0
   908                           
   909                           ; 1 bytes @ 0xB6
   910  0001B6                     	ds	1
   911  0001B7                     main@sc:
   912                           	opt stack 0
   913                           
   914                           ; 2 bytes @ 0xB7
   915  0001B7                     	ds	2
   916                           tblptru	equ	0xFF8
   917                           tblptrh	equ	0xFF7
   918                           tblptrl	equ	0xFF6
   919                           tablat	equ	0xFF5
   920                           postinc0	equ	0xFEE
   921                           wreg	equ	0xFE8
   922                           postdec1	equ	0xFE5
   923                           fsr1l	equ	0xFE1
   924                           
   925                           	psect	cstackCOMRAM
   926  000001                     __pcstackCOMRAM:
   927                           	opt stack 0
   928  000001                     ?_read_adc:
   929                           	opt stack 0
   930  000001                     ?___wmul:
   931                           	opt stack 0
   932  000001                     ?___awdiv:
   933                           	opt stack 0
   934  000001                     ?___awmod:
   935                           	opt stack 0
   936  000001                     ?___lwmod:
   937                           	opt stack 0
   938  000001                     ?___ftpack:
   939                           	opt stack 0
   940  000001                     clcd_write@control_bit:
   941                           	opt stack 0
   942  000001                     putch@byte:
   943                           	opt stack 0
   944  000001                     read_switches@detection_type:
   945                           	opt stack 0
   946  000001                     i2c_write@data:
   947                           	opt stack 0
   948  000001                     ___wmul@multiplier:
   949                           	opt stack 0
   950  000001                     ___awdiv@dividend:
   951                           	opt stack 0
   952  000001                     ___awmod@dividend:
   953                           	opt stack 0
   954  000001                     ___lwmod@dividend:
   955                           	opt stack 0
   956  000001                     ___ftpack@arg:
   957                           	opt stack 0
   958                           
   959                           ; 3 bytes @ 0x0
   960  000001                     	ds	1
   961  000002                     clcd_write@byte:
   962                           	opt stack 0
   963  000002                     writeEEP@data:
   964                           	opt stack 0
   965  000002                     readEEP@address:
   966                           	opt stack 0
   967  000002                     write_ds1307@data:
   968                           	opt stack 0
   969  000002                     read_ds1307@address:
   970                           	opt stack 0
   971  000002                     puts@s:
   972                           	opt stack 0
   973                           
   974                           ; 2 bytes @ 0x1
   975  000002                     	ds	1
   976  000003                     ??_read_adc:
   977  000003                     clcd_putch@addr:
   978                           	opt stack 0
   979  000003                     writeEEP@address:
   980                           	opt stack 0
   981  000003                     readEEP@data:
   982                           	opt stack 0
   983  000003                     write_ds1307@address:
   984                           	opt stack 0
   985  000003                     read_ds1307@data:
   986                           	opt stack 0
   987  000003                     ___wmul@multiplicand:
   988                           	opt stack 0
   989  000003                     ___awdiv@divisor:
   990                           	opt stack 0
   991  000003                     ___awmod@divisor:
   992                           	opt stack 0
   993  000003                     ___lwmod@divisor:
   994                           	opt stack 0
   995                           
   996                           ; 2 bytes @ 0x2
   997  000003                     	ds	1
   998  000004                     clcd_putch@data:
   999                           	opt stack 0
  1000  000004                     init_ds1307@dummy:
  1001                           	opt stack 0
  1002  000004                     ___ftpack@exp:
  1003                           	opt stack 0
  1004  000004                     writeEEP@i:
  1005                           	opt stack 0
  1006  000004                     download@display:
  1007                           	opt stack 0
  1008                           
  1009                           ; 17 bytes @ 0x3
  1010  000004                     	ds	1
  1011  000005                     ___awdiv@counter:
  1012                           	opt stack 0
  1013  000005                     ___awmod@counter:
  1014                           	opt stack 0
  1015  000005                     ___ftpack@sign:
  1016                           	opt stack 0
  1017  000005                     ___lwmod@counter:
  1018                           	opt stack 0
  1019  000005                     read_adc@reg_val:
  1020                           	opt stack 0
  1021  000005                     ___wmul@product:
  1022                           	opt stack 0
  1023                           
  1024                           ; 2 bytes @ 0x4
  1025  000005                     	ds	1
  1026  000006                     ??___ftpack:
  1027  000006                     ?___lwdiv:
  1028                           	opt stack 0
  1029  000006                     ___awdiv@sign:
  1030                           	opt stack 0
  1031  000006                     ___awmod@sign:
  1032                           	opt stack 0
  1033  000006                     ___lwdiv@dividend:
  1034                           	opt stack 0
  1035                           
  1036                           ; 2 bytes @ 0x5
  1037  000006                     	ds	1
  1038  000007                     read_adc@channel:
  1039                           	opt stack 0
  1040  000007                     clcd_print@data:
  1041                           	opt stack 0
  1042  000007                     ___awdiv@quotient:
  1043                           	opt stack 0
  1044                           
  1045                           ; 2 bytes @ 0x6
  1046  000007                     	ds	1
  1047  000008                     ___lwdiv@divisor:
  1048                           	opt stack 0
  1049                           
  1050                           ; 2 bytes @ 0x7
  1051  000008                     	ds	1
  1052  000009                     ?___lwtoft:
  1053                           	opt stack 0
  1054  000009                     clcd_print@addr:
  1055                           	opt stack 0
  1056  000009                     ___lwtoft@c:
  1057                           	opt stack 0
  1058                           
  1059                           ; 2 bytes @ 0x8
  1060  000009                     	ds	1
  1061  00000A                     ??_pass:
  1062  00000A                     ??_settime:
  1063  00000A                     ??_changepass:
  1064  00000A                     ___lwdiv@quotient:
  1065                           	opt stack 0
  1066  00000A                     view@display:
  1067                           	opt stack 0
  1068                           
  1069                           ; 17 bytes @ 0x9
  1070  00000A                     	ds	2
  1071  00000C                     ?___ftdiv:
  1072                           	opt stack 0
  1073  00000C                     ___lwdiv@counter:
  1074                           	opt stack 0
  1075  00000C                     pass@i:
  1076                           	opt stack 0
  1077  00000C                     settime@delay:
  1078                           	opt stack 0
  1079  00000C                     ___ftdiv@f1:
  1080                           	opt stack 0
  1081  00000C                     changepass@pass2:
  1082                           	opt stack 0
  1083                           
  1084                           ; 9 bytes @ 0xB
  1085  00000C                     	ds	2
  1086  00000E                     pass@y:
  1087                           	opt stack 0
  1088  00000E                     settime@key:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0xD
  1092  00000E                     	ds	1
  1093  00000F                     ___ftdiv@f2:
  1094                           	opt stack 0
  1095                           
  1096                           ; 3 bytes @ 0xE
  1097  00000F                     	ds	1
  1098  000010                     settime@k:
  1099                           	opt stack 0
  1100  000010                     pass@str2:
  1101                           	opt stack 0
  1102                           
  1103                           ; 9 bytes @ 0xF
  1104  000010                     	ds	2
  1105  000012                     ??___ftdiv:
  1106  000012                     settime@l:
  1107                           	opt stack 0
  1108                           
  1109                           ; 2 bytes @ 0x11
  1110  000012                     	ds	2
  1111  000014                     settime@m:
  1112                           	opt stack 0
  1113                           
  1114                           ; 2 bytes @ 0x13
  1115  000014                     	ds	1
  1116  000015                     download@less:
  1117                           	opt stack 0
  1118  000015                     ___ftdiv@cntr:
  1119                           	opt stack 0
  1120  000015                     changepass@pass1:
  1121                           	opt stack 0
  1122                           
  1123                           ; 9 bytes @ 0x14
  1124  000015                     	ds	1
  1125  000016                     download@i:
  1126                           	opt stack 0
  1127  000016                     settime@blink:
  1128                           	opt stack 0
  1129  000016                     ___ftdiv@f3:
  1130                           	opt stack 0
  1131                           
  1132                           ; 3 bytes @ 0x15
  1133  000016                     	ds	2
  1134  000018                     settime@flag:
  1135                           	opt stack 0
  1136                           
  1137                           ; 2 bytes @ 0x17
  1138  000018                     	ds	1
  1139  000019                     ___ftdiv@exp:
  1140                           	opt stack 0
  1141  000019                     pass@i_373:
  1142                           	opt stack 0
  1143                           
  1144                           ; 2 bytes @ 0x18
  1145  000019                     	ds	1
  1146  00001A                     ___ftdiv@sign:
  1147                           	opt stack 0
  1148                           
  1149                           ; 1 bytes @ 0x19
  1150  00001A                     	ds	1
  1151  00001B                     ?___fttol:
  1152                           	opt stack 0
  1153  00001B                     pass@m:
  1154                           	opt stack 0
  1155  00001B                     ___fttol@f1:
  1156                           	opt stack 0
  1157  00001B                     view@display1:
  1158                           	opt stack 0
  1159                           
  1160                           ; 17 bytes @ 0x1A
  1161  00001B                     	ds	2
  1162  00001D                     pass@t:
  1163                           	opt stack 0
  1164                           
  1165                           ; 2 bytes @ 0x1C
  1166  00001D                     	ds	1
  1167  00001E                     changepass@delay:
  1168                           	opt stack 0
  1169                           
  1170                           ; 2 bytes @ 0x1D
  1171  00001E                     	ds	1
  1172  00001F                     ??___fttol:
  1173  00001F                     pass@delay:
  1174                           	opt stack 0
  1175                           
  1176                           ; 2 bytes @ 0x1E
  1177  00001F                     	ds	1
  1178  000020                     changepass@i_68:
  1179                           	opt stack 0
  1180                           
  1181                           ; 2 bytes @ 0x1F
  1182  000020                     	ds	1
  1183  000021                     pass@input:
  1184                           	opt stack 0
  1185                           
  1186                           ; 1 bytes @ 0x20
  1187  000021                     	ds	1
  1188  000022                     changepass@flag:
  1189                           	opt stack 0
  1190  000022                     pass@i_371:
  1191                           	opt stack 0
  1192                           
  1193                           ; 4 bytes @ 0x21
  1194  000022                     	ds	2
  1195  000024                     ___fttol@sign1:
  1196                           	opt stack 0
  1197  000024                     changepass@flag1:
  1198                           	opt stack 0
  1199                           
  1200                           ; 2 bytes @ 0x23
  1201  000024                     	ds	1
  1202  000025                     ___fttol@lval:
  1203                           	opt stack 0
  1204                           
  1205                           ; 4 bytes @ 0x24
  1206  000025                     	ds	1
  1207  000026                     changepass@j:
  1208                           	opt stack 0
  1209  000026                     pass@blink:
  1210                           	opt stack 0
  1211                           
  1212                           ; 2 bytes @ 0x25
  1213  000026                     	ds	2
  1214  000028                     pass@key:
  1215                           	opt stack 0
  1216  000028                     changepass@j1:
  1217                           	opt stack 0
  1218                           
  1219                           ; 2 bytes @ 0x27
  1220  000028                     	ds	1
  1221  000029                     ___fttol@exp1:
  1222                           	opt stack 0
  1223  000029                     pass@j:
  1224                           	opt stack 0
  1225                           
  1226                           ; 2 bytes @ 0x28
  1227  000029                     	ds	1
  1228  00002A                     changepass@input:
  1229                           	opt stack 0
  1230                           
  1231                           ; 1 bytes @ 0x29
  1232  00002A                     	ds	1
  1233  00002B                     changepass@input2:
  1234                           	opt stack 0
  1235  00002B                     pass@flag:
  1236                           	opt stack 0
  1237                           
  1238                           ; 2 bytes @ 0x2A
  1239  00002B                     	ds	1
  1240  00002C                     changepass@i:
  1241                           	opt stack 0
  1242  00002C                     view@i:
  1243                           	opt stack 0
  1244                           
  1245                           ; 2 bytes @ 0x2B
  1246  00002C                     	ds	1
  1247  00002D                     pass@try:
  1248                           	opt stack 0
  1249                           
  1250                           ; 1 bytes @ 0x2C
  1251  00002D                     	ds	1
  1252  00002E                     view@key:
  1253                           	opt stack 0
  1254  00002E                     changepass@i_70:
  1255                           	opt stack 0
  1256  00002E                     pass@i_366:
  1257                           	opt stack 0
  1258                           
  1259                           ; 2 bytes @ 0x2D
  1260  00002E                     	ds	1
  1261  00002F                     view@flag:
  1262                           	opt stack 0
  1263                           
  1264                           ; 1 bytes @ 0x2E
  1265  00002F                     	ds	1
  1266  000030                     changepass@key:
  1267                           	opt stack 0
  1268  000030                     pass@k:
  1269                           	opt stack 0
  1270  000030                     view@count1:
  1271                           	opt stack 0
  1272                           
  1273                           ; 2 bytes @ 0x2F
  1274  000030                     	ds	1
  1275  000031                     changepass@k:
  1276                           	opt stack 0
  1277                           
  1278                           ; 2 bytes @ 0x30
  1279  000031                     	ds	1
  1280  000032                     view@count:
  1281                           	opt stack 0
  1282                           
  1283                           ; 2 bytes @ 0x31
  1284  000032                     	ds	1
  1285  000033                     changepass@k1:
  1286                           	opt stack 0
  1287                           
  1288                           ; 2 bytes @ 0x32
  1289  000033                     	ds	1
  1290  000034                     view@i_440:
  1291                           	opt stack 0
  1292                           
  1293                           ; 2 bytes @ 0x33
  1294  000034                     	ds	1
  1295  000035                     changepass@blink:
  1296                           	opt stack 0
  1297                           
  1298                           ; 2 bytes @ 0x34
  1299  000035                     	ds	1
  1300  000036                     view@i_441:
  1301                           	opt stack 0
  1302                           
  1303                           ; 2 bytes @ 0x35
  1304  000036                     	ds	2
  1305  000038                     view@read:
  1306                           	opt stack 0
  1307                           
  1308                           ; 1 bytes @ 0x37
  1309  000038                     	ds	1
  1310  000039                     ??_main:
  1311                           
  1312                           ; 1 bytes @ 0x38
  1313  000039                     	ds	2
  1314                           tblptru	equ	0xFF8
  1315                           tblptrh	equ	0xFF7
  1316                           tblptrl	equ	0xFF6
  1317                           tablat	equ	0xFF5
  1318                           postinc0	equ	0xFEE
  1319                           wreg	equ	0xFE8
  1320                           postdec1	equ	0xFE5
  1321                           fsr1l	equ	0xFE1
  1322                           
  1323 ;;
  1324 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1325 ;;
  1326 ;; *************** function _main *****************
  1327 ;; Defined at:
  1328 ;;		line 63 in file "main.c"
  1329 ;; Parameters:    Size  Location     Type
  1330 ;;		None
  1331 ;; Auto vars:     Size  Location     Type
  1332 ;;  i               4  150[BANK1 ] unsigned long 
  1333 ;;  i               2  175[BANK1 ] int 
  1334 ;;  i               4  146[BANK1 ] unsigned long 
  1335 ;;  value           1  177[BANK1 ] unsigned char 
  1336 ;;  i               2  161[BANK1 ] int 
  1337 ;;  i               2  154[BANK1 ] int 
  1338 ;;  i               2  156[BANK1 ] int 
  1339 ;;  i               2  173[BANK1 ] int 
  1340 ;;  i               2  123[BANK1 ] unsigned int 
  1341 ;;  str           102    0[BANK1 ] unsigned char [17][6]
  1342 ;;  store          17  127[BANK1 ] unsigned char [17]
  1343 ;;  clear           9  114[BANK1 ] unsigned char [9]
  1344 ;;  key             4  178[BANK1 ] unsigned long 
  1345 ;;  c1              4  169[BANK1 ] unsigned long 
  1346 ;;  c               4  165[BANK1 ] unsigned long 
  1347 ;;  speed           4  102[BANK1 ] unsigned char [4]
  1348 ;;  sc              2  183[BANK1 ] unsigned int 
  1349 ;;  option          2  163[BANK1 ] unsigned int 
  1350 ;;  a               2  158[BANK1 ] unsigned int 
  1351 ;;  save            2  144[BANK1 ] unsigned int 
  1352 ;;  cl              2  125[BANK1 ] unsigned int 
  1353 ;;  flag3           2  112[BANK1 ] unsigned int 
  1354 ;;  flag2           2  110[BANK1 ] unsigned int 
  1355 ;;  option1         2  108[BANK1 ] unsigned int 
  1356 ;;  j               2  106[BANK1 ] unsigned int 
  1357 ;;  k               1  182[BANK1 ] unsigned char 
  1358 ;;  add             1  160[BANK1 ] unsigned char 
  1359 ;; Return value:  Size  Location     Type
  1360 ;;                  1    wreg      void 
  1361 ;; Registers used:
  1362 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1363 ;; Tracked objects:
  1364 ;;		On entry : 0/0
  1365 ;;		On exit  : 0/0
  1366 ;;		Unchanged: 0/0
  1367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1368 ;;      Params:         0       0       0       0       0       0       0
  1369 ;;      Locals:         0       0     185       0       0       0       0
  1370 ;;      Temps:          2       0       0       0       0       0       0
  1371 ;;      Totals:         2       0     185       0       0       0       0
  1372 ;;Total ram usage:      187 bytes
  1373 ;; Hardware stack levels required when called:    6
  1374 ;; This function calls:
  1375 ;;		___ftdiv
  1376 ;;		___fttol
  1377 ;;		___lwdiv
  1378 ;;		___lwmod
  1379 ;;		___lwtoft
  1380 ;;		___wmul
  1381 ;;		_changepass
  1382 ;;		_clcd_print
  1383 ;;		_clcd_putch
  1384 ;;		_download
  1385 ;;		_get_time
  1386 ;;		_init_config
  1387 ;;		_pass
  1388 ;;		_puts
  1389 ;;		_read_adc
  1390 ;;		_read_switches
  1391 ;;		_settime
  1392 ;;		_view
  1393 ;;		_writeEEP
  1394 ;;		_write_ds1307
  1395 ;; This function is called by:
  1396 ;;		Startup code after reset
  1397 ;; This function uses a non-reentrant model
  1398 ;;
  1399                           
  1400                           	psect	text0
  1401  002404                     __ptext0:
  1402                           	opt stack 0
  1403  002404                     _main:
  1404                           	opt stack 25
  1405                           
  1406                           ;main.c: 65: init_config();
  1407                           
  1408                           ;incstack = 0
  1409  002404  ECD8  F007         	call	_init_config	;wreg free
  1410                           
  1411                           ;main.c: 66: unsigned long key,c=0,c1=0;
  1412  002408  0E00               	movlw	0
  1413  00240A  0101               	movlb	1	; () banked
  1414  00240C  6FA5               	movwf	main@c& (0+255),b
  1415  00240E  0E00               	movlw	0
  1416  002410  6FA6               	movwf	(main@c+1)& (0+255),b
  1417  002412  0E00               	movlw	0
  1418  002414  6FA7               	movwf	(main@c+2)& (0+255),b
  1419  002416  0E00               	movlw	0
  1420  002418  6FA8               	movwf	(main@c+3)& (0+255),b
  1421                           
  1422                           ; BSR set to: 1
  1423  00241A  0E00               	movlw	0
  1424  00241C  0101               	movlb	1	; () banked
  1425  00241E  6FA9               	movwf	main@c1& (0+255),b
  1426  002420  0E00               	movlw	0
  1427  002422  6FAA               	movwf	(main@c1+1)& (0+255),b
  1428  002424  0E00               	movlw	0
  1429  002426  6FAB               	movwf	(main@c1+2)& (0+255),b
  1430  002428  0E00               	movlw	0
  1431  00242A  6FAC               	movwf	(main@c1+3)& (0+255),b
  1432                           
  1433                           ; BSR set to: 1
  1434                           ;main.c: 67: unsigned char k = '0';
  1435  00242C  0E30               	movlw	48
  1436  00242E  0101               	movlb	1	; () banked
  1437  002430  6FB6               	movwf	main@k& (0+255),b
  1438                           
  1439                           ; BSR set to: 1
  1440                           ;main.c: 68: unsigned int a,sc=0;
  1441  002432  0E00               	movlw	0
  1442  002434  0101               	movlb	1	; () banked
  1443  002436  6FB8               	movwf	(main@sc+1)& (0+255),b
  1444  002438  0E00               	movlw	0
  1445  00243A  6FB7               	movwf	main@sc& (0+255),b
  1446                           
  1447                           ; BSR set to: 1
  1448                           ;main.c: 69: unsigned char add=0x00;
  1449  00243C  0E00               	movlw	0
  1450  00243E  0101               	movlb	1	; () banked
  1451  002440  6FA0               	movwf	main@add& (0+255),b
  1452                           
  1453                           ; BSR set to: 1
  1454                           ;main.c: 70: unsigned char store[17],speed[4]="000",clear[9];
  1455  002442  C1B9  F166         	movff	main@F16002,main@speed
  1456  002446  C1BA  F167         	movff	main@F16002+1,main@speed+1
  1457  00244A  C1BB  F168         	movff	main@F16002+2,main@speed+2
  1458  00244E  C1BC  F169         	movff	main@F16002+3,main@speed+3
  1459                           
  1460                           ; BSR set to: 1
  1461                           ;main.c: 71: unsigned char str[6][17]={"view log        ","download log    ","clear log 
      +                                ","change password ","set time        ","             "};
  1462  002452  EE20  F060         	lfsr	2,main@F16006
  1463  002456  EE11  F000         	lfsr	1,main@str
  1464  00245A  0E65               	movlw	101
  1465  00245C                     u3621:
  1466  00245C  CFDB FFE3          	movff	plusw2,plusw1
  1467  002460  06E8               	decf	wreg,f,c
  1468  002462  E2FC               	bc	u3621
  1469                           
  1470                           ; BSR set to: 1
  1471                           ;main.c: 72: unsigned int option=1,j=0,option1=0,flag2=1,flag3=0,save=0,cl=1;
  1472  002464  0E00               	movlw	0
  1473  002466  0101               	movlb	1	; () banked
  1474  002468  6FA4               	movwf	(main@option+1)& (0+255),b
  1475  00246A  0E01               	movlw	1
  1476  00246C  6FA3               	movwf	main@option& (0+255),b
  1477                           
  1478                           ; BSR set to: 1
  1479  00246E  0E00               	movlw	0
  1480  002470  0101               	movlb	1	; () banked
  1481  002472  6F6B               	movwf	(main@j+1)& (0+255),b
  1482  002474  0E00               	movlw	0
  1483  002476  6F6A               	movwf	main@j& (0+255),b
  1484                           
  1485                           ; BSR set to: 1
  1486  002478  0E00               	movlw	0
  1487  00247A  0101               	movlb	1	; () banked
  1488  00247C  6F6D               	movwf	(main@option1+1)& (0+255),b
  1489  00247E  0E00               	movlw	0
  1490  002480  6F6C               	movwf	main@option1& (0+255),b
  1491                           
  1492                           ; BSR set to: 1
  1493  002482  0E00               	movlw	0
  1494  002484  0101               	movlb	1	; () banked
  1495  002486  6F6F               	movwf	(main@flag2+1)& (0+255),b
  1496  002488  0E01               	movlw	1
  1497  00248A  6F6E               	movwf	main@flag2& (0+255),b
  1498                           
  1499                           ; BSR set to: 1
  1500  00248C  0E00               	movlw	0
  1501  00248E  0101               	movlb	1	; () banked
  1502  002490  6F71               	movwf	(main@flag3+1)& (0+255),b
  1503  002492  0E00               	movlw	0
  1504  002494  6F70               	movwf	main@flag3& (0+255),b
  1505                           
  1506                           ; BSR set to: 1
  1507  002496  0E00               	movlw	0
  1508  002498  0101               	movlb	1	; () banked
  1509  00249A  6F91               	movwf	(main@save+1)& (0+255),b
  1510  00249C  0E00               	movlw	0
  1511  00249E  6F90               	movwf	main@save& (0+255),b
  1512                           
  1513                           ; BSR set to: 1
  1514  0024A0  0E00               	movlw	0
  1515  0024A2  0101               	movlb	1	; () banked
  1516  0024A4  6F7E               	movwf	(main@cl+1)& (0+255),b
  1517  0024A6  0E01               	movlw	1
  1518  0024A8  6F7D               	movwf	main@cl& (0+255),b
  1519                           
  1520                           ; BSR set to: 1
  1521                           ;main.c: 73: store[8] = ' ';
  1522  0024AA  0E20               	movlw	32
  1523  0024AC  0101               	movlb	1	; () banked
  1524  0024AE  6F87               	movwf	(main@store+8)& (0+255),b
  1525                           
  1526                           ; BSR set to: 1
  1527                           ;main.c: 74: store[9] = ' ';
  1528  0024B0  0E20               	movlw	32
  1529  0024B2  0101               	movlb	1	; () banked
  1530  0024B4  6F88               	movwf	(main@store+9)& (0+255),b
  1531                           
  1532                           ; BSR set to: 1
  1533                           ;main.c: 75: store[10] = 'O';
  1534  0024B6  0E4F               	movlw	79
  1535  0024B8  0101               	movlb	1	; () banked
  1536  0024BA  6F89               	movwf	(main@store+10)& (0+255),b
  1537                           
  1538                           ; BSR set to: 1
  1539                           ;main.c: 76: store[11] = 'N';
  1540  0024BC  0E4E               	movlw	78
  1541  0024BE  0101               	movlb	1	; () banked
  1542  0024C0  6F8A               	movwf	(main@store+11)& (0+255),b
  1543                           
  1544                           ; BSR set to: 1
  1545                           ;main.c: 77: store[12] = ' ';
  1546  0024C2  0E20               	movlw	32
  1547  0024C4  0101               	movlb	1	; () banked
  1548  0024C6  6F8B               	movwf	(main@store+12)& (0+255),b
  1549                           
  1550                           ; BSR set to: 1
  1551                           ;main.c: 78: store[16] ='\0';
  1552  0024C8  0E00               	movlw	0
  1553  0024CA  0101               	movlb	1	; () banked
  1554  0024CC  6F8F               	movwf	(main@store+16)& (0+255),b
  1555  0024CE                     l3802:
  1556                           
  1557                           ; BSR set to: 1
  1558                           ;main.c: 80: {
  1559                           ;main.c: 81: if(option)
  1560  0024CE  0101               	movlb	1	; () banked
  1561  0024D0  51A3               	movf	main@option& (0+255),w,b
  1562  0024D2  0101               	movlb	1	; () banked
  1563  0024D4  11A4               	iorwf	(main@option+1)& (0+255),w,b
  1564  0024D6  B4D8               	btfsc	status,2,c
  1565  0024D8  D1CB               	goto	l3926
  1566                           
  1567                           ; BSR set to: 1
  1568                           ;main.c: 82: {
  1569                           ;main.c: 83: get_time();
  1570  0024DA  ECD5  F009         	call	_get_time	;wreg free
  1571                           
  1572                           ;main.c: 84: clcd_print("TIME   EVENT  SP",(0x80 + (0)));
  1573  0024DE  0E8A               	movlw	low STR_15
  1574  0024E0  6E07               	movwf	clcd_print@data,c
  1575  0024E2  0E2F               	movlw	high STR_15
  1576  0024E4  6E08               	movwf	clcd_print@data+1,c
  1577  0024E6  0E80               	movlw	128
  1578  0024E8  6E09               	movwf	clcd_print@addr,c
  1579  0024EA  ECA5  F009         	call	_clcd_print	;wreg free
  1580                           
  1581                           ;main.c: 85: a = read_adc(0x04)/10.23;
  1582  0024EE  0EAE               	movlw	174
  1583  0024F0  6E0F               	movwf	___ftdiv@f2,c
  1584  0024F2  0E23               	movlw	35
  1585  0024F4  6E10               	movwf	___ftdiv@f2+1,c
  1586  0024F6  0E41               	movlw	65
  1587  0024F8  6E11               	movwf	___ftdiv@f2+2,c
  1588  0024FA  0E04               	movlw	4
  1589  0024FC  EC83  F008         	call	_read_adc
  1590  002500  C001  F009         	movff	?_read_adc,___lwtoft@c
  1591  002504  C002  F00A         	movff	?_read_adc+1,___lwtoft@c+1
  1592  002508  ECE8  F007         	call	___lwtoft	;wreg free
  1593  00250C  C009  F00C         	movff	?___lwtoft,___ftdiv@f1
  1594  002510  C00A  F00D         	movff	?___lwtoft+1,___ftdiv@f1+1
  1595  002514  C00B  F00E         	movff	?___lwtoft+2,___ftdiv@f1+2
  1596  002518  EC8D  F00B         	call	___ftdiv	;wreg free
  1597  00251C  C00C  F01B         	movff	?___ftdiv,___fttol@f1
  1598  002520  C00D  F01C         	movff	?___ftdiv+1,___fttol@f1+1
  1599  002524  C00E  F01D         	movff	?___ftdiv+2,___fttol@f1+2
  1600  002528  EC00  F00C         	call	___fttol	;wreg free
  1601  00252C  C01B  F19E         	movff	?___fttol,main@a
  1602  002530  C01C  F19F         	movff	?___fttol+1,main@a+1
  1603                           
  1604                           ;main.c: 87: store[15] = (a%10)+'0';
  1605  002534  C19E  F001         	movff	main@a,___lwmod@dividend
  1606  002538  C19F  F002         	movff	main@a+1,___lwmod@dividend+1
  1607  00253C  0E00               	movlw	0
  1608  00253E  6E04               	movwf	___lwmod@divisor+1,c
  1609  002540  0E0A               	movlw	10
  1610  002542  6E03               	movwf	___lwmod@divisor,c
  1611  002544  ECDF  F008         	call	___lwmod	;wreg free
  1612  002548  5001               	movf	?___lwmod,w,c
  1613  00254A  0F30               	addlw	48
  1614  00254C  0101               	movlb	1	; () banked
  1615  00254E  6F8E               	movwf	(main@store+15)& (0+255),b
  1616                           
  1617                           ; BSR set to: 1
  1618                           ;main.c: 88: store[14] = (a%100/10)+'0';
  1619  002550  0E00               	movlw	0
  1620  002552  6E04               	movwf	___lwmod@divisor+1,c
  1621  002554  0E64               	movlw	100
  1622  002556  6E03               	movwf	___lwmod@divisor,c
  1623  002558  C19E  F001         	movff	main@a,___lwmod@dividend
  1624  00255C  C19F  F002         	movff	main@a+1,___lwmod@dividend+1
  1625  002560  ECDF  F008         	call	___lwmod	;wreg free
  1626  002564  C001  F006         	movff	?___lwmod,___lwdiv@dividend
  1627  002568  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
  1628  00256C  0E00               	movlw	0
  1629  00256E  6E09               	movwf	___lwdiv@divisor+1,c
  1630  002570  0E0A               	movlw	10
  1631  002572  6E08               	movwf	___lwdiv@divisor,c
  1632  002574  EC24  F009         	call	___lwdiv	;wreg free
  1633  002578  5006               	movf	?___lwdiv,w,c
  1634  00257A  0F30               	addlw	48
  1635  00257C  0101               	movlb	1	; () banked
  1636  00257E  6F8D               	movwf	(main@store+14)& (0+255),b
  1637                           
  1638                           ; BSR set to: 1
  1639                           ;main.c: 89: store[13] = (a/100)+'0';
  1640  002580  C19E  F006         	movff	main@a,___lwdiv@dividend
  1641  002584  C19F  F007         	movff	main@a+1,___lwdiv@dividend+1
  1642  002588  0E00               	movlw	0
  1643  00258A  6E09               	movwf	___lwdiv@divisor+1,c
  1644  00258C  0E64               	movlw	100
  1645  00258E  6E08               	movwf	___lwdiv@divisor,c
  1646  002590  EC24  F009         	call	___lwdiv	;wreg free
  1647  002594  5006               	movf	?___lwdiv,w,c
  1648  002596  0F30               	addlw	48
  1649  002598  0101               	movlb	1	; () banked
  1650  00259A  6F8C               	movwf	(main@store+13)& (0+255),b
  1651                           
  1652                           ; BSR set to: 1
  1653                           ;main.c: 91: key = read_switches(1);
  1654  00259C  0E01               	movlw	1
  1655  00259E  ECA1  F008         	call	_read_switches
  1656  0025A2  6E39               	movwf	??_main& (0+255),c
  1657  0025A4  5039               	movf	??_main,w,c
  1658  0025A6  0101               	movlb	1	; () banked
  1659  0025A8  6FB2               	movwf	main@key& (0+255),b
  1660  0025AA  6BB3               	clrf	(main@key+1)& (0+255),b
  1661  0025AC  6BB4               	clrf	(main@key+2)& (0+255),b
  1662  0025AE  6BB5               	clrf	(main@key+3)& (0+255),b
  1663                           
  1664                           ; BSR set to: 1
  1665                           ;main.c: 92: if( key != 0xFF )
  1666  0025B0  0101               	movlb	1	; () banked
  1667  0025B2  29B2               	incf	main@key& (0+255),w,b
  1668  0025B4  0101               	movlb	1	; () banked
  1669  0025B6  11B3               	iorwf	(main@key+1)& (0+255),w,b
  1670  0025B8  0101               	movlb	1	; () banked
  1671  0025BA  11B4               	iorwf	(main@key+2)& (0+255),w,b
  1672  0025BC  0101               	movlb	1	; () banked
  1673  0025BE  11B5               	iorwf	(main@key+3)& (0+255),w,b
  1674  0025C0  B4D8               	btfsc	status,2,c
  1675  0025C2  D010               	goto	l3824
  1676                           
  1677                           ; BSR set to: 1
  1678                           ;main.c: 93: for(unsigned int i=1000;i--;);
  1679  0025C4  0E03               	movlw	3
  1680  0025C6  0101               	movlb	1	; () banked
  1681  0025C8  6F7C               	movwf	(main@i+1)& (0+255),b
  1682  0025CA  0EE8               	movlw	232
  1683  0025CC  6F7B               	movwf	main@i& (0+255),b
  1684  0025CE                     l3822:
  1685                           
  1686                           ; BSR set to: 1
  1687  0025CE  0101               	movlb	1	; () banked
  1688  0025D0  077B               	decf	main@i& (0+255),f,b
  1689  0025D2  A0D8               	btfss	status,0,c
  1690  0025D4  077C               	decf	(main@i+1)& (0+255),f,b
  1691  0025D6  0101               	movlb	1	; () banked
  1692  0025D8  297B               	incf	main@i& (0+255),w,b
  1693  0025DA  E1F9               	bnz	l3822
  1694  0025DC  0101               	movlb	1	; () banked
  1695  0025DE  297C               	incf	(main@i+1)& (0+255),w,b
  1696  0025E0  A4D8               	btfss	status,2,c
  1697  0025E2  D7F5               	goto	l3822
  1698  0025E4                     l3824:
  1699                           
  1700                           ; BSR set to: 1
  1701                           ;main.c: 94: if(key == 1)
  1702  0025E4  0101               	movlb	1	; () banked
  1703  0025E6  05B2               	decf	main@key& (0+255),w,b
  1704  0025E8  0101               	movlb	1	; () banked
  1705  0025EA  11B3               	iorwf	(main@key+1)& (0+255),w,b
  1706  0025EC  0101               	movlb	1	; () banked
  1707  0025EE  11B4               	iorwf	(main@key+2)& (0+255),w,b
  1708  0025F0  0101               	movlb	1	; () banked
  1709  0025F2  11B5               	iorwf	(main@key+3)& (0+255),w,b
  1710  0025F4  A4D8               	btfss	status,2,c
  1711  0025F6  D020               	goto	l3842
  1712                           
  1713                           ; BSR set to: 1
  1714                           ;main.c: 95: {
  1715                           ;main.c: 96: save = 1;
  1716  0025F8  0E00               	movlw	0
  1717  0025FA  0101               	movlb	1	; () banked
  1718  0025FC  6F91               	movwf	(main@save+1)& (0+255),b
  1719  0025FE  0E01               	movlw	1
  1720  002600  6F90               	movwf	main@save& (0+255),b
  1721                           
  1722                           ;main.c: 97: store[10]='G';
  1723  002602  0E47               	movlw	71
  1724  002604  0101               	movlb	1	; () banked
  1725  002606  6F89               	movwf	(main@store+10)& (0+255),b
  1726                           
  1727                           ; BSR set to: 1
  1728                           ;main.c: 98: if ( store[11] > '4' )
  1729  002608  0E34               	movlw	52
  1730  00260A  0101               	movlb	1	; () banked
  1731  00260C  658A               	cpfsgt	(main@store+11)& (0+255),b
  1732  00260E  D010               	goto	l3838
  1733                           
  1734                           ; BSR set to: 1
  1735                           ;main.c: 99: {
  1736                           ;main.c: 100: if ( k == '5' )
  1737  002610  0E35               	movlw	53
  1738  002612  0101               	movlb	1	; () banked
  1739  002614  19B6               	xorwf	main@k& (0+255),w,b
  1740  002616  A4D8               	btfss	status,2,c
  1741  002618  D002               	goto	l3834
  1742                           
  1743                           ; BSR set to: 1
  1744                           ;main.c: 101: k = 'R';
  1745  00261A  0E52               	movlw	82
  1746  00261C  D006               	goto	L1
  1747  00261E                     l3834:
  1748                           
  1749                           ; BSR set to: 1
  1750                           ;main.c: 102: else if ( store[11] == 'N' )
  1751  00261E  0E4E               	movlw	78
  1752  002620  0101               	movlb	1	; () banked
  1753  002622  198A               	xorwf	(main@store+11)& (0+255),w,b
  1754  002624  A4D8               	btfss	status,2,c
  1755  002626  D006               	goto	l3840
  1756                           
  1757                           ; BSR set to: 1
  1758                           ;main.c: 103: k = '1';
  1759  002628  0E31               	movlw	49
  1760  00262A                     L1:
  1761  00262A  0101               	movlb	1	; () banked
  1762  00262C  6FB6               	movwf	main@k& (0+255),b
  1763                           
  1764                           ; BSR set to: 1
  1765                           ;main.c: 104: }
  1766                           
  1767                           ; BSR set to: 1
  1768  00262E  D002               	goto	l3840
  1769  002630                     l3838:
  1770                           
  1771                           ; BSR set to: 1
  1772                           ;main.c: 105: else
  1773                           ;main.c: 106: k++;
  1774  002630  0101               	movlb	1	; () banked
  1775  002632  2BB6               	incf	main@k& (0+255),f,b
  1776  002634                     l3840:
  1777                           
  1778                           ; BSR set to: 1
  1779                           ;main.c: 107: store[11] = k;
  1780  002634  C1B6  F18A         	movff	main@k,main@store+11
  1781  002638                     l3842:
  1782                           
  1783                           ; BSR set to: 1
  1784                           ;main.c: 108: }
  1785                           ;main.c: 109: if(key == 2)
  1786  002638  0E02               	movlw	2
  1787  00263A  0101               	movlb	1	; () banked
  1788  00263C  19B2               	xorwf	main@key& (0+255),w,b
  1789  00263E  0101               	movlb	1	; () banked
  1790  002640  11B3               	iorwf	(main@key+1)& (0+255),w,b
  1791  002642  0101               	movlb	1	; () banked
  1792  002644  11B4               	iorwf	(main@key+2)& (0+255),w,b
  1793  002646  0101               	movlb	1	; () banked
  1794  002648  11B5               	iorwf	(main@key+3)& (0+255),w,b
  1795  00264A  A4D8               	btfss	status,2,c
  1796  00264C  D02B               	goto	l3864
  1797                           
  1798                           ; BSR set to: 1
  1799                           ;main.c: 110: {
  1800                           ;main.c: 111: save=1;
  1801  00264E  0E00               	movlw	0
  1802  002650  0101               	movlb	1	; () banked
  1803  002652  6F91               	movwf	(main@save+1)& (0+255),b
  1804  002654  0E01               	movlw	1
  1805  002656  6F90               	movwf	main@save& (0+255),b
  1806                           
  1807                           ;main.c: 112: store[10]='G';
  1808  002658  0E47               	movlw	71
  1809  00265A  0101               	movlb	1	; () banked
  1810  00265C  6F89               	movwf	(main@store+10)& (0+255),b
  1811                           
  1812                           ; BSR set to: 1
  1813                           ;main.c: 113: k--;
  1814  00265E  0101               	movlb	1	; () banked
  1815  002660  07B6               	decf	main@k& (0+255),f,b
  1816                           
  1817                           ; BSR set to: 1
  1818                           ;main.c: 114: if ( k > '0')
  1819  002662  0E30               	movlw	48
  1820  002664  0101               	movlb	1	; () banked
  1821  002666  65B6               	cpfsgt	main@k& (0+255),b
  1822  002668  D002               	goto	l3852
  1823                           
  1824                           ; BSR set to: 1
  1825                           ;main.c: 115: {
  1826                           ;main.c: 116: store[11]=k;
  1827  00266A  C1B6  F18A         	movff	main@k,main@store+11
  1828  00266E                     l3852:
  1829                           
  1830                           ; BSR set to: 1
  1831                           ;main.c: 117: }
  1832                           ;main.c: 118: if(k == '0' || k == 'Q' )
  1833  00266E  0E30               	movlw	48
  1834  002670  0101               	movlb	1	; () banked
  1835  002672  19B6               	xorwf	main@k& (0+255),w,b
  1836  002674  B4D8               	btfsc	status,2,c
  1837  002676  D005               	goto	l3856
  1838                           
  1839                           ; BSR set to: 1
  1840  002678  0E51               	movlw	81
  1841  00267A  0101               	movlb	1	; () banked
  1842  00267C  19B6               	xorwf	main@k& (0+255),w,b
  1843  00267E  A4D8               	btfss	status,2,c
  1844  002680  D011               	goto	l3864
  1845  002682                     l3856:
  1846                           
  1847                           ; BSR set to: 1
  1848                           ;main.c: 119: {
  1849                           ;main.c: 120: if ( k == 'Q' )
  1850  002682  0E51               	movlw	81
  1851  002684  0101               	movlb	1	; () banked
  1852  002686  19B6               	xorwf	main@k& (0+255),w,b
  1853  002688  A4D8               	btfss	status,2,c
  1854  00268A  D006               	goto	l3862
  1855                           
  1856                           ; BSR set to: 1
  1857                           ;main.c: 121: {
  1858                           ;main.c: 122: k = '5';
  1859  00268C  0E35               	movlw	53
  1860  00268E  0101               	movlb	1	; () banked
  1861  002690  6FB6               	movwf	main@k& (0+255),b
  1862                           
  1863                           ; BSR set to: 1
  1864                           ;main.c: 123: store[11] = k;
  1865  002692  C1B6  F18A         	movff	main@k,main@store+11
  1866                           
  1867                           ;main.c: 124: }
  1868  002696  D006               	goto	l3864
  1869  002698                     l3862:
  1870                           
  1871                           ; BSR set to: 1
  1872                           ;main.c: 125: else
  1873                           ;main.c: 126: {
  1874                           ;main.c: 127: k = '1';
  1875  002698  0E31               	movlw	49
  1876  00269A  0101               	movlb	1	; () banked
  1877  00269C  6FB6               	movwf	main@k& (0+255),b
  1878                           
  1879                           ;main.c: 128: store[11]='N';
  1880  00269E  0E4E               	movlw	78
  1881  0026A0  0101               	movlb	1	; () banked
  1882  0026A2  6F8A               	movwf	(main@store+11)& (0+255),b
  1883  0026A4                     l3864:
  1884                           
  1885                           ; BSR set to: 1
  1886                           ;main.c: 129: }
  1887                           ;main.c: 130: }
  1888                           ;main.c: 131: }
  1889                           ;main.c: 132: if(key == 3)
  1890  0026A4  0E03               	movlw	3
  1891  0026A6  0101               	movlb	1	; () banked
  1892  0026A8  19B2               	xorwf	main@key& (0+255),w,b
  1893  0026AA  0101               	movlb	1	; () banked
  1894  0026AC  11B3               	iorwf	(main@key+1)& (0+255),w,b
  1895  0026AE  0101               	movlb	1	; () banked
  1896  0026B0  11B4               	iorwf	(main@key+2)& (0+255),w,b
  1897  0026B2  0101               	movlb	1	; () banked
  1898  0026B4  11B5               	iorwf	(main@key+3)& (0+255),w,b
  1899  0026B6  A4D8               	btfss	status,2,c
  1900  0026B8  D00B               	goto	l3868
  1901                           
  1902                           ; BSR set to: 1
  1903                           ;main.c: 133: {
  1904                           ;main.c: 134: save=1;
  1905  0026BA  0E00               	movlw	0
  1906  0026BC  0101               	movlb	1	; () banked
  1907  0026BE  6F91               	movwf	(main@save+1)& (0+255),b
  1908  0026C0  0E01               	movlw	1
  1909  0026C2  6F90               	movwf	main@save& (0+255),b
  1910                           
  1911                           ;main.c: 135: store[10]=' ';
  1912  0026C4  0E20               	movlw	32
  1913  0026C6  0101               	movlb	1	; () banked
  1914  0026C8  6F89               	movwf	(main@store+10)& (0+255),b
  1915                           
  1916                           ;main.c: 136: store[11]='C';
  1917  0026CA  0E43               	movlw	67
  1918  0026CC  0101               	movlb	1	; () banked
  1919  0026CE  6F8A               	movwf	(main@store+11)& (0+255),b
  1920  0026D0                     l3868:
  1921                           
  1922                           ; BSR set to: 1
  1923                           ;main.c: 137: }
  1924                           ;main.c: 138: if ( key == 8)
  1925  0026D0  0E08               	movlw	8
  1926  0026D2  0101               	movlb	1	; () banked
  1927  0026D4  19B2               	xorwf	main@key& (0+255),w,b
  1928  0026D6  0101               	movlb	1	; () banked
  1929  0026D8  11B3               	iorwf	(main@key+1)& (0+255),w,b
  1930  0026DA  0101               	movlb	1	; () banked
  1931  0026DC  11B4               	iorwf	(main@key+2)& (0+255),w,b
  1932  0026DE  0101               	movlb	1	; () banked
  1933  0026E0  11B5               	iorwf	(main@key+3)& (0+255),w,b
  1934  0026E2  A4D8               	btfss	status,2,c
  1935  0026E4  D05A               	goto	l254
  1936                           
  1937                           ; BSR set to: 1
  1938                           ;main.c: 139: {
  1939                           ;main.c: 140: pass();
  1940  0026E6  ECC6  F00E         	call	_pass	;wreg free
  1941                           
  1942                           ;main.c: 141: for ( int i = 0; i< 2000; i++ );
  1943  0026EA  0E00               	movlw	0
  1944  0026EC  0101               	movlb	1	; () banked
  1945  0026EE  6F9B               	movwf	(main@i_231+1)& (0+255),b
  1946  0026F0  0E00               	movlw	0
  1947  0026F2  6F9A               	movwf	main@i_231& (0+255),b
  1948  0026F4                     l3874:
  1949                           
  1950                           ; BSR set to: 1
  1951  0026F4  0101               	movlb	1	; () banked
  1952  0026F6  BF9B               	btfsc	(main@i_231+1)& (0+255),7,b
  1953  0026F8  D008               	goto	l3878
  1954  0026FA  0ED0               	movlw	208
  1955  0026FC  0101               	movlb	1	; () banked
  1956  0026FE  5D9A               	subwf	main@i_231& (0+255),w,b
  1957  002700  0E07               	movlw	7
  1958  002702  0101               	movlb	1	; () banked
  1959  002704  599B               	subwfb	(main@i_231+1)& (0+255),w,b
  1960  002706  B0D8               	btfsc	status,0,c
  1961  002708  D004               	goto	l3882
  1962  00270A                     l3878:
  1963                           
  1964                           ; BSR set to: 1
  1965  00270A  0101               	movlb	1	; () banked
  1966  00270C  4B9A               	infsnz	main@i_231& (0+255),f,b
  1967  00270E  2B9B               	incf	(main@i_231+1)& (0+255),f,b
  1968  002710  D7F1               	goto	l3874
  1969  002712                     l3882:
  1970                           
  1971                           ; BSR set to: 1
  1972                           ;main.c: 142: option = 0;
  1973  002712  0E00               	movlw	0
  1974  002714  0101               	movlb	1	; () banked
  1975  002716  6FA4               	movwf	(main@option+1)& (0+255),b
  1976  002718  0E00               	movlw	0
  1977  00271A  6FA3               	movwf	main@option& (0+255),b
  1978                           
  1979                           ; BSR set to: 1
  1980                           ;main.c: 143: clcd_print(str[sc], (0x80 + (1)));
  1981  00271C  C1B7  F001         	movff	main@sc,___wmul@multiplier
  1982  002720  C1B8  F002         	movff	main@sc+1,___wmul@multiplier+1
  1983  002724  0E00               	movlw	0
  1984  002726  6E04               	movwf	___wmul@multiplicand+1,c
  1985  002728  0E11               	movlw	17
  1986  00272A  6E03               	movwf	___wmul@multiplicand,c
  1987  00272C  ECFA  F007         	call	___wmul	;wreg free
  1988  002730  0E00               	movlw	low main@str
  1989  002732  2401               	addwf	?___wmul,w,c
  1990  002734  6E07               	movwf	clcd_print@data,c
  1991  002736  0E01               	movlw	high main@str
  1992  002738  2002               	addwfc	?___wmul+1,w,c
  1993  00273A  6E08               	movwf	clcd_print@data+1,c
  1994  00273C  0E81               	movlw	129
  1995  00273E  6E09               	movwf	clcd_print@addr,c
  1996  002740  ECA5  F009         	call	_clcd_print	;wreg free
  1997                           
  1998                           ;main.c: 144: clcd_print(str[sc+1], (0xC0 + (1)));
  1999  002744  0E01               	movlw	1
  2000  002746  0101               	movlb	1	; () banked
  2001  002748  25B7               	addwf	main@sc& (0+255),w,b
  2002  00274A  6E01               	movwf	___wmul@multiplier,c
  2003  00274C  0E00               	movlw	0
  2004  00274E  0101               	movlb	1	; () banked
  2005  002750  21B8               	addwfc	(main@sc+1)& (0+255),w,b
  2006  002752  6E02               	movwf	___wmul@multiplier+1,c
  2007  002754  0E00               	movlw	0
  2008  002756  6E04               	movwf	___wmul@multiplicand+1,c
  2009  002758  0E11               	movlw	17
  2010  00275A  6E03               	movwf	___wmul@multiplicand,c
  2011  00275C  ECFA  F007         	call	___wmul	;wreg free
  2012  002760  0E00               	movlw	low main@str
  2013  002762  2401               	addwf	?___wmul,w,c
  2014  002764  6E07               	movwf	clcd_print@data,c
  2015  002766  0E01               	movlw	high main@str
  2016  002768  2002               	addwfc	?___wmul+1,w,c
  2017  00276A  6E08               	movwf	clcd_print@data+1,c
  2018  00276C  0EC1               	movlw	193
  2019  00276E  6E09               	movwf	clcd_print@addr,c
  2020  002770  ECA5  F009         	call	_clcd_print	;wreg free
  2021                           
  2022                           ;main.c: 145: clcd_putch('*', (0x80 + (0)));
  2023  002774  0E80               	movlw	128
  2024  002776  6E03               	movwf	clcd_putch@addr,c
  2025  002778  0E2A               	movlw	42
  2026  00277A  ECAD  F007         	call	_clcd_putch
  2027                           
  2028                           ;main.c: 146: clcd_putch(' ', (0xC0 + (0)));
  2029  00277E  0EC0               	movlw	192
  2030  002780  6E03               	movwf	clcd_putch@addr,c
  2031  002782  0E20               	movlw	32
  2032  002784  ECAD  F007         	call	_clcd_putch
  2033                           
  2034                           ;main.c: 147: key = 0xFF;
  2035  002788  0EFF               	movlw	255
  2036  00278A  0101               	movlb	1	; () banked
  2037  00278C  6FB2               	movwf	main@key& (0+255),b
  2038  00278E  0E00               	movlw	0
  2039  002790  6FB3               	movwf	(main@key+1)& (0+255),b
  2040  002792  0E00               	movlw	0
  2041  002794  6FB4               	movwf	(main@key+2)& (0+255),b
  2042  002796  0E00               	movlw	0
  2043  002798  6FB5               	movwf	(main@key+3)& (0+255),b
  2044  00279A                     l254:
  2045                           
  2046                           ; BSR set to: 1
  2047                           ;main.c: 148: }
  2048                           ;main.c: 149: for( int i = 0; i< 8 ; i++ )
  2049  00279A  0E00               	movlw	0
  2050  00279C  0101               	movlb	1	; () banked
  2051  00279E  6FAE               	movwf	(main@i_233+1)& (0+255),b
  2052  0027A0  0E00               	movlw	0
  2053  0027A2  6FAD               	movwf	main@i_233& (0+255),b
  2054  0027A4                     l3892:
  2055                           
  2056                           ; BSR set to: 1
  2057  0027A4  0101               	movlb	1	; () banked
  2058  0027A6  BFAE               	btfsc	(main@i_233+1)& (0+255),7,b
  2059  0027A8  D008               	goto	l3896
  2060  0027AA  0101               	movlb	1	; () banked
  2061  0027AC  51AE               	movf	(main@i_233+1)& (0+255),w,b
  2062  0027AE  E11B               	bnz	l3902
  2063  0027B0  0E08               	movlw	8
  2064  0027B2  0101               	movlb	1	; () banked
  2065  0027B4  5DAD               	subwf	main@i_233& (0+255),w,b
  2066  0027B6  B0D8               	btfsc	status,0,c
  2067  0027B8  D016               	goto	l3902
  2068  0027BA                     l3896:
  2069                           
  2070                           ; BSR set to: 1
  2071                           ;main.c: 150: store[i]=time[i];
  2072  0027BA  0E57               	movlw	low _time
  2073  0027BC  0101               	movlb	1	; () banked
  2074  0027BE  25AD               	addwf	main@i_233& (0+255),w,b
  2075  0027C0  6ED9               	movwf	fsr2l,c
  2076  0027C2  0E00               	movlw	high _time
  2077  0027C4  0101               	movlb	1	; () banked
  2078  0027C6  21AE               	addwfc	(main@i_233+1)& (0+255),w,b
  2079  0027C8  6EDA               	movwf	fsr2h,c
  2080  0027CA  0E7F               	movlw	low main@store
  2081  0027CC  0101               	movlb	1	; () banked
  2082  0027CE  25AD               	addwf	main@i_233& (0+255),w,b
  2083  0027D0  6EE1               	movwf	fsr1l,c
  2084  0027D2  0E01               	movlw	high main@store
  2085  0027D4  0101               	movlb	1	; () banked
  2086  0027D6  21AE               	addwfc	(main@i_233+1)& (0+255),w,b
  2087  0027D8  6EE2               	movwf	fsr1h,c
  2088  0027DA  CFDF FFE7          	movff	indf2,indf1
  2089                           
  2090                           ; BSR set to: 1
  2091  0027DE  0101               	movlb	1	; () banked
  2092  0027E0  4BAD               	infsnz	main@i_233& (0+255),f,b
  2093  0027E2  2BAE               	incf	(main@i_233+1)& (0+255),f,b
  2094  0027E4  D7DF               	goto	l3892
  2095  0027E6                     l3902:
  2096                           
  2097                           ; BSR set to: 1
  2098                           ;main.c: 151: if(save==1)
  2099  0027E6  0101               	movlb	1	; () banked
  2100  0027E8  0590               	decf	main@save& (0+255),w,b
  2101  0027EA  0101               	movlb	1	; () banked
  2102  0027EC  1191               	iorwf	(main@save+1)& (0+255),w,b
  2103  0027EE  A4D8               	btfss	status,2,c
  2104  0027F0  D031               	goto	l3922
  2105                           
  2106                           ; BSR set to: 1
  2107                           ;main.c: 152: {
  2108                           ;main.c: 153: if ( add == 0xA0 )
  2109  0027F2  0EA0               	movlw	160
  2110  0027F4  0101               	movlb	1	; () banked
  2111  0027F6  19A0               	xorwf	main@add& (0+255),w,b
  2112  0027F8  A4D8               	btfss	status,2,c
  2113  0027FA  D003               	goto	l260
  2114                           
  2115                           ; BSR set to: 1
  2116                           ;main.c: 154: add= 0x00;
  2117  0027FC  0E00               	movlw	0
  2118  0027FE  0101               	movlb	1	; () banked
  2119  002800  6FA0               	movwf	main@add& (0+255),b
  2120  002802                     l260:
  2121                           
  2122                           ; BSR set to: 1
  2123                           ;main.c: 155: for(int i=0;i<16;i++)
  2124  002802  0E00               	movlw	0
  2125  002804  0101               	movlb	1	; () banked
  2126  002806  6FA2               	movwf	(main@i_234+1)& (0+255),b
  2127  002808  0E00               	movlw	0
  2128  00280A  6FA1               	movwf	main@i_234& (0+255),b
  2129  00280C                     l3908:
  2130                           
  2131                           ; BSR set to: 1
  2132  00280C  0101               	movlb	1	; () banked
  2133  00280E  BFA2               	btfsc	(main@i_234+1)& (0+255),7,b
  2134  002810  D008               	goto	l3912
  2135  002812  0101               	movlb	1	; () banked
  2136  002814  51A2               	movf	(main@i_234+1)& (0+255),w,b
  2137  002816  E119               	bnz	l3920
  2138  002818  0E10               	movlw	16
  2139  00281A  0101               	movlb	1	; () banked
  2140  00281C  5DA1               	subwf	main@i_234& (0+255),w,b
  2141  00281E  B0D8               	btfsc	status,0,c
  2142  002820  D014               	goto	l3920
  2143  002822                     l3912:
  2144                           
  2145                           ; BSR set to: 1
  2146                           ;main.c: 156: {
  2147                           ;main.c: 157: writeEEP(add++,store[i]);
  2148  002822  0E7F               	movlw	low main@store
  2149  002824  0101               	movlb	1	; () banked
  2150  002826  25A1               	addwf	main@i_234& (0+255),w,b
  2151  002828  6ED9               	movwf	fsr2l,c
  2152  00282A  0E01               	movlw	high main@store
  2153  00282C  0101               	movlb	1	; () banked
  2154  00282E  21A2               	addwfc	(main@i_234+1)& (0+255),w,b
  2155  002830  6EDA               	movwf	fsr2h,c
  2156  002832  50DF               	movf	indf2,w,c
  2157  002834  6E02               	movwf	writeEEP@data,c
  2158  002836  0101               	movlb	1	; () banked
  2159  002838  51A0               	movf	main@add& (0+255),w,b
  2160  00283A  EC66  F008         	call	_writeEEP
  2161  00283E  0101               	movlb	1	; () banked
  2162  002840  2BA0               	incf	main@add& (0+255),f,b
  2163                           
  2164                           ; BSR set to: 1
  2165  002842  0101               	movlb	1	; () banked
  2166  002844  4BA1               	infsnz	main@i_234& (0+255),f,b
  2167  002846  2BA2               	incf	(main@i_234+1)& (0+255),f,b
  2168  002848  D7E1               	goto	l3908
  2169  00284A                     l3920:
  2170                           
  2171                           ; BSR set to: 1
  2172                           ;main.c: 158: }
  2173                           ;main.c: 159: save=0;
  2174  00284A  0E00               	movlw	0
  2175  00284C  0101               	movlb	1	; () banked
  2176  00284E  6F91               	movwf	(main@save+1)& (0+255),b
  2177  002850  0E00               	movlw	0
  2178  002852  6F90               	movwf	main@save& (0+255),b
  2179  002854                     l3922:
  2180                           
  2181                           ; BSR set to: 1
  2182                           ;main.c: 160: }
  2183                           ;main.c: 161: if ( option )
  2184  002854  0101               	movlb	1	; () banked
  2185  002856  51A3               	movf	main@option& (0+255),w,b
  2186  002858  0101               	movlb	1	; () banked
  2187  00285A  11A4               	iorwf	(main@option+1)& (0+255),w,b
  2188  00285C  B4D8               	btfsc	status,2,c
  2189  00285E  D008               	goto	l3926
  2190                           
  2191                           ; BSR set to: 1
  2192                           ;main.c: 162: clcd_print(store,(0xC0 + (0)));
  2193  002860  0E7F               	movlw	low main@store
  2194  002862  6E07               	movwf	clcd_print@data,c
  2195  002864  0E01               	movlw	high main@store
  2196  002866  6E08               	movwf	clcd_print@data+1,c
  2197  002868  0EC0               	movlw	192
  2198  00286A  6E09               	movwf	clcd_print@addr,c
  2199  00286C  ECA5  F009         	call	_clcd_print	;wreg free
  2200  002870                     l3926:
  2201                           
  2202                           ;main.c: 163: }
  2203                           ;main.c: 164: if(option == 0)
  2204  002870  0101               	movlb	1	; () banked
  2205  002872  51A3               	movf	main@option& (0+255),w,b
  2206  002874  0101               	movlb	1	; () banked
  2207  002876  11A4               	iorwf	(main@option+1)& (0+255),w,b
  2208  002878  A4D8               	btfss	status,2,c
  2209  00287A  D629               	goto	l3802
  2210                           
  2211                           ; BSR set to: 1
  2212                           ;main.c: 165: {
  2213                           ;main.c: 166: key = read_switches(0);
  2214  00287C  0E00               	movlw	0
  2215  00287E  ECA1  F008         	call	_read_switches
  2216  002882  6E39               	movwf	??_main& (0+255),c
  2217  002884  5039               	movf	??_main,w,c
  2218  002886  0101               	movlb	1	; () banked
  2219  002888  6FB2               	movwf	main@key& (0+255),b
  2220  00288A  6BB3               	clrf	(main@key+1)& (0+255),b
  2221  00288C  6BB4               	clrf	(main@key+2)& (0+255),b
  2222  00288E  6BB5               	clrf	(main@key+3)& (0+255),b
  2223                           
  2224                           ; BSR set to: 1
  2225                           ;main.c: 168: if ( key != 0xFF )
  2226  002890  0101               	movlb	1	; () banked
  2227  002892  29B2               	incf	main@key& (0+255),w,b
  2228  002894  0101               	movlb	1	; () banked
  2229  002896  11B3               	iorwf	(main@key+1)& (0+255),w,b
  2230  002898  0101               	movlb	1	; () banked
  2231  00289A  11B4               	iorwf	(main@key+2)& (0+255),w,b
  2232  00289C  0101               	movlb	1	; () banked
  2233  00289E  11B5               	iorwf	(main@key+3)& (0+255),w,b
  2234  0028A0  B4D8               	btfsc	status,2,c
  2235  0028A2  D014               	goto	l3942
  2236                           
  2237                           ; BSR set to: 1
  2238                           ;main.c: 169: for ( int i = 0; i< 1000 ;i++ );
  2239  0028A4  0E00               	movlw	0
  2240  0028A6  0101               	movlb	1	; () banked
  2241  0028A8  6F9D               	movwf	(main@i_235+1)& (0+255),b
  2242  0028AA  0E00               	movlw	0
  2243  0028AC  6F9C               	movwf	main@i_235& (0+255),b
  2244  0028AE                     l3934:
  2245                           
  2246                           ; BSR set to: 1
  2247  0028AE  0101               	movlb	1	; () banked
  2248  0028B0  BF9D               	btfsc	(main@i_235+1)& (0+255),7,b
  2249  0028B2  D008               	goto	l3938
  2250  0028B4  0EE8               	movlw	232
  2251  0028B6  0101               	movlb	1	; () banked
  2252  0028B8  5D9C               	subwf	main@i_235& (0+255),w,b
  2253  0028BA  0E03               	movlw	3
  2254  0028BC  0101               	movlb	1	; () banked
  2255  0028BE  599D               	subwfb	(main@i_235+1)& (0+255),w,b
  2256  0028C0  B0D8               	btfsc	status,0,c
  2257  0028C2  D004               	goto	l3942
  2258  0028C4                     l3938:
  2259                           
  2260                           ; BSR set to: 1
  2261  0028C4  0101               	movlb	1	; () banked
  2262  0028C6  4B9C               	infsnz	main@i_235& (0+255),f,b
  2263  0028C8  2B9D               	incf	(main@i_235+1)& (0+255),f,b
  2264  0028CA  D7F1               	goto	l3934
  2265  0028CC                     l3942:
  2266                           
  2267                           ; BSR set to: 1
  2268                           ;main.c: 171: if (key == 8)
  2269  0028CC  0E08               	movlw	8
  2270  0028CE  0101               	movlb	1	; () banked
  2271  0028D0  19B2               	xorwf	main@key& (0+255),w,b
  2272  0028D2  0101               	movlb	1	; () banked
  2273  0028D4  11B3               	iorwf	(main@key+1)& (0+255),w,b
  2274  0028D6  0101               	movlb	1	; () banked
  2275  0028D8  11B4               	iorwf	(main@key+2)& (0+255),w,b
  2276  0028DA  0101               	movlb	1	; () banked
  2277  0028DC  11B5               	iorwf	(main@key+3)& (0+255),w,b
  2278  0028DE  A4D8               	btfss	status,2,c
  2279  0028E0  D008               	goto	l3946
  2280                           
  2281                           ; BSR set to: 1
  2282                           ;main.c: 172: {
  2283                           ;main.c: 173: c++;
  2284  0028E2  0E01               	movlw	1
  2285  0028E4  0101               	movlb	1	; () banked
  2286  0028E6  27A5               	addwf	main@c& (0+255),f,b
  2287  0028E8  0E00               	movlw	0
  2288  0028EA  23A6               	addwfc	(main@c+1)& (0+255),f,b
  2289  0028EC  23A7               	addwfc	(main@c+2)& (0+255),f,b
  2290  0028EE  23A8               	addwfc	(main@c+3)& (0+255),f,b
  2291                           
  2292                           ;main.c: 174: }
  2293  0028F0  D281               	goto	l4070
  2294  0028F2                     l3946:
  2295                           
  2296                           ; BSR set to: 1
  2297                           ;main.c: 175: else if (c < 300 && c != 0)
  2298  0028F2  0101               	movlb	1	; () banked
  2299  0028F4  51A8               	movf	(main@c+3)& (0+255),w,b
  2300  0028F6  0101               	movlb	1	; () banked
  2301  0028F8  11A7               	iorwf	(main@c+2)& (0+255),w,b
  2302  0028FA  E153               	bnz	l3964
  2303  0028FC  0E2C               	movlw	44
  2304  0028FE  0101               	movlb	1	; () banked
  2305  002900  5DA5               	subwf	main@c& (0+255),w,b
  2306  002902  0E01               	movlw	1
  2307  002904  0101               	movlb	1	; () banked
  2308  002906  59A6               	subwfb	(main@c+1)& (0+255),w,b
  2309  002908  B0D8               	btfsc	status,0,c
  2310  00290A  D04B               	goto	l3964
  2311                           
  2312                           ; BSR set to: 1
  2313  00290C  0101               	movlb	1	; () banked
  2314  00290E  51A5               	movf	main@c& (0+255),w,b
  2315  002910  0101               	movlb	1	; () banked
  2316  002912  11A6               	iorwf	(main@c+1)& (0+255),w,b
  2317  002914  0101               	movlb	1	; () banked
  2318  002916  11A7               	iorwf	(main@c+2)& (0+255),w,b
  2319  002918  0101               	movlb	1	; () banked
  2320  00291A  11A8               	iorwf	(main@c+3)& (0+255),w,b
  2321  00291C  B4D8               	btfsc	status,2,c
  2322  00291E  D041               	goto	l3964
  2323                           
  2324                           ; BSR set to: 1
  2325                           ;main.c: 176: {
  2326                           ;main.c: 177: if (sc >= 1)
  2327  002920  0101               	movlb	1	; () banked
  2328  002922  51B7               	movf	main@sc& (0+255),w,b
  2329  002924  0101               	movlb	1	; () banked
  2330  002926  11B8               	iorwf	(main@sc+1)& (0+255),w,b
  2331  002928  B4D8               	btfsc	status,2,c
  2332  00292A  D004               	goto	l3954
  2333                           
  2334                           ; BSR set to: 1
  2335                           ;main.c: 178: sc--;
  2336  00292C  0101               	movlb	1	; () banked
  2337  00292E  07B7               	decf	main@sc& (0+255),f,b
  2338  002930  A0D8               	btfss	status,0,c
  2339  002932  07B8               	decf	(main@sc+1)& (0+255),f,b
  2340  002934                     l3954:
  2341                           
  2342                           ; BSR set to: 1
  2343                           ;main.c: 179: clcd_print(str[sc], (0x80 + (1)));
  2344  002934  C1B7  F001         	movff	main@sc,___wmul@multiplier
  2345  002938  C1B8  F002         	movff	main@sc+1,___wmul@multiplier+1
  2346  00293C  0E00               	movlw	0
  2347  00293E  6E04               	movwf	___wmul@multiplicand+1,c
  2348  002940  0E11               	movlw	17
  2349  002942  6E03               	movwf	___wmul@multiplicand,c
  2350  002944  ECFA  F007         	call	___wmul	;wreg free
  2351  002948  0E00               	movlw	low main@str
  2352  00294A  2401               	addwf	?___wmul,w,c
  2353  00294C  6E07               	movwf	clcd_print@data,c
  2354  00294E  0E01               	movlw	high main@str
  2355  002950  2002               	addwfc	?___wmul+1,w,c
  2356  002952  6E08               	movwf	clcd_print@data+1,c
  2357  002954  0E81               	movlw	129
  2358  002956  6E09               	movwf	clcd_print@addr,c
  2359  002958  ECA5  F009         	call	_clcd_print	;wreg free
  2360                           
  2361                           ;main.c: 180: clcd_print(str[sc+1], (0xC0 + (1)));
  2362  00295C  0E01               	movlw	1
  2363  00295E  0101               	movlb	1	; () banked
  2364  002960  25B7               	addwf	main@sc& (0+255),w,b
  2365  002962  6E01               	movwf	___wmul@multiplier,c
  2366  002964  0E00               	movlw	0
  2367  002966  0101               	movlb	1	; () banked
  2368  002968  21B8               	addwfc	(main@sc+1)& (0+255),w,b
  2369  00296A  6E02               	movwf	___wmul@multiplier+1,c
  2370  00296C  0E00               	movlw	0
  2371  00296E  6E04               	movwf	___wmul@multiplicand+1,c
  2372  002970  0E11               	movlw	17
  2373  002972  6E03               	movwf	___wmul@multiplicand,c
  2374  002974  ECFA  F007         	call	___wmul	;wreg free
  2375  002978  0E00               	movlw	low main@str
  2376  00297A  2401               	addwf	?___wmul,w,c
  2377  00297C  6E07               	movwf	clcd_print@data,c
  2378  00297E  0E01               	movlw	high main@str
  2379  002980  2002               	addwfc	?___wmul+1,w,c
  2380  002982  6E08               	movwf	clcd_print@data+1,c
  2381  002984  0EC1               	movlw	193
  2382  002986  6E09               	movwf	clcd_print@addr,c
  2383  002988  ECA5  F009         	call	_clcd_print	;wreg free
  2384                           
  2385                           ;main.c: 181: clcd_putch('*', (0x80 + (0)));
  2386  00298C  0E80               	movlw	128
  2387  00298E  6E03               	movwf	clcd_putch@addr,c
  2388  002990  0E2A               	movlw	42
  2389  002992  ECAD  F007         	call	_clcd_putch
  2390                           
  2391                           ;main.c: 182: clcd_putch(' ', (0xC0 + (0)));
  2392  002996  0EC0               	movlw	192
  2393  002998  6E03               	movwf	clcd_putch@addr,c
  2394  00299A  0E20               	movlw	32
  2395  00299C  ECAD  F007         	call	_clcd_putch
  2396  0029A0  D220               	goto	l4068
  2397  0029A2                     l3964:
  2398                           
  2399                           ; BSR set to: 1
  2400                           ;main.c: 185: else if (c > 300)
  2401  0029A2  0101               	movlb	1	; () banked
  2402  0029A4  51A8               	movf	(main@c+3)& (0+255),w,b
  2403  0029A6  0101               	movlb	1	; () banked
  2404  0029A8  11A7               	iorwf	(main@c+2)& (0+255),w,b
  2405  0029AA  E108               	bnz	u3940
  2406  0029AC  0E2D               	movlw	45
  2407  0029AE  0101               	movlb	1	; () banked
  2408  0029B0  5DA5               	subwf	main@c& (0+255),w,b
  2409  0029B2  0E01               	movlw	1
  2410  0029B4  0101               	movlb	1	; () banked
  2411  0029B6  59A6               	subwfb	(main@c+1)& (0+255),w,b
  2412  0029B8  A0D8               	btfss	status,0,c
  2413  0029BA  D213               	goto	l4068
  2414  0029BC                     u3940:
  2415                           
  2416                           ; BSR set to: 1
  2417                           ;main.c: 186: {
  2418                           ;main.c: 187: if (sc == 0)
  2419  0029BC  0101               	movlb	1	; () banked
  2420  0029BE  51B7               	movf	main@sc& (0+255),w,b
  2421  0029C0  0101               	movlb	1	; () banked
  2422  0029C2  11B8               	iorwf	(main@sc+1)& (0+255),w,b
  2423  0029C4  A4D8               	btfss	status,2,c
  2424  0029C6  D039               	goto	l3978
  2425                           
  2426                           ; BSR set to: 1
  2427                           ;main.c: 188: {
  2428                           ;main.c: 189: view();
  2429  0029C8  EC7A  F00C         	call	_view	;wreg free
  2430                           
  2431                           ;main.c: 190: clcd_print(str[sc], (0x80 + (1)));
  2432  0029CC  C1B7  F001         	movff	main@sc,___wmul@multiplier
  2433  0029D0  C1B8  F002         	movff	main@sc+1,___wmul@multiplier+1
  2434  0029D4  0E00               	movlw	0
  2435  0029D6  6E04               	movwf	___wmul@multiplicand+1,c
  2436  0029D8  0E11               	movlw	17
  2437  0029DA  6E03               	movwf	___wmul@multiplicand,c
  2438  0029DC  ECFA  F007         	call	___wmul	;wreg free
  2439  0029E0  0E00               	movlw	low main@str
  2440  0029E2  2401               	addwf	?___wmul,w,c
  2441  0029E4  6E07               	movwf	clcd_print@data,c
  2442  0029E6  0E01               	movlw	high main@str
  2443  0029E8  2002               	addwfc	?___wmul+1,w,c
  2444  0029EA  6E08               	movwf	clcd_print@data+1,c
  2445  0029EC  0E81               	movlw	129
  2446  0029EE  6E09               	movwf	clcd_print@addr,c
  2447  0029F0  ECA5  F009         	call	_clcd_print	;wreg free
  2448                           
  2449                           ;main.c: 191: clcd_putch('*', (0x80 + (0)));
  2450  0029F4  0E80               	movlw	128
  2451  0029F6  6E03               	movwf	clcd_putch@addr,c
  2452  0029F8  0E2A               	movlw	42
  2453  0029FA  ECAD  F007         	call	_clcd_putch
  2454                           
  2455                           ;main.c: 192: clcd_putch(' ', (0xC0 + (0)));
  2456  0029FE  0EC0               	movlw	192
  2457  002A00  6E03               	movwf	clcd_putch@addr,c
  2458  002A02  0E20               	movlw	32
  2459  002A04  ECAD  F007         	call	_clcd_putch
  2460                           
  2461                           ;main.c: 193: clcd_print(str[sc+1], (0xC0 + (1)));
  2462  002A08  0E01               	movlw	1
  2463  002A0A  0101               	movlb	1	; () banked
  2464  002A0C  25B7               	addwf	main@sc& (0+255),w,b
  2465  002A0E  6E01               	movwf	___wmul@multiplier,c
  2466  002A10  0E00               	movlw	0
  2467  002A12  0101               	movlb	1	; () banked
  2468  002A14  21B8               	addwfc	(main@sc+1)& (0+255),w,b
  2469  002A16  6E02               	movwf	___wmul@multiplier+1,c
  2470  002A18  0E00               	movlw	0
  2471  002A1A  6E04               	movwf	___wmul@multiplicand+1,c
  2472  002A1C  0E11               	movlw	17
  2473  002A1E  6E03               	movwf	___wmul@multiplicand,c
  2474  002A20  ECFA  F007         	call	___wmul	;wreg free
  2475  002A24  0E00               	movlw	low main@str
  2476  002A26  2401               	addwf	?___wmul,w,c
  2477  002A28  6E07               	movwf	clcd_print@data,c
  2478  002A2A  0E01               	movlw	high main@str
  2479  002A2C  2002               	addwfc	?___wmul+1,w,c
  2480  002A2E  6E08               	movwf	clcd_print@data+1,c
  2481  002A30  0EC1               	movlw	193
  2482  002A32  6E09               	movwf	clcd_print@addr,c
  2483  002A34  ECA5  F009         	call	_clcd_print	;wreg free
  2484                           
  2485                           ;main.c: 194: }
  2486  002A38  D1D4               	goto	l4068
  2487  002A3A                     l3978:
  2488                           
  2489                           ;main.c: 195: else if (sc == 1)
  2490  002A3A  0101               	movlb	1	; () banked
  2491  002A3C  05B7               	decf	main@sc& (0+255),w,b
  2492  002A3E  0101               	movlb	1	; () banked
  2493  002A40  11B8               	iorwf	(main@sc+1)& (0+255),w,b
  2494  002A42  A4D8               	btfss	status,2,c
  2495  002A44  D09A               	goto	l4000
  2496                           
  2497                           ; BSR set to: 1
  2498                           ;main.c: 196: {
  2499                           ;main.c: 197: if(cl)
  2500  002A46  0101               	movlb	1	; () banked
  2501  002A48  517D               	movf	main@cl& (0+255),w,b
  2502  002A4A  0101               	movlb	1	; () banked
  2503  002A4C  117E               	iorwf	(main@cl+1)& (0+255),w,b
  2504  002A4E  B4D8               	btfsc	status,2,c
  2505  002A50  D003               	goto	l3984
  2506                           
  2507                           ; BSR set to: 1
  2508                           ;main.c: 198: {
  2509                           ;main.c: 199: download();
  2510  002A52  EC76  F009         	call	_download	;wreg free
  2511                           
  2512                           ;main.c: 200: }
  2513  002A56  D018               	goto	l278
  2514  002A58                     l3984:
  2515                           
  2516                           ;main.c: 201: else
  2517                           ;main.c: 202: {
  2518                           ;main.c: 203: puts(clear);
  2519  002A58  0E72               	movlw	low main@clear
  2520  002A5A  6E02               	movwf	puts@s,c
  2521  002A5C  0E01               	movlw	high main@clear
  2522  002A5E  6E03               	movwf	puts@s+1,c
  2523  002A60  EC4D  F009         	call	_puts	;wreg free
  2524                           
  2525                           ;main.c: 204: puts("  CL ");
  2526  002A64  0EE7               	movlw	low STR_16
  2527  002A66  6E02               	movwf	puts@s,c
  2528  002A68  0E2F               	movlw	high STR_16
  2529  002A6A  6E03               	movwf	puts@s+1,c
  2530  002A6C  EC4D  F009         	call	_puts	;wreg free
  2531                           
  2532                           ;main.c: 205: puts(store+13);
  2533  002A70  0E8C               	movlw	low (main@store+13)
  2534  002A72  6E02               	movwf	puts@s,c
  2535  002A74  0E01               	movlw	high (main@store+13)
  2536  002A76  6E03               	movwf	puts@s+1,c
  2537  002A78  EC4D  F009         	call	_puts	;wreg free
  2538                           
  2539                           ;main.c: 206: puts("\n\r");
  2540  002A7C  0EF8               	movlw	low STR_17
  2541  002A7E  6E02               	movwf	puts@s,c
  2542  002A80  0E2F               	movlw	high STR_17
  2543  002A82  6E03               	movwf	puts@s+1,c
  2544  002A84  EC4D  F009         	call	_puts	;wreg free
  2545  002A88                     l278:
  2546                           
  2547                           ;main.c: 207: }
  2548                           ;main.c: 209: puts(time);
  2549  002A88  0E57               	movlw	low _time
  2550  002A8A  6E02               	movwf	puts@s,c
  2551  002A8C  0E00               	movlw	high _time
  2552  002A8E  6E03               	movwf	puts@s+1,c
  2553  002A90  EC4D  F009         	call	_puts	;wreg free
  2554                           
  2555                           ;main.c: 210: puts("  DL ");
  2556  002A94  0EED               	movlw	low STR_18
  2557  002A96  6E02               	movwf	puts@s,c
  2558  002A98  0E2F               	movlw	high STR_18
  2559  002A9A  6E03               	movwf	puts@s+1,c
  2560  002A9C  EC4D  F009         	call	_puts	;wreg free
  2561                           
  2562                           ;main.c: 211: puts(store+13);
  2563  002AA0  0E8C               	movlw	low (main@store+13)
  2564  002AA2  6E02               	movwf	puts@s,c
  2565  002AA4  0E01               	movlw	high (main@store+13)
  2566  002AA6  6E03               	movwf	puts@s+1,c
  2567  002AA8  EC4D  F009         	call	_puts	;wreg free
  2568                           
  2569                           ;main.c: 212: puts("\n\r");
  2570  002AAC  0EF8               	movlw	low STR_17
  2571  002AAE  6E02               	movwf	puts@s,c
  2572  002AB0  0E2F               	movlw	high STR_17
  2573  002AB2  6E03               	movwf	puts@s+1,c
  2574  002AB4  EC4D  F009         	call	_puts	;wreg free
  2575                           
  2576                           ;main.c: 213: clcd_print("DOWNLOAD DONE   ",(0x80 + (0)));
  2577  002AB8  0E68               	movlw	low STR_20
  2578  002ABA  6E07               	movwf	clcd_print@data,c
  2579  002ABC  0E2F               	movlw	high STR_20
  2580  002ABE  6E08               	movwf	clcd_print@data+1,c
  2581  002AC0  0E80               	movlw	128
  2582  002AC2  6E09               	movwf	clcd_print@addr,c
  2583  002AC4  ECA5  F009         	call	_clcd_print	;wreg free
  2584                           
  2585                           ;main.c: 214: clcd_print("SUCCESSFULL     ",(0xC0 + (0)));
  2586  002AC8  0E57               	movlw	low STR_21
  2587  002ACA  6E07               	movwf	clcd_print@data,c
  2588  002ACC  0E2F               	movlw	high STR_21
  2589  002ACE  6E08               	movwf	clcd_print@data+1,c
  2590  002AD0  0EC0               	movlw	192
  2591  002AD2  6E09               	movwf	clcd_print@addr,c
  2592  002AD4  ECA5  F009         	call	_clcd_print	;wreg free
  2593                           
  2594                           ;main.c: 215: for( unsigned long int i =100000;i>0;i-- );
  2595  002AD8  0EA0               	movlw	160
  2596  002ADA  0101               	movlb	1	; () banked
  2597  002ADC  6F92               	movwf	main@i_243& (0+255),b
  2598  002ADE  0E86               	movlw	134
  2599  002AE0  6F93               	movwf	(main@i_243+1)& (0+255),b
  2600  002AE2  0E01               	movlw	1
  2601  002AE4  6F94               	movwf	(main@i_243+2)& (0+255),b
  2602  002AE6  0E00               	movlw	0
  2603  002AE8  6F95               	movwf	(main@i_243+3)& (0+255),b
  2604  002AEA                     l3988:
  2605                           
  2606                           ; BSR set to: 1
  2607  002AEA  0101               	movlb	1	; () banked
  2608  002AEC  5192               	movf	main@i_243& (0+255),w,b
  2609  002AEE  0101               	movlb	1	; () banked
  2610  002AF0  1193               	iorwf	(main@i_243+1)& (0+255),w,b
  2611  002AF2  0101               	movlb	1	; () banked
  2612  002AF4  1194               	iorwf	(main@i_243+2)& (0+255),w,b
  2613  002AF6  0101               	movlb	1	; () banked
  2614  002AF8  1195               	iorwf	(main@i_243+3)& (0+255),w,b
  2615  002AFA  B4D8               	btfsc	status,2,c
  2616  002AFC  D007               	goto	l3994
  2617                           
  2618                           ; BSR set to: 1
  2619                           
  2620                           ; BSR set to: 1
  2621                           
  2622                           ; BSR set to: 1
  2623  002AFE  0101               	movlb	1	; () banked
  2624  002B00  0792               	decf	main@i_243& (0+255),f,b
  2625  002B02  0E00               	movlw	0
  2626  002B04  5B93               	subwfb	(main@i_243+1)& (0+255),f,b
  2627  002B06  5B94               	subwfb	(main@i_243+2)& (0+255),f,b
  2628  002B08  5B95               	subwfb	(main@i_243+3)& (0+255),f,b
  2629  002B0A  D7EF               	goto	l3988
  2630  002B0C                     l3994:
  2631                           
  2632                           ; BSR set to: 1
  2633                           ;main.c: 216: clcd_print(str[sc], (0x80 + (1)));
  2634  002B0C  C1B7  F001         	movff	main@sc,___wmul@multiplier
  2635  002B10  C1B8  F002         	movff	main@sc+1,___wmul@multiplier+1
  2636  002B14  0E00               	movlw	0
  2637  002B16  6E04               	movwf	___wmul@multiplicand+1,c
  2638  002B18  0E11               	movlw	17
  2639  002B1A  6E03               	movwf	___wmul@multiplicand,c
  2640  002B1C  ECFA  F007         	call	___wmul	;wreg free
  2641  002B20  0E00               	movlw	low main@str
  2642  002B22  2401               	addwf	?___wmul,w,c
  2643  002B24  6E07               	movwf	clcd_print@data,c
  2644  002B26  0E01               	movlw	high main@str
  2645  002B28  2002               	addwfc	?___wmul+1,w,c
  2646  002B2A  6E08               	movwf	clcd_print@data+1,c
  2647  002B2C  0E81               	movlw	129
  2648  002B2E  6E09               	movwf	clcd_print@addr,c
  2649  002B30  ECA5  F009         	call	_clcd_print	;wreg free
  2650                           
  2651                           ;main.c: 217: clcd_putch('*', (0x80 + (0)));
  2652  002B34  0E80               	movlw	128
  2653  002B36  6E03               	movwf	clcd_putch@addr,c
  2654  002B38  0E2A               	movlw	42
  2655  002B3A  ECAD  F007         	call	_clcd_putch
  2656                           
  2657                           ;main.c: 218: clcd_putch(' ', (0xC0 + (0)));
  2658  002B3E  0EC0               	movlw	192
  2659  002B40  6E03               	movwf	clcd_putch@addr,c
  2660  002B42  0E20               	movlw	32
  2661  002B44  ECAD  F007         	call	_clcd_putch
  2662                           
  2663                           ;main.c: 219: clcd_print(str[sc+1], (0xC0 + (1)));
  2664  002B48  0E01               	movlw	1
  2665  002B4A  0101               	movlb	1	; () banked
  2666  002B4C  25B7               	addwf	main@sc& (0+255),w,b
  2667  002B4E  6E01               	movwf	___wmul@multiplier,c
  2668  002B50  0E00               	movlw	0
  2669  002B52  0101               	movlb	1	; () banked
  2670  002B54  21B8               	addwfc	(main@sc+1)& (0+255),w,b
  2671  002B56  6E02               	movwf	___wmul@multiplier+1,c
  2672  002B58  0E00               	movlw	0
  2673  002B5A  6E04               	movwf	___wmul@multiplicand+1,c
  2674  002B5C  0E11               	movlw	17
  2675  002B5E  6E03               	movwf	___wmul@multiplicand,c
  2676  002B60  ECFA  F007         	call	___wmul	;wreg free
  2677  002B64  0E00               	movlw	low main@str
  2678  002B66  2401               	addwf	?___wmul,w,c
  2679  002B68  6E07               	movwf	clcd_print@data,c
  2680  002B6A  0E01               	movlw	high main@str
  2681  002B6C  2002               	addwfc	?___wmul+1,w,c
  2682  002B6E  6E08               	movwf	clcd_print@data+1,c
  2683  002B70  0EC1               	movlw	193
  2684  002B72  6E09               	movwf	clcd_print@addr,c
  2685  002B74  ECA5  F009         	call	_clcd_print	;wreg free
  2686                           
  2687                           ;main.c: 220: }
  2688  002B78  D134               	goto	l4068
  2689  002B7A                     l4000:
  2690                           
  2691                           ;main.c: 221: else if (sc == 2)
  2692  002B7A  0E02               	movlw	2
  2693  002B7C  0101               	movlb	1	; () banked
  2694  002B7E  19B7               	xorwf	main@sc& (0+255),w,b
  2695  002B80  0101               	movlb	1	; () banked
  2696  002B82  11B8               	iorwf	(main@sc+1)& (0+255),w,b
  2697  002B84  A4D8               	btfss	status,2,c
  2698  002B86  D092               	goto	l4030
  2699                           
  2700                           ; BSR set to: 1
  2701                           ;main.c: 222: {
  2702                           ;main.c: 223: cl = 0;
  2703  002B88  0E00               	movlw	0
  2704  002B8A  0101               	movlb	1	; () banked
  2705  002B8C  6F7E               	movwf	(main@cl+1)& (0+255),b
  2706  002B8E  0E00               	movlw	0
  2707  002B90  6F7D               	movwf	main@cl& (0+255),b
  2708                           
  2709                           ;main.c: 224: clear[8]='\0';
  2710  002B92  0E00               	movlw	0
  2711  002B94  0101               	movlb	1	; () banked
  2712  002B96  6F7A               	movwf	(main@clear+8)& (0+255),b
  2713                           
  2714                           ;main.c: 225: add = 0x00;
  2715  002B98  0E00               	movlw	0
  2716  002B9A  0101               	movlb	1	; () banked
  2717  002B9C  6FA0               	movwf	main@add& (0+255),b
  2718                           
  2719                           ;main.c: 226: for(int i = 0;i<9;i++)
  2720  002B9E  0E00               	movlw	0
  2721  002BA0  0101               	movlb	1	; () banked
  2722  002BA2  6FB0               	movwf	(main@i_244+1)& (0+255),b
  2723  002BA4  0E00               	movlw	0
  2724  002BA6  6FAF               	movwf	main@i_244& (0+255),b
  2725  002BA8                     l4004:
  2726                           
  2727                           ; BSR set to: 1
  2728  002BA8  0101               	movlb	1	; () banked
  2729  002BAA  BFB0               	btfsc	(main@i_244+1)& (0+255),7,b
  2730  002BAC  D008               	goto	l4008
  2731  002BAE  0101               	movlb	1	; () banked
  2732  002BB0  51B0               	movf	(main@i_244+1)& (0+255),w,b
  2733  002BB2  E11B               	bnz	l4014
  2734  002BB4  0E09               	movlw	9
  2735  002BB6  0101               	movlb	1	; () banked
  2736  002BB8  5DAF               	subwf	main@i_244& (0+255),w,b
  2737  002BBA  B0D8               	btfsc	status,0,c
  2738  002BBC  D016               	goto	l4014
  2739  002BBE                     l4008:
  2740                           
  2741                           ; BSR set to: 1
  2742                           ;main.c: 227: clear[i]=time[i];
  2743  002BBE  0E57               	movlw	low _time
  2744  002BC0  0101               	movlb	1	; () banked
  2745  002BC2  25AF               	addwf	main@i_244& (0+255),w,b
  2746  002BC4  6ED9               	movwf	fsr2l,c
  2747  002BC6  0E00               	movlw	high _time
  2748  002BC8  0101               	movlb	1	; () banked
  2749  002BCA  21B0               	addwfc	(main@i_244+1)& (0+255),w,b
  2750  002BCC  6EDA               	movwf	fsr2h,c
  2751  002BCE  0E72               	movlw	low main@clear
  2752  002BD0  0101               	movlb	1	; () banked
  2753  002BD2  25AF               	addwf	main@i_244& (0+255),w,b
  2754  002BD4  6EE1               	movwf	fsr1l,c
  2755  002BD6  0E01               	movlw	high main@clear
  2756  002BD8  0101               	movlb	1	; () banked
  2757  002BDA  21B0               	addwfc	(main@i_244+1)& (0+255),w,b
  2758  002BDC  6EE2               	movwf	fsr1h,c
  2759  002BDE  CFDF FFE7          	movff	indf2,indf1
  2760                           
  2761                           ; BSR set to: 1
  2762  002BE2  0101               	movlb	1	; () banked
  2763  002BE4  4BAF               	infsnz	main@i_244& (0+255),f,b
  2764  002BE6  2BB0               	incf	(main@i_244+1)& (0+255),f,b
  2765  002BE8  D7DF               	goto	l4004
  2766  002BEA                     l4014:
  2767                           
  2768                           ; BSR set to: 1
  2769                           ;main.c: 229: clcd_print("CLEAR LOG SUCC  ",(0x80 + (0)));
  2770  002BEA  0E79               	movlw	low STR_22
  2771  002BEC  6E07               	movwf	clcd_print@data,c
  2772  002BEE  0E2F               	movlw	high STR_22
  2773  002BF0  6E08               	movwf	clcd_print@data+1,c
  2774  002BF2  0E80               	movlw	128
  2775  002BF4  6E09               	movwf	clcd_print@addr,c
  2776  002BF6  ECA5  F009         	call	_clcd_print	;wreg free
  2777                           
  2778                           ;main.c: 230: clcd_print("                ",(0xC0 + (0)));
  2779  002BFA  0EFF               	movlw	low (STR_32+2)
  2780  002BFC  6E07               	movwf	clcd_print@data,c
  2781  002BFE  0E2E               	movlw	high (STR_32+2)
  2782  002C00  6E08               	movwf	clcd_print@data+1,c
  2783  002C02  0EC0               	movlw	192
  2784  002C04  6E09               	movwf	clcd_print@addr,c
  2785  002C06  ECA5  F009         	call	_clcd_print	;wreg free
  2786                           
  2787                           ;main.c: 231: for( unsigned long int i =100000;i>0;i-- );
  2788  002C0A  0EA0               	movlw	160
  2789  002C0C  0101               	movlb	1	; () banked
  2790  002C0E  6F96               	movwf	main@i_247& (0+255),b
  2791  002C10  0E86               	movlw	134
  2792  002C12  6F97               	movwf	(main@i_247+1)& (0+255),b
  2793  002C14  0E01               	movlw	1
  2794  002C16  6F98               	movwf	(main@i_247+2)& (0+255),b
  2795  002C18  0E00               	movlw	0
  2796  002C1A  6F99               	movwf	(main@i_247+3)& (0+255),b
  2797  002C1C                     l4018:
  2798                           
  2799                           ; BSR set to: 1
  2800  002C1C  0101               	movlb	1	; () banked
  2801  002C1E  5196               	movf	main@i_247& (0+255),w,b
  2802  002C20  0101               	movlb	1	; () banked
  2803  002C22  1197               	iorwf	(main@i_247+1)& (0+255),w,b
  2804  002C24  0101               	movlb	1	; () banked
  2805  002C26  1198               	iorwf	(main@i_247+2)& (0+255),w,b
  2806  002C28  0101               	movlb	1	; () banked
  2807  002C2A  1199               	iorwf	(main@i_247+3)& (0+255),w,b
  2808  002C2C  B4D8               	btfsc	status,2,c
  2809  002C2E  D007               	goto	l4024
  2810                           
  2811                           ; BSR set to: 1
  2812                           
  2813                           ; BSR set to: 1
  2814                           
  2815                           ; BSR set to: 1
  2816  002C30  0101               	movlb	1	; () banked
  2817  002C32  0796               	decf	main@i_247& (0+255),f,b
  2818  002C34  0E00               	movlw	0
  2819  002C36  5B97               	subwfb	(main@i_247+1)& (0+255),f,b
  2820  002C38  5B98               	subwfb	(main@i_247+2)& (0+255),f,b
  2821  002C3A  5B99               	subwfb	(main@i_247+3)& (0+255),f,b
  2822  002C3C  D7EF               	goto	l4018
  2823  002C3E                     l4024:
  2824                           
  2825                           ; BSR set to: 1
  2826                           ;main.c: 232: clcd_print(str[sc], (0x80 + (1)));
  2827  002C3E  C1B7  F001         	movff	main@sc,___wmul@multiplier
  2828  002C42  C1B8  F002         	movff	main@sc+1,___wmul@multiplier+1
  2829  002C46  0E00               	movlw	0
  2830  002C48  6E04               	movwf	___wmul@multiplicand+1,c
  2831  002C4A  0E11               	movlw	17
  2832  002C4C  6E03               	movwf	___wmul@multiplicand,c
  2833  002C4E  ECFA  F007         	call	___wmul	;wreg free
  2834  002C52  0E00               	movlw	low main@str
  2835  002C54  2401               	addwf	?___wmul,w,c
  2836  002C56  6E07               	movwf	clcd_print@data,c
  2837  002C58  0E01               	movlw	high main@str
  2838  002C5A  2002               	addwfc	?___wmul+1,w,c
  2839  002C5C  6E08               	movwf	clcd_print@data+1,c
  2840  002C5E  0E81               	movlw	129
  2841  002C60  6E09               	movwf	clcd_print@addr,c
  2842  002C62  ECA5  F009         	call	_clcd_print	;wreg free
  2843                           
  2844                           ;main.c: 233: clcd_putch('*', (0x80 + (0)));
  2845  002C66  0E80               	movlw	128
  2846  002C68  6E03               	movwf	clcd_putch@addr,c
  2847  002C6A  0E2A               	movlw	42
  2848  002C6C  ECAD  F007         	call	_clcd_putch
  2849                           
  2850                           ;main.c: 234: clcd_putch(' ', (0xC0 + (0)));
  2851  002C70  0EC0               	movlw	192
  2852  002C72  6E03               	movwf	clcd_putch@addr,c
  2853  002C74  0E20               	movlw	32
  2854  002C76  ECAD  F007         	call	_clcd_putch
  2855                           
  2856                           ;main.c: 235: clcd_print(str[sc+1], (0xC0 + (1)));
  2857  002C7A  0E01               	movlw	1
  2858  002C7C  0101               	movlb	1	; () banked
  2859  002C7E  25B7               	addwf	main@sc& (0+255),w,b
  2860  002C80  6E01               	movwf	___wmul@multiplier,c
  2861  002C82  0E00               	movlw	0
  2862  002C84  0101               	movlb	1	; () banked
  2863  002C86  21B8               	addwfc	(main@sc+1)& (0+255),w,b
  2864  002C88  6E02               	movwf	___wmul@multiplier+1,c
  2865  002C8A  0E00               	movlw	0
  2866  002C8C  6E04               	movwf	___wmul@multiplicand+1,c
  2867  002C8E  0E11               	movlw	17
  2868  002C90  6E03               	movwf	___wmul@multiplicand,c
  2869  002C92  ECFA  F007         	call	___wmul	;wreg free
  2870  002C96  0E00               	movlw	low main@str
  2871  002C98  2401               	addwf	?___wmul,w,c
  2872  002C9A  6E07               	movwf	clcd_print@data,c
  2873  002C9C  0E01               	movlw	high main@str
  2874  002C9E  2002               	addwfc	?___wmul+1,w,c
  2875  002CA0  6E08               	movwf	clcd_print@data+1,c
  2876  002CA2  0EC1               	movlw	193
  2877  002CA4  6E09               	movwf	clcd_print@addr,c
  2878  002CA6  ECA5  F009         	call	_clcd_print	;wreg free
  2879                           
  2880                           ;main.c: 236: }
  2881  002CAA  D09B               	goto	l4068
  2882  002CAC                     l4030:
  2883                           
  2884                           ;main.c: 237: else if (sc == 3)
  2885  002CAC  0E03               	movlw	3
  2886  002CAE  0101               	movlb	1	; () banked
  2887  002CB0  19B7               	xorwf	main@sc& (0+255),w,b
  2888  002CB2  0101               	movlb	1	; () banked
  2889  002CB4  11B8               	iorwf	(main@sc+1)& (0+255),w,b
  2890  002CB6  A4D8               	btfss	status,2,c
  2891  002CB8  D03B               	goto	l4042
  2892                           
  2893                           ; BSR set to: 1
  2894                           ;main.c: 238: {
  2895                           ;main.c: 239: changepass();
  2896  002CBA  EC3C  F010         	call	_changepass	;wreg free
  2897                           
  2898                           ;main.c: 240: pass();
  2899  002CBE  ECC6  F00E         	call	_pass	;wreg free
  2900                           
  2901                           ;main.c: 241: clcd_print(str[sc], (0x80 + (1)));
  2902  002CC2  C1B7  F001         	movff	main@sc,___wmul@multiplier
  2903  002CC6  C1B8  F002         	movff	main@sc+1,___wmul@multiplier+1
  2904  002CCA  0E00               	movlw	0
  2905  002CCC  6E04               	movwf	___wmul@multiplicand+1,c
  2906  002CCE  0E11               	movlw	17
  2907  002CD0  6E03               	movwf	___wmul@multiplicand,c
  2908  002CD2  ECFA  F007         	call	___wmul	;wreg free
  2909  002CD6  0E00               	movlw	low main@str
  2910  002CD8  2401               	addwf	?___wmul,w,c
  2911  002CDA  6E07               	movwf	clcd_print@data,c
  2912  002CDC  0E01               	movlw	high main@str
  2913  002CDE  2002               	addwfc	?___wmul+1,w,c
  2914  002CE0  6E08               	movwf	clcd_print@data+1,c
  2915  002CE2  0E81               	movlw	129
  2916  002CE4  6E09               	movwf	clcd_print@addr,c
  2917  002CE6  ECA5  F009         	call	_clcd_print	;wreg free
  2918                           
  2919                           ;main.c: 242: clcd_print(str[sc+1], (0xC0 + (1)));
  2920  002CEA  0E01               	movlw	1
  2921  002CEC  0101               	movlb	1	; () banked
  2922  002CEE  25B7               	addwf	main@sc& (0+255),w,b
  2923  002CF0  6E01               	movwf	___wmul@multiplier,c
  2924  002CF2  0E00               	movlw	0
  2925  002CF4  0101               	movlb	1	; () banked
  2926  002CF6  21B8               	addwfc	(main@sc+1)& (0+255),w,b
  2927  002CF8  6E02               	movwf	___wmul@multiplier+1,c
  2928  002CFA  0E00               	movlw	0
  2929  002CFC  6E04               	movwf	___wmul@multiplicand+1,c
  2930  002CFE  0E11               	movlw	17
  2931  002D00  6E03               	movwf	___wmul@multiplicand,c
  2932  002D02  ECFA  F007         	call	___wmul	;wreg free
  2933  002D06  0E00               	movlw	low main@str
  2934  002D08  2401               	addwf	?___wmul,w,c
  2935  002D0A  6E07               	movwf	clcd_print@data,c
  2936  002D0C  0E01               	movlw	high main@str
  2937  002D0E  2002               	addwfc	?___wmul+1,w,c
  2938  002D10  6E08               	movwf	clcd_print@data+1,c
  2939  002D12  0EC1               	movlw	193
  2940  002D14  6E09               	movwf	clcd_print@addr,c
  2941  002D16  ECA5  F009         	call	_clcd_print	;wreg free
  2942                           
  2943                           ;main.c: 243: clcd_putch('*', (0x80 + (0)));
  2944  002D1A  0E80               	movlw	128
  2945  002D1C  6E03               	movwf	clcd_putch@addr,c
  2946  002D1E  0E2A               	movlw	42
  2947  002D20  ECAD  F007         	call	_clcd_putch
  2948                           
  2949                           ;main.c: 244: clcd_putch(' ', (0xC0 + (0)));
  2950  002D24  0EC0               	movlw	192
  2951  002D26  6E03               	movwf	clcd_putch@addr,c
  2952  002D28  0E20               	movlw	32
  2953  002D2A  ECAD  F007         	call	_clcd_putch
  2954                           
  2955                           ;main.c: 245: }
  2956  002D2E  D059               	goto	l4068
  2957  002D30                     l4042:
  2958                           
  2959                           ;main.c: 246: else if(sc == 4)
  2960  002D30  0E04               	movlw	4
  2961  002D32  0101               	movlb	1	; () banked
  2962  002D34  19B7               	xorwf	main@sc& (0+255),w,b
  2963  002D36  0101               	movlb	1	; () banked
  2964  002D38  11B8               	iorwf	(main@sc+1)& (0+255),w,b
  2965  002D3A  A4D8               	btfss	status,2,c
  2966  002D3C  D052               	goto	l4068
  2967                           
  2968                           ; BSR set to: 1
  2969                           ;main.c: 247: {
  2970                           ;main.c: 248: settime();
  2971  002D3E  EC5F  F00D         	call	_settime	;wreg free
  2972                           
  2973                           ;main.c: 249: unsigned char value = '0';
  2974  002D42  0E30               	movlw	48
  2975  002D44  0101               	movlb	1	; () banked
  2976  002D46  6FB1               	movwf	main@value& (0+255),b
  2977                           
  2978                           ; BSR set to: 1
  2979                           ;main.c: 251: value = ( ( ( (set[0]-'0') & 15 ) << 4) | ( (set[1]-'0') & 15 ) );
  2980  002D48  C1BE  F039         	movff	_set+1,??_main
  2981  002D4C  0ED0               	movlw	208
  2982  002D4E  2639               	addwf	??_main,f,c
  2983  002D50  0E0F               	movlw	15
  2984  002D52  1639               	andwf	??_main,f,c
  2985  002D54  C1BD  F03A         	movff	_set,??_main+1
  2986  002D58  0ED0               	movlw	208
  2987  002D5A  263A               	addwf	??_main+1,f,c
  2988  002D5C  0E0F               	movlw	15
  2989  002D5E  163A               	andwf	??_main+1,f,c
  2990  002D60  383A               	swapf	??_main+1,w,c
  2991  002D62  0BF0               	andlw	240
  2992  002D64  1039               	iorwf	??_main,w,c
  2993  002D66  0101               	movlb	1	; () banked
  2994  002D68  6FB1               	movwf	main@value& (0+255),b
  2995                           
  2996                           ; BSR set to: 1
  2997                           ;main.c: 252: write_ds1307(0x02,value);
  2998  002D6A  C1B1  F002         	movff	main@value,write_ds1307@data
  2999  002D6E  0E02               	movlw	2
  3000  002D70  ECB9  F007         	call	_write_ds1307
  3001                           
  3002                           ;main.c: 253: value = '0';
  3003  002D74  0E30               	movlw	48
  3004  002D76  0101               	movlb	1	; () banked
  3005  002D78  6FB1               	movwf	main@value& (0+255),b
  3006                           
  3007                           ; BSR set to: 1
  3008                           ;main.c: 254: value = ( ( ( (set[3]-'0') & 15 ) << 4) | ( (set[4]-'0') & 15 ) );
  3009  002D7A  C1C1  F039         	movff	_set+4,??_main
  3010  002D7E  0ED0               	movlw	208
  3011  002D80  2639               	addwf	??_main,f,c
  3012  002D82  0E0F               	movlw	15
  3013  002D84  1639               	andwf	??_main,f,c
  3014  002D86  C1C0  F03A         	movff	_set+3,??_main+1
  3015  002D8A  0ED0               	movlw	208
  3016  002D8C  263A               	addwf	??_main+1,f,c
  3017  002D8E  0E0F               	movlw	15
  3018  002D90  163A               	andwf	??_main+1,f,c
  3019  002D92  383A               	swapf	??_main+1,w,c
  3020  002D94  0BF0               	andlw	240
  3021  002D96  1039               	iorwf	??_main,w,c
  3022  002D98  0101               	movlb	1	; () banked
  3023  002D9A  6FB1               	movwf	main@value& (0+255),b
  3024                           
  3025                           ; BSR set to: 1
  3026                           ;main.c: 255: write_ds1307(0x01,value);
  3027  002D9C  C1B1  F002         	movff	main@value,write_ds1307@data
  3028  002DA0  0E01               	movlw	1
  3029  002DA2  ECB9  F007         	call	_write_ds1307
  3030                           
  3031                           ;main.c: 256: value = '0';
  3032  002DA6  0E30               	movlw	48
  3033  002DA8  0101               	movlb	1	; () banked
  3034  002DAA  6FB1               	movwf	main@value& (0+255),b
  3035                           
  3036                           ; BSR set to: 1
  3037                           ;main.c: 257: value = ( ( ( (set[6]-'0') & 15 ) << 4) | ( (set[7]-'0') & 15 ) );
  3038  002DAC  C1C4  F039         	movff	_set+7,??_main
  3039  002DB0  0ED0               	movlw	208
  3040  002DB2  2639               	addwf	??_main,f,c
  3041  002DB4  0E0F               	movlw	15
  3042  002DB6  1639               	andwf	??_main,f,c
  3043  002DB8  C1C3  F03A         	movff	_set+6,??_main+1
  3044  002DBC  0ED0               	movlw	208
  3045  002DBE  263A               	addwf	??_main+1,f,c
  3046  002DC0  0E0F               	movlw	15
  3047  002DC2  163A               	andwf	??_main+1,f,c
  3048  002DC4  383A               	swapf	??_main+1,w,c
  3049  002DC6  0BF0               	andlw	240
  3050  002DC8  1039               	iorwf	??_main,w,c
  3051  002DCA  0101               	movlb	1	; () banked
  3052  002DCC  6FB1               	movwf	main@value& (0+255),b
  3053                           
  3054                           ; BSR set to: 1
  3055                           ;main.c: 258: write_ds1307(0x00,value);
  3056  002DCE  C1B1  F002         	movff	main@value,write_ds1307@data
  3057  002DD2  0E00               	movlw	0
  3058  002DD4  ECB9  F007         	call	_write_ds1307
  3059                           
  3060                           ;main.c: 259: option=1;
  3061  002DD8  0E00               	movlw	0
  3062  002DDA  0101               	movlb	1	; () banked
  3063  002DDC  6FA4               	movwf	(main@option+1)& (0+255),b
  3064  002DDE  0E01               	movlw	1
  3065  002DE0  6FA3               	movwf	main@option& (0+255),b
  3066  002DE2                     l4068:
  3067                           
  3068                           ; BSR set to: 1
  3069                           ;main.c: 263: else
  3070                           ;main.c: 264: c = 0;
  3071  002DE2  0E00               	movlw	0
  3072  002DE4  0101               	movlb	1	; () banked
  3073  002DE6  6FA5               	movwf	main@c& (0+255),b
  3074  002DE8  0E00               	movlw	0
  3075  002DEA  6FA6               	movwf	(main@c+1)& (0+255),b
  3076  002DEC  0E00               	movlw	0
  3077  002DEE  6FA7               	movwf	(main@c+2)& (0+255),b
  3078  002DF0  0E00               	movlw	0
  3079  002DF2  6FA8               	movwf	(main@c+3)& (0+255),b
  3080  002DF4                     l4070:
  3081                           
  3082                           ; BSR set to: 1
  3083                           ;main.c: 266: if ( key == 9)
  3084  002DF4  0E09               	movlw	9
  3085  002DF6  0101               	movlb	1	; () banked
  3086  002DF8  19B2               	xorwf	main@key& (0+255),w,b
  3087  002DFA  0101               	movlb	1	; () banked
  3088  002DFC  11B3               	iorwf	(main@key+1)& (0+255),w,b
  3089  002DFE  0101               	movlb	1	; () banked
  3090  002E00  11B4               	iorwf	(main@key+2)& (0+255),w,b
  3091  002E02  0101               	movlb	1	; () banked
  3092  002E04  11B5               	iorwf	(main@key+3)& (0+255),w,b
  3093  002E06  A4D8               	btfss	status,2,c
  3094  002E08  D015               	goto	l4076
  3095                           
  3096                           ; BSR set to: 1
  3097                           ;main.c: 267: {
  3098                           ;main.c: 268: c1++;
  3099  002E0A  0E01               	movlw	1
  3100  002E0C  0101               	movlb	1	; () banked
  3101  002E0E  27A9               	addwf	main@c1& (0+255),f,b
  3102  002E10  0E00               	movlw	0
  3103  002E12  23AA               	addwfc	(main@c1+1)& (0+255),f,b
  3104  002E14  23AB               	addwfc	(main@c1+2)& (0+255),f,b
  3105  002E16  23AC               	addwfc	(main@c1+3)& (0+255),f,b
  3106                           
  3107                           ;main.c: 269: if ( c1 == 200 )
  3108  002E18  0EC8               	movlw	200
  3109  002E1A  0101               	movlb	1	; () banked
  3110  002E1C  19A9               	xorwf	main@c1& (0+255),w,b
  3111  002E1E  0101               	movlb	1	; () banked
  3112  002E20  11AA               	iorwf	(main@c1+1)& (0+255),w,b
  3113  002E22  0101               	movlb	1	; () banked
  3114  002E24  11AB               	iorwf	(main@c1+2)& (0+255),w,b
  3115  002E26  0101               	movlb	1	; () banked
  3116  002E28  11AC               	iorwf	(main@c1+3)& (0+255),w,b
  3117  002E2A  A4D8               	btfss	status,2,c
  3118  002E2C  EF67  F012         	goto	l3802
  3119                           
  3120                           ; BSR set to: 1
  3121                           ;main.c: 270: c1 = 150;
  3122  002E30  0E96               	movlw	150
  3123  002E32  D058               	goto	L2
  3124  002E34                     l4076:
  3125                           
  3126                           ; BSR set to: 1
  3127                           ;main.c: 272: else if (c1 < 200 && c1 != 0)
  3128  002E34  0101               	movlb	1	; () banked
  3129  002E36  51AC               	movf	(main@c1+3)& (0+255),w,b
  3130  002E38  0101               	movlb	1	; () banked
  3131  002E3A  11AB               	iorwf	(main@c1+2)& (0+255),w,b
  3132  002E3C  0101               	movlb	1	; () banked
  3133  002E3E  11AA               	iorwf	(main@c1+1)& (0+255),w,b
  3134  002E40  E15B               	bnz	l4094
  3135  002E42  0EC8               	movlw	200
  3136  002E44  0101               	movlb	1	; () banked
  3137  002E46  5DA9               	subwf	main@c1& (0+255),w,b
  3138  002E48  B0D8               	btfsc	status,0,c
  3139  002E4A  D056               	goto	l4094
  3140                           
  3141                           ; BSR set to: 1
  3142  002E4C  0101               	movlb	1	; () banked
  3143  002E4E  51A9               	movf	main@c1& (0+255),w,b
  3144  002E50  0101               	movlb	1	; () banked
  3145  002E52  11AA               	iorwf	(main@c1+1)& (0+255),w,b
  3146  002E54  0101               	movlb	1	; () banked
  3147  002E56  11AB               	iorwf	(main@c1+2)& (0+255),w,b
  3148  002E58  0101               	movlb	1	; () banked
  3149  002E5A  11AC               	iorwf	(main@c1+3)& (0+255),w,b
  3150  002E5C  B4D8               	btfsc	status,2,c
  3151  002E5E  D04C               	goto	l4094
  3152                           
  3153                           ; BSR set to: 1
  3154                           ;main.c: 273: {
  3155                           ;main.c: 274: if (sc < 4)
  3156  002E60  0101               	movlb	1	; () banked
  3157  002E62  51B8               	movf	(main@sc+1)& (0+255),w,b
  3158  002E64  E108               	bnz	l4084
  3159  002E66  0E04               	movlw	4
  3160  002E68  0101               	movlb	1	; () banked
  3161  002E6A  5DB7               	subwf	main@sc& (0+255),w,b
  3162  002E6C  B0D8               	btfsc	status,0,c
  3163  002E6E  D003               	goto	l4084
  3164                           
  3165                           ; BSR set to: 1
  3166                           ;main.c: 275: sc++;
  3167  002E70  0101               	movlb	1	; () banked
  3168  002E72  4BB7               	infsnz	main@sc& (0+255),f,b
  3169  002E74  2BB8               	incf	(main@sc+1)& (0+255),f,b
  3170  002E76                     l4084:
  3171                           
  3172                           ; BSR set to: 1
  3173                           ;main.c: 276: clcd_print(str[sc], (0x80 + (1)));
  3174  002E76  C1B7  F001         	movff	main@sc,___wmul@multiplier
  3175  002E7A  C1B8  F002         	movff	main@sc+1,___wmul@multiplier+1
  3176  002E7E  0E00               	movlw	0
  3177  002E80  6E04               	movwf	___wmul@multiplicand+1,c
  3178  002E82  0E11               	movlw	17
  3179  002E84  6E03               	movwf	___wmul@multiplicand,c
  3180  002E86  ECFA  F007         	call	___wmul	;wreg free
  3181  002E8A  0E00               	movlw	low main@str
  3182  002E8C  2401               	addwf	?___wmul,w,c
  3183  002E8E  6E07               	movwf	clcd_print@data,c
  3184  002E90  0E01               	movlw	high main@str
  3185  002E92  2002               	addwfc	?___wmul+1,w,c
  3186  002E94  6E08               	movwf	clcd_print@data+1,c
  3187  002E96  0E81               	movlw	129
  3188  002E98  6E09               	movwf	clcd_print@addr,c
  3189  002E9A  ECA5  F009         	call	_clcd_print	;wreg free
  3190                           
  3191                           ;main.c: 277: clcd_print(str[sc+1], (0xC0 + (1)));
  3192  002E9E  0E01               	movlw	1
  3193  002EA0  0101               	movlb	1	; () banked
  3194  002EA2  25B7               	addwf	main@sc& (0+255),w,b
  3195  002EA4  6E01               	movwf	___wmul@multiplier,c
  3196  002EA6  0E00               	movlw	0
  3197  002EA8  0101               	movlb	1	; () banked
  3198  002EAA  21B8               	addwfc	(main@sc+1)& (0+255),w,b
  3199  002EAC  6E02               	movwf	___wmul@multiplier+1,c
  3200  002EAE  0E00               	movlw	0
  3201  002EB0  6E04               	movwf	___wmul@multiplicand+1,c
  3202  002EB2  0E11               	movlw	17
  3203  002EB4  6E03               	movwf	___wmul@multiplicand,c
  3204  002EB6  ECFA  F007         	call	___wmul	;wreg free
  3205  002EBA  0E00               	movlw	low main@str
  3206  002EBC  2401               	addwf	?___wmul,w,c
  3207  002EBE  6E07               	movwf	clcd_print@data,c
  3208  002EC0  0E01               	movlw	high main@str
  3209  002EC2  2002               	addwfc	?___wmul+1,w,c
  3210  002EC4  6E08               	movwf	clcd_print@data+1,c
  3211  002EC6  0EC1               	movlw	193
  3212  002EC8  6E09               	movwf	clcd_print@addr,c
  3213  002ECA  ECA5  F009         	call	_clcd_print	;wreg free
  3214                           
  3215                           ;main.c: 278: clcd_putch('*', (0x80 + (0)));
  3216  002ECE  0E80               	movlw	128
  3217  002ED0  6E03               	movwf	clcd_putch@addr,c
  3218  002ED2  0E2A               	movlw	42
  3219  002ED4  ECAD  F007         	call	_clcd_putch
  3220                           
  3221                           ;main.c: 279: clcd_putch(' ', (0xC0 + (0)));
  3222  002ED8  0EC0               	movlw	192
  3223  002EDA  6E03               	movwf	clcd_putch@addr,c
  3224  002EDC  0E20               	movlw	32
  3225  002EDE  ECAD  F007         	call	_clcd_putch
  3226  002EE2  D00A               	goto	l4094
  3227  002EE4                     L2:
  3228  002EE4  0101               	movlb	1	; () banked
  3229  002EE6  6FA9               	movwf	main@c1& (0+255),b
  3230  002EE8  0E00               	movlw	0
  3231  002EEA  6FAA               	movwf	(main@c1+1)& (0+255),b
  3232  002EEC  0E00               	movlw	0
  3233  002EEE  6FAB               	movwf	(main@c1+2)& (0+255),b
  3234  002EF0  0E00               	movlw	0
  3235  002EF2  6FAC               	movwf	(main@c1+3)& (0+255),b
  3236                           
  3237                           ;main.c: 281: }
  3238  002EF4  EF67  F012         	goto	l3802
  3239  002EF8                     l4094:
  3240                           
  3241                           ; BSR set to: 1
  3242                           ;main.c: 282: else
  3243                           ;main.c: 283: c1 = 0;
  3244  002EF8  0E00               	movlw	0
  3245  002EFA  D7F4               	goto	L2
  3246  002EFC                     __end_of_main:
  3247                           	opt stack 0
  3248                           tblptru	equ	0xFF8
  3249                           tblptrh	equ	0xFF7
  3250                           tblptrl	equ	0xFF6
  3251                           tablat	equ	0xFF5
  3252                           postinc0	equ	0xFEE
  3253                           wreg	equ	0xFE8
  3254                           indf1	equ	0xFE7
  3255                           postdec1	equ	0xFE5
  3256                           plusw1	equ	0xFE3
  3257                           fsr1h	equ	0xFE2
  3258                           fsr1l	equ	0xFE1
  3259                           indf2	equ	0xFDF
  3260                           plusw2	equ	0xFDB
  3261                           fsr2h	equ	0xFDA
  3262                           fsr2l	equ	0xFD9
  3263                           status	equ	0xFD8
  3264                           
  3265 ;; *************** function _writeEEP *****************
  3266 ;; Defined at:
  3267 ;;		line 12 in file "EEP.c"
  3268 ;; Parameters:    Size  Location     Type
  3269 ;;  address         1    wreg     unsigned char 
  3270 ;;  data            1    1[COMRAM] unsigned char 
  3271 ;; Auto vars:     Size  Location     Type
  3272 ;;  address         1    2[COMRAM] unsigned char 
  3273 ;;  i               2    3[COMRAM] int 
  3274 ;; Return value:  Size  Location     Type
  3275 ;;                  1    wreg      void 
  3276 ;; Registers used:
  3277 ;;		wreg, status,2, status,0, cstack
  3278 ;; Tracked objects:
  3279 ;;		On entry : 0/0
  3280 ;;		On exit  : 0/0
  3281 ;;		Unchanged: 0/0
  3282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3283 ;;      Params:         1       0       0       0       0       0       0
  3284 ;;      Locals:         3       0       0       0       0       0       0
  3285 ;;      Temps:          0       0       0       0       0       0       0
  3286 ;;      Totals:         4       0       0       0       0       0       0
  3287 ;;Total ram usage:        4 bytes
  3288 ;; Hardware stack levels used:    1
  3289 ;; Hardware stack levels required when called:    2
  3290 ;; This function calls:
  3291 ;;		_i2c_start
  3292 ;;		_i2c_stop
  3293 ;;		_i2c_write
  3294 ;; This function is called by:
  3295 ;;		_main
  3296 ;; This function uses a non-reentrant model
  3297 ;;
  3298                           
  3299                           	psect	text1
  3300  0010CC                     __ptext1:
  3301                           	opt stack 0
  3302  0010CC                     _writeEEP:
  3303                           	opt stack 28
  3304                           
  3305                           ; BSR set to: 1
  3306                           ;incstack = 0
  3307                           ;writeEEP@address stored from wreg
  3308  0010CC  6E03               	movwf	writeEEP@address,c
  3309                           
  3310                           ;EEP.c: 14: i2c_start();
  3311  0010CE  EC6E  F007         	call	_i2c_start	;wreg free
  3312                           
  3313                           ;EEP.c: 15: i2c_write(0xA0);
  3314  0010D2  0EA0               	movlw	160
  3315  0010D4  EC82  F007         	call	_i2c_write
  3316                           
  3317                           ;EEP.c: 16: i2c_write(address);
  3318  0010D8  5003               	movf	writeEEP@address,w,c
  3319  0010DA  EC82  F007         	call	_i2c_write
  3320                           
  3321                           ;EEP.c: 17: i2c_write(data);
  3322  0010DE  5002               	movf	writeEEP@data,w,c
  3323  0010E0  EC82  F007         	call	_i2c_write
  3324                           
  3325                           ;EEP.c: 18: i2c_stop();
  3326  0010E4  EC72  F007         	call	_i2c_stop	;wreg free
  3327                           
  3328                           ;EEP.c: 19: for ( int i =0;i<1000;i++);
  3329  0010E8  0E00               	movlw	0
  3330  0010EA  6E05               	movwf	writeEEP@i+1,c
  3331  0010EC  0E00               	movlw	0
  3332  0010EE  6E04               	movwf	writeEEP@i,c
  3333  0010F0                     l3388:
  3334  0010F0  BE05               	btfsc	writeEEP@i+1,7,c
  3335  0010F2  D006               	goto	l3392
  3336  0010F4  0EE8               	movlw	232
  3337  0010F6  5C04               	subwf	writeEEP@i,w,c
  3338  0010F8  0E03               	movlw	3
  3339  0010FA  5805               	subwfb	writeEEP@i+1,w,c
  3340  0010FC  B0D8               	btfsc	status,0,c
  3341  0010FE  0012               	return	
  3342  001100                     l3392:
  3343  001100  4A04               	infsnz	writeEEP@i,f,c
  3344  001102  2A05               	incf	writeEEP@i+1,f,c
  3345  001104  D7F5               	goto	l3388
  3346  001106                     __end_of_writeEEP:
  3347                           	opt stack 0
  3348                           tblptru	equ	0xFF8
  3349                           tblptrh	equ	0xFF7
  3350                           tblptrl	equ	0xFF6
  3351                           tablat	equ	0xFF5
  3352                           postinc0	equ	0xFEE
  3353                           wreg	equ	0xFE8
  3354                           indf1	equ	0xFE7
  3355                           postdec1	equ	0xFE5
  3356                           plusw1	equ	0xFE3
  3357                           fsr1h	equ	0xFE2
  3358                           fsr1l	equ	0xFE1
  3359                           indf2	equ	0xFDF
  3360                           plusw2	equ	0xFDB
  3361                           fsr2h	equ	0xFDA
  3362                           fsr2l	equ	0xFD9
  3363                           status	equ	0xFD8
  3364                           
  3365 ;; *************** function _view *****************
  3366 ;; Defined at:
  3367 ;;		line 7 in file "view.c"
  3368 ;; Parameters:    Size  Location     Type
  3369 ;;		None
  3370 ;; Auto vars:     Size  Location     Type
  3371 ;;  i               2   53[COMRAM] int 
  3372 ;;  i               2   51[COMRAM] int 
  3373 ;;  i               2   43[COMRAM] int 
  3374 ;;  display1       17   26[COMRAM] unsigned char [17]
  3375 ;;  display        17    9[COMRAM] unsigned char [17]
  3376 ;;  count           2   49[COMRAM] unsigned int 
  3377 ;;  count1          2   47[COMRAM] unsigned int 
  3378 ;;  read            1   55[COMRAM] unsigned char 
  3379 ;;  flag            1   46[COMRAM] unsigned char 
  3380 ;;  key             1   45[COMRAM] unsigned char 
  3381 ;; Return value:  Size  Location     Type
  3382 ;;                  2  197[None  ] int 
  3383 ;; Registers used:
  3384 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3385 ;; Tracked objects:
  3386 ;;		On entry : 0/0
  3387 ;;		On exit  : 0/0
  3388 ;;		Unchanged: 0/0
  3389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3390 ;;      Params:         0       0       0       0       0       0       0
  3391 ;;      Locals:        47       0       0       0       0       0       0
  3392 ;;      Temps:          0       0       0       0       0       0       0
  3393 ;;      Totals:        47       0       0       0       0       0       0
  3394 ;;Total ram usage:       47 bytes
  3395 ;; Hardware stack levels used:    1
  3396 ;; Hardware stack levels required when called:    4
  3397 ;; This function calls:
  3398 ;;		_clcd_print
  3399 ;;		_readEEP
  3400 ;;		_read_switches
  3401 ;; This function is called by:
  3402 ;;		_main
  3403 ;; This function uses a non-reentrant model
  3404 ;;
  3405                           
  3406                           	psect	text2
  3407  0018F4                     __ptext2:
  3408                           	opt stack 0
  3409  0018F4                     _view:
  3410                           	opt stack 26
  3411                           
  3412                           ;view.c: 9: unsigned char display[17] ,display1[17],read=0x00,key,flag=1;
  3413                           
  3414                           ;incstack = 0
  3415  0018F4  0E00               	movlw	0
  3416  0018F6  6E38               	movwf	view@read,c
  3417  0018F8  0E01               	movlw	1
  3418  0018FA  6E2F               	movwf	view@flag,c
  3419                           
  3420                           ;view.c: 10: unsigned int count=0,count1=0;
  3421  0018FC  0E00               	movlw	0
  3422  0018FE  6E33               	movwf	view@count+1,c
  3423  001900  0E00               	movlw	0
  3424  001902  6E32               	movwf	view@count,c
  3425  001904  0E00               	movlw	0
  3426  001906  6E31               	movwf	view@count1+1,c
  3427  001908  0E00               	movlw	0
  3428  00190A  6E30               	movwf	view@count1,c
  3429                           
  3430                           ;view.c: 11: display[16]='\0';
  3431  00190C  0E00               	movlw	0
  3432  00190E  6E1A               	movwf	view@display+16,c
  3433                           
  3434                           ;view.c: 12: display1[16]='\0';
  3435  001910  0E00               	movlw	0
  3436  001912  6E2B               	movwf	view@display1+16,c
  3437  001914                     l3398:
  3438                           
  3439                           ;view.c: 14: {
  3440                           ;view.c: 15: key=read_switches(0);
  3441  001914  0E00               	movlw	0
  3442  001916  ECA1  F008         	call	_read_switches
  3443  00191A  6E2E               	movwf	view@key,c
  3444                           
  3445                           ;view.c: 16: for ( int i = 0; i< 1500;i++);
  3446  00191C  0E00               	movlw	0
  3447  00191E  6E2D               	movwf	view@i+1,c
  3448  001920  0E00               	movlw	0
  3449  001922  6E2C               	movwf	view@i,c
  3450  001924                     l3402:
  3451  001924  BE2D               	btfsc	view@i+1,7,c
  3452  001926  D006               	goto	l3406
  3453  001928  0EDC               	movlw	220
  3454  00192A  5C2C               	subwf	view@i,w,c
  3455  00192C  0E05               	movlw	5
  3456  00192E  582D               	subwfb	view@i+1,w,c
  3457  001930  B0D8               	btfsc	status,0,c
  3458  001932  D003               	goto	l3410
  3459  001934                     l3406:
  3460  001934  4A2C               	infsnz	view@i,f,c
  3461  001936  2A2D               	incf	view@i+1,f,c
  3462  001938  D7F5               	goto	l3402
  3463  00193A                     l3410:
  3464                           
  3465                           ;view.c: 17: if(flag == 1)
  3466  00193A  042F               	decf	view@flag,w,c
  3467  00193C  A4D8               	btfss	status,2,c
  3468  00193E  D03D               	goto	l3436
  3469                           
  3470                           ;view.c: 18: {
  3471                           ;view.c: 19: for (int i =0 ;i<16;i++)
  3472  001940  0E00               	movlw	0
  3473  001942  6E35               	movwf	view@i_440+1,c
  3474  001944  0E00               	movlw	0
  3475  001946  6E34               	movwf	view@i_440,c
  3476  001948                     l3414:
  3477  001948  BE35               	btfsc	view@i_440+1,7,c
  3478  00194A  D006               	goto	l3418
  3479  00194C  5035               	movf	view@i_440+1,w,c
  3480  00194E  E123               	bnz	l3432
  3481  001950  0E10               	movlw	16
  3482  001952  5C34               	subwf	view@i_440,w,c
  3483  001954  B0D8               	btfsc	status,0,c
  3484  001956  D01F               	goto	l3432
  3485  001958                     l3418:
  3486                           
  3487                           ;view.c: 20: {
  3488                           ;view.c: 21: if(read == 0xA0)
  3489  001958  0EA0               	movlw	160
  3490  00195A  1838               	xorwf	view@read,w,c
  3491  00195C  A4D8               	btfss	status,2,c
  3492  00195E  D002               	goto	l3422
  3493                           
  3494                           ;view.c: 22: read = 0x00;
  3495  001960  0E00               	movlw	0
  3496  001962  6E38               	movwf	view@read,c
  3497  001964                     l3422:
  3498                           
  3499                           ;view.c: 23: display[i]=readEEP(read);
  3500  001964  0E0A               	movlw	low view@display
  3501  001966  2434               	addwf	view@i_440,w,c
  3502  001968  6ED9               	movwf	fsr2l,c
  3503  00196A  0E00               	movlw	high view@display
  3504  00196C  2035               	addwfc	view@i_440+1,w,c
  3505  00196E  6EDA               	movwf	fsr2h,c
  3506  001970  5038               	movf	view@read,w,c
  3507  001972  EC21  F008         	call	_readEEP
  3508  001976  6EDF               	movwf	indf2,c
  3509                           
  3510                           ;view.c: 24: display1[i]=readEEP(read+0x10);
  3511  001978  0E1B               	movlw	low view@display1
  3512  00197A  2434               	addwf	view@i_440,w,c
  3513  00197C  6ED9               	movwf	fsr2l,c
  3514  00197E  0E00               	movlw	high view@display1
  3515  001980  2035               	addwfc	view@i_440+1,w,c
  3516  001982  6EDA               	movwf	fsr2h,c
  3517  001984  5038               	movf	view@read,w,c
  3518  001986  0F10               	addlw	16
  3519  001988  EC21  F008         	call	_readEEP
  3520  00198C  6EDF               	movwf	indf2,c
  3521                           
  3522                           ;view.c: 25: read++;
  3523  00198E  2A38               	incf	view@read,f,c
  3524  001990  4A34               	infsnz	view@i_440,f,c
  3525  001992  2A35               	incf	view@i_440+1,f,c
  3526  001994  D7D9               	goto	l3414
  3527  001996                     l3432:
  3528                           
  3529                           ;view.c: 26: }
  3530                           ;view.c: 28: clcd_print(display,(0x80 + (0)));
  3531  001996  0E0A               	movlw	low view@display
  3532  001998  6E07               	movwf	clcd_print@data,c
  3533  00199A  0E00               	movlw	high view@display
  3534  00199C  6E08               	movwf	clcd_print@data+1,c
  3535  00199E  0E80               	movlw	128
  3536  0019A0  6E09               	movwf	clcd_print@addr,c
  3537  0019A2  ECA5  F009         	call	_clcd_print	;wreg free
  3538                           
  3539                           ;view.c: 29: clcd_print(display1,(0xC0 + (0)));
  3540  0019A6  0E1B               	movlw	low view@display1
  3541  0019A8  6E07               	movwf	clcd_print@data,c
  3542  0019AA  0E00               	movlw	high view@display1
  3543  0019AC  6E08               	movwf	clcd_print@data+1,c
  3544  0019AE  0EC0               	movlw	192
  3545  0019B0  6E09               	movwf	clcd_print@addr,c
  3546  0019B2  ECA5  F009         	call	_clcd_print	;wreg free
  3547                           
  3548                           ;view.c: 30: flag=0;
  3549  0019B6  0E00               	movlw	0
  3550  0019B8  6E2F               	movwf	view@flag,c
  3551  0019BA                     l3436:
  3552                           
  3553                           ;view.c: 31: }
  3554                           ;view.c: 32: if(flag == 2)
  3555  0019BA  0E02               	movlw	2
  3556  0019BC  182F               	xorwf	view@flag,w,c
  3557  0019BE  A4D8               	btfss	status,2,c
  3558  0019C0  D037               	goto	l3462
  3559                           
  3560                           ;view.c: 33: {
  3561                           ;view.c: 34: for (int i =15 ;i>=0;i--)
  3562  0019C2  0E00               	movlw	0
  3563  0019C4  6E37               	movwf	view@i_441+1,c
  3564  0019C6  0E0F               	movlw	15
  3565  0019C8  6E36               	movwf	view@i_441,c
  3566  0019CA                     l3440:
  3567  0019CA  BE37               	btfsc	view@i_441+1,7,c
  3568  0019CC  D01F               	goto	l3458
  3569                           
  3570                           ;view.c: 35: {
  3571                           ;view.c: 36: read--;
  3572  0019CE  0638               	decf	view@read,f,c
  3573                           
  3574                           ;view.c: 37: display1[i]=readEEP(read);
  3575  0019D0  0E1B               	movlw	low view@display1
  3576  0019D2  2436               	addwf	view@i_441,w,c
  3577  0019D4  6ED9               	movwf	fsr2l,c
  3578  0019D6  0E00               	movlw	high view@display1
  3579  0019D8  2037               	addwfc	view@i_441+1,w,c
  3580  0019DA  6EDA               	movwf	fsr2h,c
  3581  0019DC  5038               	movf	view@read,w,c
  3582  0019DE  EC21  F008         	call	_readEEP
  3583  0019E2  6EDF               	movwf	indf2,c
  3584                           
  3585                           ;view.c: 38: display[i]=readEEP(read+0x10);
  3586  0019E4  0E0A               	movlw	low view@display
  3587  0019E6  2436               	addwf	view@i_441,w,c
  3588  0019E8  6ED9               	movwf	fsr2l,c
  3589  0019EA  0E00               	movlw	high view@display
  3590  0019EC  2037               	addwfc	view@i_441+1,w,c
  3591  0019EE  6EDA               	movwf	fsr2h,c
  3592  0019F0  5038               	movf	view@read,w,c
  3593  0019F2  0F10               	addlw	16
  3594  0019F4  EC21  F008         	call	_readEEP
  3595  0019F8  6EDF               	movwf	indf2,c
  3596                           
  3597                           ;view.c: 39: if(read == 0x00)
  3598  0019FA  5038               	movf	view@read,w,c
  3599  0019FC  A4D8               	btfss	status,2,c
  3600  0019FE  D002               	goto	l3454
  3601                           
  3602                           ;view.c: 40: read = 0xA0;
  3603  001A00  0EA0               	movlw	160
  3604  001A02  6E38               	movwf	view@read,c
  3605  001A04                     l3454:
  3606  001A04  0636               	decf	view@i_441,f,c
  3607  001A06  A0D8               	btfss	status,0,c
  3608  001A08  0637               	decf	view@i_441+1,f,c
  3609  001A0A  D7DF               	goto	l3440
  3610  001A0C                     l3458:
  3611                           
  3612                           ;view.c: 41: }
  3613                           ;view.c: 43: clcd_print(display,(0x80 + (0)));
  3614  001A0C  0E0A               	movlw	low view@display
  3615  001A0E  6E07               	movwf	clcd_print@data,c
  3616  001A10  0E00               	movlw	high view@display
  3617  001A12  6E08               	movwf	clcd_print@data+1,c
  3618  001A14  0E80               	movlw	128
  3619  001A16  6E09               	movwf	clcd_print@addr,c
  3620  001A18  ECA5  F009         	call	_clcd_print	;wreg free
  3621                           
  3622                           ;view.c: 44: clcd_print(display1,(0xC0 + (0)));
  3623  001A1C  0E1B               	movlw	low view@display1
  3624  001A1E  6E07               	movwf	clcd_print@data,c
  3625  001A20  0E00               	movlw	high view@display1
  3626  001A22  6E08               	movwf	clcd_print@data+1,c
  3627  001A24  0EC0               	movlw	192
  3628  001A26  6E09               	movwf	clcd_print@addr,c
  3629  001A28  ECA5  F009         	call	_clcd_print	;wreg free
  3630                           
  3631                           ;view.c: 45: flag=0;
  3632  001A2C  0E00               	movlw	0
  3633  001A2E  6E2F               	movwf	view@flag,c
  3634  001A30                     l3462:
  3635                           
  3636                           ;view.c: 46: }
  3637                           ;view.c: 47: if(key == 8)
  3638  001A30  0E08               	movlw	8
  3639  001A32  182E               	xorwf	view@key,w,c
  3640  001A34  A4D8               	btfss	status,2,c
  3641  001A36  D00B               	goto	l3470
  3642                           
  3643                           ;view.c: 48: {
  3644                           ;view.c: 49: count++;
  3645  001A38  4A32               	infsnz	view@count,f,c
  3646  001A3A  2A33               	incf	view@count+1,f,c
  3647                           
  3648                           ;view.c: 50: if ( count == 200 )
  3649  001A3C  0EC8               	movlw	200
  3650  001A3E  1832               	xorwf	view@count,w,c
  3651  001A40  1033               	iorwf	view@count+1,w,c
  3652  001A42  A4D8               	btfss	status,2,c
  3653  001A44  D019               	goto	l3478
  3654                           
  3655                           ;view.c: 51: count = 150;
  3656  001A46  0E00               	movlw	0
  3657  001A48  6E33               	movwf	view@count+1,c
  3658  001A4A  0E96               	movlw	150
  3659  001A4C  D014               	goto	L3
  3660  001A4E                     l3470:
  3661                           
  3662                           ;view.c: 53: else if(count < 200 && count != 0)
  3663  001A4E  5033               	movf	view@count+1,w,c
  3664  001A50  E10F               	bnz	l3476
  3665  001A52  0EC8               	movlw	200
  3666  001A54  5C32               	subwf	view@count,w,c
  3667  001A56  B0D8               	btfsc	status,0,c
  3668  001A58  D00B               	goto	l3476
  3669  001A5A  5032               	movf	view@count,w,c
  3670  001A5C  1033               	iorwf	view@count+1,w,c
  3671  001A5E  B4D8               	btfsc	status,2,c
  3672  001A60  D007               	goto	l3476
  3673                           
  3674                           ;view.c: 54: {
  3675                           ;view.c: 55: count=0;
  3676  001A62  0E00               	movlw	0
  3677  001A64  6E33               	movwf	view@count+1,c
  3678  001A66  0E00               	movlw	0
  3679  001A68  6E32               	movwf	view@count,c
  3680                           
  3681                           ;view.c: 56: flag=1;
  3682  001A6A  0E01               	movlw	1
  3683  001A6C  6E2F               	movwf	view@flag,c
  3684                           
  3685                           ;view.c: 57: }
  3686  001A6E  D004               	goto	l3478
  3687  001A70                     l3476:
  3688                           
  3689                           ;view.c: 58: else
  3690                           ;view.c: 59: count=0;
  3691  001A70  0E00               	movlw	0
  3692  001A72  6E33               	movwf	view@count+1,c
  3693  001A74  0E00               	movlw	0
  3694  001A76                     L3:
  3695  001A76  6E32               	movwf	view@count,c
  3696  001A78                     l3478:
  3697                           
  3698                           ;view.c: 61: if(key == 9)
  3699  001A78  0E09               	movlw	9
  3700  001A7A  182E               	xorwf	view@key,w,c
  3701  001A7C  A4D8               	btfss	status,2,c
  3702  001A7E  D003               	goto	l3482
  3703                           
  3704                           ;view.c: 62: {
  3705                           ;view.c: 63: count1++;
  3706  001A80  4A30               	infsnz	view@count1,f,c
  3707  001A82  2A31               	incf	view@count1+1,f,c
  3708                           
  3709                           ;view.c: 64: }
  3710  001A84  D747               	goto	l3398
  3711  001A86                     l3482:
  3712                           
  3713                           ;view.c: 65: else if(count1 < 500 && count1 != 0)
  3714  001A86  0EF4               	movlw	244
  3715  001A88  5C30               	subwf	view@count1,w,c
  3716  001A8A  0E01               	movlw	1
  3717  001A8C  5831               	subwfb	view@count1+1,w,c
  3718  001A8E  B0D8               	btfsc	status,0,c
  3719  001A90  D00B               	goto	l3488
  3720  001A92  5030               	movf	view@count1,w,c
  3721  001A94  1031               	iorwf	view@count1+1,w,c
  3722  001A96  B4D8               	btfsc	status,2,c
  3723  001A98  D007               	goto	l3488
  3724                           
  3725                           ;view.c: 66: {
  3726                           ;view.c: 67: count1=0;
  3727  001A9A  0E00               	movlw	0
  3728  001A9C  6E31               	movwf	view@count1+1,c
  3729  001A9E  0E00               	movlw	0
  3730  001AA0  6E30               	movwf	view@count1,c
  3731                           
  3732                           ;view.c: 68: flag=2;
  3733  001AA2  0E02               	movlw	2
  3734  001AA4  6E2F               	movwf	view@flag,c
  3735                           
  3736                           ;view.c: 69: }
  3737  001AA6  D736               	goto	l3398
  3738  001AA8                     l3488:
  3739                           
  3740                           ;view.c: 70: else if (count1 > 500)
  3741  001AA8  0EF5               	movlw	245
  3742  001AAA  5C30               	subwf	view@count1,w,c
  3743  001AAC  0E01               	movlw	1
  3744  001AAE  5831               	subwfb	view@count1+1,w,c
  3745  001AB0  B0D8               	btfsc	status,0,c
  3746  001AB2  0012               	return	
  3747                           
  3748                           ;view.c: 74: else
  3749                           ;view.c: 75: count1=0;
  3750                           
  3751                           ;view.c: 73: }
  3752                           
  3753                           ;view.c: 71: {
  3754                           ;view.c: 72: return;
  3755  001AB4  0E00               	movlw	0
  3756  001AB6  6E31               	movwf	view@count1+1,c
  3757  001AB8  0E00               	movlw	0
  3758  001ABA  6E30               	movwf	view@count1,c
  3759  001ABC  D72B               	goto	l3398
  3760  001ABE                     __end_of_view:
  3761                           	opt stack 0
  3762                           tblptru	equ	0xFF8
  3763                           tblptrh	equ	0xFF7
  3764                           tblptrl	equ	0xFF6
  3765                           tablat	equ	0xFF5
  3766                           postinc0	equ	0xFEE
  3767                           wreg	equ	0xFE8
  3768                           indf1	equ	0xFE7
  3769                           postdec1	equ	0xFE5
  3770                           plusw1	equ	0xFE3
  3771                           fsr1h	equ	0xFE2
  3772                           fsr1l	equ	0xFE1
  3773                           indf2	equ	0xFDF
  3774                           plusw2	equ	0xFDB
  3775                           fsr2h	equ	0xFDA
  3776                           fsr2l	equ	0xFD9
  3777                           status	equ	0xFD8
  3778                           
  3779 ;; *************** function _settime *****************
  3780 ;; Defined at:
  3781 ;;		line 6 in file "settime.c"
  3782 ;; Parameters:    Size  Location     Type
  3783 ;;		None
  3784 ;; Auto vars:     Size  Location     Type
  3785 ;;  flag            2   23[COMRAM] unsigned int 
  3786 ;;  blink           2   21[COMRAM] unsigned int 
  3787 ;;  m               2   19[COMRAM] int 
  3788 ;;  l               2   17[COMRAM] int 
  3789 ;;  k               2   15[COMRAM] int 
  3790 ;;  key             2   13[COMRAM] unsigned int 
  3791 ;;  delay           2   11[COMRAM] unsigned int 
  3792 ;; Return value:  Size  Location     Type
  3793 ;;                  1    wreg      void 
  3794 ;; Registers used:
  3795 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3796 ;; Tracked objects:
  3797 ;;		On entry : 0/0
  3798 ;;		On exit  : 0/0
  3799 ;;		Unchanged: 0/0
  3800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3801 ;;      Params:         0       0       0       0       0       0       0
  3802 ;;      Locals:        14       0       0       0       0       0       0
  3803 ;;      Temps:          2       0       0       0       0       0       0
  3804 ;;      Totals:        16       0       0       0       0       0       0
  3805 ;;Total ram usage:       16 bytes
  3806 ;; Hardware stack levels used:    1
  3807 ;; Hardware stack levels required when called:    2
  3808 ;; This function calls:
  3809 ;;		___awdiv
  3810 ;;		___awmod
  3811 ;;		_clcd_print
  3812 ;;		_read_switches
  3813 ;; This function is called by:
  3814 ;;		_main
  3815 ;; This function uses a non-reentrant model
  3816 ;;
  3817                           
  3818                           	psect	text3
  3819  001ABE                     __ptext3:
  3820                           	opt stack 0
  3821  001ABE                     _settime:
  3822                           	opt stack 28
  3823                           
  3824                           ;settime.c: 8: unsigned int delay=0,key,flag=1,blink=0;
  3825                           
  3826                           ;incstack = 0
  3827  001ABE  0E00               	movlw	0
  3828  001AC0  6E0D               	movwf	settime@delay+1,c
  3829  001AC2  0E00               	movlw	0
  3830  001AC4  6E0C               	movwf	settime@delay,c
  3831  001AC6  0E00               	movlw	0
  3832  001AC8  6E19               	movwf	settime@flag+1,c
  3833  001ACA  0E01               	movlw	1
  3834  001ACC  6E18               	movwf	settime@flag,c
  3835  001ACE  0E00               	movlw	0
  3836  001AD0  6E17               	movwf	settime@blink+1,c
  3837  001AD2  0E00               	movlw	0
  3838  001AD4  6E16               	movwf	settime@blink,c
  3839                           
  3840                           ;settime.c: 9: int k=0,l=0,m=0;
  3841  001AD6  0E00               	movlw	0
  3842  001AD8  6E11               	movwf	settime@k+1,c
  3843  001ADA  0E00               	movlw	0
  3844  001ADC  6E10               	movwf	settime@k,c
  3845  001ADE  0E00               	movlw	0
  3846  001AE0  6E13               	movwf	settime@l+1,c
  3847  001AE2  0E00               	movlw	0
  3848  001AE4  6E12               	movwf	settime@l,c
  3849  001AE6  0E00               	movlw	0
  3850  001AE8  6E15               	movwf	settime@m+1,c
  3851  001AEA  0E00               	movlw	0
  3852  001AEC  6E14               	movwf	settime@m,c
  3853                           
  3854                           ;settime.c: 10: clcd_print("                ",(0xC0 + (0)));
  3855  001AEE  0EFF               	movlw	low (STR_32+2)
  3856  001AF0  6E07               	movwf	clcd_print@data,c
  3857  001AF2  0E2E               	movlw	high (STR_32+2)
  3858  001AF4  6E08               	movwf	clcd_print@data+1,c
  3859  001AF6  0EC0               	movlw	192
  3860  001AF8  6E09               	movwf	clcd_print@addr,c
  3861  001AFA  ECA5  F009         	call	_clcd_print	;wreg free
  3862                           
  3863                           ;settime.c: 11: clcd_print(set,(0xC0 + (0)));
  3864  001AFE  0EBD               	movlw	low _set
  3865  001B00  6E07               	movwf	clcd_print@data,c
  3866  001B02  0E01               	movlw	high _set
  3867  001B04  6E08               	movwf	clcd_print@data+1,c
  3868  001B06  0EC0               	movlw	192
  3869  001B08  6E09               	movwf	clcd_print@addr,c
  3870  001B0A  ECA5  F009         	call	_clcd_print	;wreg free
  3871                           
  3872                           ;settime.c: 12: clcd_print("   SET _ TIME   ",(0x80 + (0)));
  3873  001B0E  0E35               	movlw	low STR_37
  3874  001B10  6E07               	movwf	clcd_print@data,c
  3875  001B12  0E2F               	movlw	high STR_37
  3876  001B14  6E08               	movwf	clcd_print@data+1,c
  3877  001B16  0E80               	movlw	128
  3878  001B18  6E09               	movwf	clcd_print@addr,c
  3879  001B1A  ECA5  F009         	call	_clcd_print	;wreg free
  3880  001B1E                     l3524:
  3881                           
  3882                           ;settime.c: 14: {
  3883                           ;settime.c: 15: if(flag == 1)
  3884  001B1E  0418               	decf	settime@flag,w,c
  3885  001B20  1019               	iorwf	settime@flag+1,w,c
  3886  001B22  A4D8               	btfss	status,2,c
  3887  001B24  D028               	goto	l3536
  3888                           
  3889                           ;settime.c: 16: {
  3890                           ;settime.c: 17: if(blink++ < 1000)
  3891  001B26  5016               	movf	settime@blink,w,c
  3892  001B28  6E0A               	movwf	??_settime& (0+255),c
  3893  001B2A  5017               	movf	settime@blink+1,w,c
  3894  001B2C  6E0B               	movwf	(??_settime+1)& (0+255),c
  3895  001B2E  4A16               	infsnz	settime@blink,f,c
  3896  001B30  2A17               	incf	settime@blink+1,f,c
  3897  001B32  0EE8               	movlw	232
  3898  001B34  5C0A               	subwf	??_settime,w,c
  3899  001B36  0E03               	movlw	3
  3900  001B38  580B               	subwfb	??_settime+1,w,c
  3901  001B3A  B0D8               	btfsc	status,0,c
  3902  001B3C  D009               	goto	l3530
  3903                           
  3904                           ;settime.c: 18: {
  3905                           ;settime.c: 19: clcd_print("  ",(0xC0 + (6)));
  3906  001B3E  0E0D               	movlw	low (STR_32+16)
  3907  001B40  6E07               	movwf	clcd_print@data,c
  3908  001B42  0E2F               	movlw	high (STR_32+16)
  3909  001B44  6E08               	movwf	clcd_print@data+1,c
  3910  001B46  0EC6               	movlw	198
  3911  001B48  6E09               	movwf	clcd_print@addr,c
  3912  001B4A  ECA5  F009         	call	_clcd_print	;wreg free
  3913                           
  3914                           ;settime.c: 20: }
  3915  001B4E  D013               	goto	l3536
  3916  001B50                     l3530:
  3917                           
  3918                           ;settime.c: 21: else
  3919                           ;settime.c: 22: {
  3920                           ;settime.c: 23: if(blink == 2000)
  3921  001B50  0ED0               	movlw	208
  3922  001B52  1816               	xorwf	settime@blink,w,c
  3923  001B54  E108               	bnz	l3534
  3924  001B56  0E07               	movlw	7
  3925  001B58  1817               	xorwf	settime@blink+1,w,c
  3926  001B5A  A4D8               	btfss	status,2,c
  3927  001B5C  D004               	goto	l3534
  3928                           
  3929                           ;settime.c: 24: {
  3930                           ;settime.c: 25: blink=0;
  3931  001B5E  0E00               	movlw	0
  3932  001B60  6E17               	movwf	settime@blink+1,c
  3933  001B62  0E00               	movlw	0
  3934  001B64  6E16               	movwf	settime@blink,c
  3935  001B66                     l3534:
  3936                           
  3937                           ;settime.c: 26: }
  3938                           ;settime.c: 27: clcd_print(set,(0xC0 + (0)));
  3939  001B66  0EBD               	movlw	low _set
  3940  001B68  6E07               	movwf	clcd_print@data,c
  3941  001B6A  0E01               	movlw	high _set
  3942  001B6C  6E08               	movwf	clcd_print@data+1,c
  3943  001B6E  0EC0               	movlw	192
  3944  001B70  6E09               	movwf	clcd_print@addr,c
  3945  001B72  ECA5  F009         	call	_clcd_print	;wreg free
  3946  001B76                     l3536:
  3947                           
  3948                           ;settime.c: 28: }
  3949                           ;settime.c: 30: }
  3950                           ;settime.c: 31: if(flag == 2)
  3951  001B76  0E02               	movlw	2
  3952  001B78  1818               	xorwf	settime@flag,w,c
  3953  001B7A  1019               	iorwf	settime@flag+1,w,c
  3954  001B7C  A4D8               	btfss	status,2,c
  3955  001B7E  D028               	goto	l3548
  3956                           
  3957                           ;settime.c: 32: {
  3958                           ;settime.c: 33: if(blink++ < 1000)
  3959  001B80  5016               	movf	settime@blink,w,c
  3960  001B82  6E0A               	movwf	??_settime& (0+255),c
  3961  001B84  5017               	movf	settime@blink+1,w,c
  3962  001B86  6E0B               	movwf	(??_settime+1)& (0+255),c
  3963  001B88  4A16               	infsnz	settime@blink,f,c
  3964  001B8A  2A17               	incf	settime@blink+1,f,c
  3965  001B8C  0EE8               	movlw	232
  3966  001B8E  5C0A               	subwf	??_settime,w,c
  3967  001B90  0E03               	movlw	3
  3968  001B92  580B               	subwfb	??_settime+1,w,c
  3969  001B94  B0D8               	btfsc	status,0,c
  3970  001B96  D009               	goto	l3542
  3971                           
  3972                           ;settime.c: 34: {
  3973                           ;settime.c: 35: clcd_print("  ",(0xC0 + (3)));
  3974  001B98  0E0D               	movlw	low (STR_32+16)
  3975  001B9A  6E07               	movwf	clcd_print@data,c
  3976  001B9C  0E2F               	movlw	high (STR_32+16)
  3977  001B9E  6E08               	movwf	clcd_print@data+1,c
  3978  001BA0  0EC3               	movlw	195
  3979  001BA2  6E09               	movwf	clcd_print@addr,c
  3980  001BA4  ECA5  F009         	call	_clcd_print	;wreg free
  3981                           
  3982                           ;settime.c: 36: }
  3983  001BA8  D013               	goto	l3548
  3984  001BAA                     l3542:
  3985                           
  3986                           ;settime.c: 37: else
  3987                           ;settime.c: 38: {
  3988                           ;settime.c: 39: if(blink == 2000)
  3989  001BAA  0ED0               	movlw	208
  3990  001BAC  1816               	xorwf	settime@blink,w,c
  3991  001BAE  E108               	bnz	l3546
  3992  001BB0  0E07               	movlw	7
  3993  001BB2  1817               	xorwf	settime@blink+1,w,c
  3994  001BB4  A4D8               	btfss	status,2,c
  3995  001BB6  D004               	goto	l3546
  3996                           
  3997                           ;settime.c: 40: {
  3998                           ;settime.c: 41: blink=0;
  3999  001BB8  0E00               	movlw	0
  4000  001BBA  6E17               	movwf	settime@blink+1,c
  4001  001BBC  0E00               	movlw	0
  4002  001BBE  6E16               	movwf	settime@blink,c
  4003  001BC0                     l3546:
  4004                           
  4005                           ;settime.c: 42: }
  4006                           ;settime.c: 43: clcd_print(set,(0xC0 + (0)));
  4007  001BC0  0EBD               	movlw	low _set
  4008  001BC2  6E07               	movwf	clcd_print@data,c
  4009  001BC4  0E01               	movlw	high _set
  4010  001BC6  6E08               	movwf	clcd_print@data+1,c
  4011  001BC8  0EC0               	movlw	192
  4012  001BCA  6E09               	movwf	clcd_print@addr,c
  4013  001BCC  ECA5  F009         	call	_clcd_print	;wreg free
  4014  001BD0                     l3548:
  4015                           
  4016                           ;settime.c: 44: }
  4017                           ;settime.c: 46: }
  4018                           ;settime.c: 47: if(flag == 3)
  4019  001BD0  0E03               	movlw	3
  4020  001BD2  1818               	xorwf	settime@flag,w,c
  4021  001BD4  1019               	iorwf	settime@flag+1,w,c
  4022  001BD6  A4D8               	btfss	status,2,c
  4023  001BD8  D028               	goto	l3560
  4024                           
  4025                           ;settime.c: 48: {
  4026                           ;settime.c: 49: if(blink++ < 1000)
  4027  001BDA  5016               	movf	settime@blink,w,c
  4028  001BDC  6E0A               	movwf	??_settime& (0+255),c
  4029  001BDE  5017               	movf	settime@blink+1,w,c
  4030  001BE0  6E0B               	movwf	(??_settime+1)& (0+255),c
  4031  001BE2  4A16               	infsnz	settime@blink,f,c
  4032  001BE4  2A17               	incf	settime@blink+1,f,c
  4033  001BE6  0EE8               	movlw	232
  4034  001BE8  5C0A               	subwf	??_settime,w,c
  4035  001BEA  0E03               	movlw	3
  4036  001BEC  580B               	subwfb	??_settime+1,w,c
  4037  001BEE  B0D8               	btfsc	status,0,c
  4038  001BF0  D009               	goto	l3554
  4039                           
  4040                           ;settime.c: 50: {
  4041                           ;settime.c: 51: clcd_print("  ",(0xC0 + (0)));
  4042  001BF2  0E0D               	movlw	low (STR_32+16)
  4043  001BF4  6E07               	movwf	clcd_print@data,c
  4044  001BF6  0E2F               	movlw	high (STR_32+16)
  4045  001BF8  6E08               	movwf	clcd_print@data+1,c
  4046  001BFA  0EC0               	movlw	192
  4047  001BFC  6E09               	movwf	clcd_print@addr,c
  4048  001BFE  ECA5  F009         	call	_clcd_print	;wreg free
  4049                           
  4050                           ;settime.c: 52: }
  4051  001C02  D013               	goto	l3560
  4052  001C04                     l3554:
  4053                           
  4054                           ;settime.c: 53: else
  4055                           ;settime.c: 54: {
  4056                           ;settime.c: 55: if(blink == 2000)
  4057  001C04  0ED0               	movlw	208
  4058  001C06  1816               	xorwf	settime@blink,w,c
  4059  001C08  E108               	bnz	l3558
  4060  001C0A  0E07               	movlw	7
  4061  001C0C  1817               	xorwf	settime@blink+1,w,c
  4062  001C0E  A4D8               	btfss	status,2,c
  4063  001C10  D004               	goto	l3558
  4064                           
  4065                           ;settime.c: 56: {
  4066                           ;settime.c: 57: blink=0;
  4067  001C12  0E00               	movlw	0
  4068  001C14  6E17               	movwf	settime@blink+1,c
  4069  001C16  0E00               	movlw	0
  4070  001C18  6E16               	movwf	settime@blink,c
  4071  001C1A                     l3558:
  4072                           
  4073                           ;settime.c: 58: }
  4074                           ;settime.c: 59: clcd_print(set,(0xC0 + (0)));
  4075  001C1A  0EBD               	movlw	low _set
  4076  001C1C  6E07               	movwf	clcd_print@data,c
  4077  001C1E  0E01               	movlw	high _set
  4078  001C20  6E08               	movwf	clcd_print@data+1,c
  4079  001C22  0EC0               	movlw	192
  4080  001C24  6E09               	movwf	clcd_print@addr,c
  4081  001C26  ECA5  F009         	call	_clcd_print	;wreg free
  4082  001C2A                     l3560:
  4083                           
  4084                           ;settime.c: 60: }
  4085                           ;settime.c: 62: }
  4086                           ;settime.c: 64: key = read_switches(1);
  4087  001C2A  0E01               	movlw	1
  4088  001C2C  ECA1  F008         	call	_read_switches
  4089  001C30  6E0A               	movwf	??_settime& (0+255),c
  4090  001C32  500A               	movf	??_settime,w,c
  4091  001C34  6E0E               	movwf	settime@key,c
  4092  001C36  6A0F               	clrf	settime@key+1,c
  4093                           
  4094                           ;settime.c: 65: if(key == 11)
  4095  001C38  0E0B               	movlw	11
  4096  001C3A  180E               	xorwf	settime@key,w,c
  4097  001C3C  100F               	iorwf	settime@key+1,w,c
  4098  001C3E  A4D8               	btfss	status,2,c
  4099  001C40  D083               	goto	l3600
  4100                           
  4101                           ;settime.c: 66: {
  4102                           ;settime.c: 67: if(flag == 1)
  4103  001C42  0418               	decf	settime@flag,w,c
  4104  001C44  1019               	iorwf	settime@flag+1,w,c
  4105  001C46  A4D8               	btfss	status,2,c
  4106  001C48  D027               	goto	l3576
  4107                           
  4108                           ;settime.c: 68: {
  4109                           ;settime.c: 69: k++;
  4110  001C4A  4A10               	infsnz	settime@k,f,c
  4111  001C4C  2A11               	incf	settime@k+1,f,c
  4112                           
  4113                           ;settime.c: 70: if(k==59)
  4114  001C4E  0E3B               	movlw	59
  4115  001C50  1810               	xorwf	settime@k,w,c
  4116  001C52  1011               	iorwf	settime@k+1,w,c
  4117  001C54  A4D8               	btfss	status,2,c
  4118  001C56  D004               	goto	l3572
  4119                           
  4120                           ;settime.c: 71: k=0;
  4121  001C58  0E00               	movlw	0
  4122  001C5A  6E11               	movwf	settime@k+1,c
  4123  001C5C  0E00               	movlw	0
  4124  001C5E  6E10               	movwf	settime@k,c
  4125  001C60                     l3572:
  4126                           
  4127                           ;settime.c: 72: set[7] = (k%10)+48;
  4128  001C60  C010  F001         	movff	settime@k,___awmod@dividend
  4129  001C64  C011  F002         	movff	settime@k+1,___awmod@dividend+1
  4130  001C68  0E00               	movlw	0
  4131  001C6A  6E04               	movwf	___awmod@divisor+1,c
  4132  001C6C  0E0A               	movlw	10
  4133  001C6E  6E03               	movwf	___awmod@divisor,c
  4134  001C70  EC09  F00A         	call	___awmod	;wreg free
  4135  001C74  5001               	movf	?___awmod,w,c
  4136  001C76  0F30               	addlw	48
  4137  001C78  0101               	movlb	1	; () banked
  4138  001C7A  6FC4               	movwf	(_set+7)& (0+255),b
  4139                           
  4140                           ; BSR set to: 1
  4141                           ;settime.c: 73: set[6] = (k/10)+48;
  4142  001C7C  C010  F001         	movff	settime@k,___awdiv@dividend
  4143  001C80  C011  F002         	movff	settime@k+1,___awdiv@dividend+1
  4144  001C84  0E00               	movlw	0
  4145  001C86  6E04               	movwf	___awdiv@divisor+1,c
  4146  001C88  0E0A               	movlw	10
  4147  001C8A  6E03               	movwf	___awdiv@divisor,c
  4148  001C8C  ECF4  F00A         	call	___awdiv	;wreg free
  4149  001C90  5001               	movf	?___awdiv,w,c
  4150  001C92  0F30               	addlw	48
  4151  001C94  0101               	movlb	1	; () banked
  4152  001C96  6FC3               	movwf	(_set+6)& (0+255),b
  4153  001C98                     l3576:
  4154                           
  4155                           ;settime.c: 74: }
  4156                           ;settime.c: 75: if(flag == 2)
  4157  001C98  0E02               	movlw	2
  4158  001C9A  1818               	xorwf	settime@flag,w,c
  4159  001C9C  1019               	iorwf	settime@flag+1,w,c
  4160  001C9E  A4D8               	btfss	status,2,c
  4161  001CA0  D027               	goto	l3588
  4162                           
  4163                           ;settime.c: 76: {
  4164                           ;settime.c: 77: l++;
  4165  001CA2  4A12               	infsnz	settime@l,f,c
  4166  001CA4  2A13               	incf	settime@l+1,f,c
  4167                           
  4168                           ;settime.c: 78: if(l == 59)
  4169  001CA6  0E3B               	movlw	59
  4170  001CA8  1812               	xorwf	settime@l,w,c
  4171  001CAA  1013               	iorwf	settime@l+1,w,c
  4172  001CAC  A4D8               	btfss	status,2,c
  4173  001CAE  D004               	goto	l3584
  4174                           
  4175                           ;settime.c: 79: l = 0;
  4176  001CB0  0E00               	movlw	0
  4177  001CB2  6E13               	movwf	settime@l+1,c
  4178  001CB4  0E00               	movlw	0
  4179  001CB6  6E12               	movwf	settime@l,c
  4180  001CB8                     l3584:
  4181                           
  4182                           ;settime.c: 80: set[4] = (l%10)+'0';
  4183  001CB8  C012  F001         	movff	settime@l,___awmod@dividend
  4184  001CBC  C013  F002         	movff	settime@l+1,___awmod@dividend+1
  4185  001CC0  0E00               	movlw	0
  4186  001CC2  6E04               	movwf	___awmod@divisor+1,c
  4187  001CC4  0E0A               	movlw	10
  4188  001CC6  6E03               	movwf	___awmod@divisor,c
  4189  001CC8  EC09  F00A         	call	___awmod	;wreg free
  4190  001CCC  5001               	movf	?___awmod,w,c
  4191  001CCE  0F30               	addlw	48
  4192  001CD0  0101               	movlb	1	; () banked
  4193  001CD2  6FC1               	movwf	(_set+4)& (0+255),b
  4194                           
  4195                           ; BSR set to: 1
  4196                           ;settime.c: 81: set[3] = (l/10)+'0';
  4197  001CD4  C012  F001         	movff	settime@l,___awdiv@dividend
  4198  001CD8  C013  F002         	movff	settime@l+1,___awdiv@dividend+1
  4199  001CDC  0E00               	movlw	0
  4200  001CDE  6E04               	movwf	___awdiv@divisor+1,c
  4201  001CE0  0E0A               	movlw	10
  4202  001CE2  6E03               	movwf	___awdiv@divisor,c
  4203  001CE4  ECF4  F00A         	call	___awdiv	;wreg free
  4204  001CE8  5001               	movf	?___awdiv,w,c
  4205  001CEA  0F30               	addlw	48
  4206  001CEC  0101               	movlb	1	; () banked
  4207  001CEE  6FC0               	movwf	(_set+3)& (0+255),b
  4208  001CF0                     l3588:
  4209                           
  4210                           ;settime.c: 82: }
  4211                           ;settime.c: 83: if(flag == 3)
  4212  001CF0  0E03               	movlw	3
  4213  001CF2  1818               	xorwf	settime@flag,w,c
  4214  001CF4  1019               	iorwf	settime@flag+1,w,c
  4215  001CF6  A4D8               	btfss	status,2,c
  4216  001CF8  D027               	goto	l3600
  4217                           
  4218                           ;settime.c: 84: {
  4219                           ;settime.c: 85: m++;
  4220  001CFA  4A14               	infsnz	settime@m,f,c
  4221  001CFC  2A15               	incf	settime@m+1,f,c
  4222                           
  4223                           ;settime.c: 86: if(m == 24)
  4224  001CFE  0E18               	movlw	24
  4225  001D00  1814               	xorwf	settime@m,w,c
  4226  001D02  1015               	iorwf	settime@m+1,w,c
  4227  001D04  A4D8               	btfss	status,2,c
  4228  001D06  D004               	goto	l3596
  4229                           
  4230                           ;settime.c: 87: m = 0;
  4231  001D08  0E00               	movlw	0
  4232  001D0A  6E15               	movwf	settime@m+1,c
  4233  001D0C  0E00               	movlw	0
  4234  001D0E  6E14               	movwf	settime@m,c
  4235  001D10                     l3596:
  4236                           
  4237                           ;settime.c: 88: set[1] = (m%10)+'0';
  4238  001D10  C014  F001         	movff	settime@m,___awmod@dividend
  4239  001D14  C015  F002         	movff	settime@m+1,___awmod@dividend+1
  4240  001D18  0E00               	movlw	0
  4241  001D1A  6E04               	movwf	___awmod@divisor+1,c
  4242  001D1C  0E0A               	movlw	10
  4243  001D1E  6E03               	movwf	___awmod@divisor,c
  4244  001D20  EC09  F00A         	call	___awmod	;wreg free
  4245  001D24  5001               	movf	?___awmod,w,c
  4246  001D26  0F30               	addlw	48
  4247  001D28  0101               	movlb	1	; () banked
  4248  001D2A  6FBE               	movwf	(_set+1)& (0+255),b
  4249                           
  4250                           ; BSR set to: 1
  4251                           ;settime.c: 89: set[0] = (m/10)+'0';
  4252  001D2C  C014  F001         	movff	settime@m,___awdiv@dividend
  4253  001D30  C015  F002         	movff	settime@m+1,___awdiv@dividend+1
  4254  001D34  0E00               	movlw	0
  4255  001D36  6E04               	movwf	___awdiv@divisor+1,c
  4256  001D38  0E0A               	movlw	10
  4257  001D3A  6E03               	movwf	___awdiv@divisor,c
  4258  001D3C  ECF4  F00A         	call	___awdiv	;wreg free
  4259  001D40  5001               	movf	?___awdiv,w,c
  4260  001D42  0F30               	addlw	48
  4261  001D44  0101               	movlb	1	; () banked
  4262  001D46  6FBD               	movwf	_set& (0+255),b
  4263  001D48                     l3600:
  4264                           
  4265                           ;settime.c: 90: }
  4266                           ;settime.c: 91: }
  4267                           ;settime.c: 92: if(key == 12)
  4268  001D48  0E0C               	movlw	12
  4269  001D4A  180E               	xorwf	settime@key,w,c
  4270  001D4C  100F               	iorwf	settime@key+1,w,c
  4271  001D4E  A4D8               	btfss	status,2,c
  4272  001D50  D017               	goto	l3612
  4273                           
  4274                           ;settime.c: 93: {
  4275                           ;settime.c: 94: clcd_print(set,(0xC0 + (0)));
  4276  001D52  0EBD               	movlw	low _set
  4277  001D54  6E07               	movwf	clcd_print@data,c
  4278  001D56  0E01               	movlw	high _set
  4279  001D58  6E08               	movwf	clcd_print@data+1,c
  4280  001D5A  0EC0               	movlw	192
  4281  001D5C  6E09               	movwf	clcd_print@addr,c
  4282  001D5E  ECA5  F009         	call	_clcd_print	;wreg free
  4283                           
  4284                           ;settime.c: 95: flag++;
  4285  001D62  4A18               	infsnz	settime@flag,f,c
  4286  001D64  2A19               	incf	settime@flag+1,f,c
  4287                           
  4288                           ;settime.c: 96: blink = 0;
  4289  001D66  0E00               	movlw	0
  4290  001D68  6E17               	movwf	settime@blink+1,c
  4291  001D6A  0E00               	movlw	0
  4292  001D6C  6E16               	movwf	settime@blink,c
  4293                           
  4294                           ;settime.c: 97: if(flag == 4)
  4295  001D6E  0E04               	movlw	4
  4296  001D70  1818               	xorwf	settime@flag,w,c
  4297  001D72  1019               	iorwf	settime@flag+1,w,c
  4298  001D74  A4D8               	btfss	status,2,c
  4299  001D76  D004               	goto	l3612
  4300                           
  4301                           ;settime.c: 98: flag = 1;
  4302  001D78  0E00               	movlw	0
  4303  001D7A  6E19               	movwf	settime@flag+1,c
  4304  001D7C  0E01               	movlw	1
  4305  001D7E  6E18               	movwf	settime@flag,c
  4306  001D80                     l3612:
  4307                           
  4308                           ;settime.c: 99: }
  4309                           ;settime.c: 100: if(key == 9)
  4310  001D80  0E09               	movlw	9
  4311  001D82  180E               	xorwf	settime@key,w,c
  4312  001D84  100F               	iorwf	settime@key+1,w,c
  4313  001D86  B4D8               	btfsc	status,2,c
  4314  001D88  0012               	return	
  4315  001D8A  D6C9               	goto	l3524
  4316  001D8C                     __end_of_settime:
  4317                           	opt stack 0
  4318                           tblptru	equ	0xFF8
  4319                           tblptrh	equ	0xFF7
  4320                           tblptrl	equ	0xFF6
  4321                           tablat	equ	0xFF5
  4322                           postinc0	equ	0xFEE
  4323                           wreg	equ	0xFE8
  4324                           indf1	equ	0xFE7
  4325                           postdec1	equ	0xFE5
  4326                           plusw1	equ	0xFE3
  4327                           fsr1h	equ	0xFE2
  4328                           fsr1l	equ	0xFE1
  4329                           indf2	equ	0xFDF
  4330                           plusw2	equ	0xFDB
  4331                           fsr2h	equ	0xFDA
  4332                           fsr2l	equ	0xFD9
  4333                           status	equ	0xFD8
  4334                           
  4335 ;; *************** function ___awmod *****************
  4336 ;; Defined at:
  4337 ;;		line 8 in file "/opt/microchip/xc8/v1.36/sources/common/awmod.c"
  4338 ;; Parameters:    Size  Location     Type
  4339 ;;  dividend        2    0[COMRAM] int 
  4340 ;;  divisor         2    2[COMRAM] int 
  4341 ;; Auto vars:     Size  Location     Type
  4342 ;;  sign            1    5[COMRAM] unsigned char 
  4343 ;;  counter         1    4[COMRAM] unsigned char 
  4344 ;; Return value:  Size  Location     Type
  4345 ;;                  2    0[COMRAM] int 
  4346 ;; Registers used:
  4347 ;;		wreg, status,2, status,0
  4348 ;; Tracked objects:
  4349 ;;		On entry : 0/0
  4350 ;;		On exit  : 0/0
  4351 ;;		Unchanged: 0/0
  4352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4353 ;;      Params:         4       0       0       0       0       0       0
  4354 ;;      Locals:         2       0       0       0       0       0       0
  4355 ;;      Temps:          0       0       0       0       0       0       0
  4356 ;;      Totals:         6       0       0       0       0       0       0
  4357 ;;Total ram usage:        6 bytes
  4358 ;; Hardware stack levels used:    1
  4359 ;; This function calls:
  4360 ;;		Nothing
  4361 ;; This function is called by:
  4362 ;;		_settime
  4363 ;; This function uses a non-reentrant model
  4364 ;;
  4365                           
  4366                           	psect	text4
  4367  001412                     __ptext4:
  4368                           	opt stack 0
  4369  001412                     ___awmod:
  4370                           	opt stack 29
  4371                           
  4372                           ;incstack = 0
  4373  001412  0E00               	movlw	0
  4374  001414  6E06               	movwf	___awmod@sign,c
  4375  001416  AE02               	btfss	___awmod@dividend+1,7,c
  4376  001418  D006               	goto	l3028
  4377  00141A  6C01               	negf	___awmod@dividend,c
  4378  00141C  1E02               	comf	___awmod@dividend+1,f,c
  4379  00141E  B0D8               	btfsc	status,0,c
  4380  001420  2A02               	incf	___awmod@dividend+1,f,c
  4381  001422  0E01               	movlw	1
  4382  001424  6E06               	movwf	___awmod@sign,c
  4383  001426                     l3028:
  4384  001426  AE04               	btfss	___awmod@divisor+1,7,c
  4385  001428  D004               	goto	l3032
  4386  00142A  6C03               	negf	___awmod@divisor,c
  4387  00142C  1E04               	comf	___awmod@divisor+1,f,c
  4388  00142E  B0D8               	btfsc	status,0,c
  4389  001430  2A04               	incf	___awmod@divisor+1,f,c
  4390  001432                     l3032:
  4391  001432  5003               	movf	___awmod@divisor,w,c
  4392  001434  1004               	iorwf	___awmod@divisor+1,w,c
  4393  001436  B4D8               	btfsc	status,2,c
  4394  001438  D018               	goto	l3048
  4395  00143A  0E01               	movlw	1
  4396  00143C  6E05               	movwf	___awmod@counter,c
  4397  00143E  D004               	goto	l3038
  4398  001440                     l3036:
  4399  001440  90D8               	bcf	status,0,c
  4400  001442  3603               	rlcf	___awmod@divisor,f,c
  4401  001444  3604               	rlcf	___awmod@divisor+1,f,c
  4402  001446  2A05               	incf	___awmod@counter,f,c
  4403  001448                     l3038:
  4404  001448  AE04               	btfss	___awmod@divisor+1,7,c
  4405  00144A  D7FA               	goto	l3036
  4406  00144C                     l3040:
  4407  00144C  5003               	movf	___awmod@divisor,w,c
  4408  00144E  5C01               	subwf	___awmod@dividend,w,c
  4409  001450  5004               	movf	___awmod@divisor+1,w,c
  4410  001452  5802               	subwfb	___awmod@dividend+1,w,c
  4411  001454  A0D8               	btfss	status,0,c
  4412  001456  D004               	goto	l3044
  4413  001458  5003               	movf	___awmod@divisor,w,c
  4414  00145A  5E01               	subwf	___awmod@dividend,f,c
  4415  00145C  5004               	movf	___awmod@divisor+1,w,c
  4416  00145E  5A02               	subwfb	___awmod@dividend+1,f,c
  4417  001460                     l3044:
  4418  001460  90D8               	bcf	status,0,c
  4419  001462  3204               	rrcf	___awmod@divisor+1,f,c
  4420  001464  3203               	rrcf	___awmod@divisor,f,c
  4421  001466  2E05               	decfsz	___awmod@counter,f,c
  4422  001468  D7F1               	goto	l3040
  4423  00146A                     l3048:
  4424  00146A  5006               	movf	___awmod@sign,w,c
  4425  00146C  B4D8               	btfsc	status,2,c
  4426  00146E  D004               	goto	l3052
  4427  001470  6C01               	negf	___awmod@dividend,c
  4428  001472  1E02               	comf	___awmod@dividend+1,f,c
  4429  001474  B0D8               	btfsc	status,0,c
  4430  001476  2A02               	incf	___awmod@dividend+1,f,c
  4431  001478                     l3052:
  4432  001478  C001  F001         	movff	___awmod@dividend,?___awmod
  4433  00147C  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4434  001480  0012               	return	
  4435  001482                     __end_of___awmod:
  4436                           	opt stack 0
  4437                           tblptru	equ	0xFF8
  4438                           tblptrh	equ	0xFF7
  4439                           tblptrl	equ	0xFF6
  4440                           tablat	equ	0xFF5
  4441                           postinc0	equ	0xFEE
  4442                           wreg	equ	0xFE8
  4443                           indf1	equ	0xFE7
  4444                           postdec1	equ	0xFE5
  4445                           plusw1	equ	0xFE3
  4446                           fsr1h	equ	0xFE2
  4447                           fsr1l	equ	0xFE1
  4448                           indf2	equ	0xFDF
  4449                           plusw2	equ	0xFDB
  4450                           fsr2h	equ	0xFDA
  4451                           fsr2l	equ	0xFD9
  4452                           status	equ	0xFD8
  4453                           
  4454 ;; *************** function ___awdiv *****************
  4455 ;; Defined at:
  4456 ;;		line 8 in file "/opt/microchip/xc8/v1.36/sources/common/awdiv.c"
  4457 ;; Parameters:    Size  Location     Type
  4458 ;;  dividend        2    0[COMRAM] int 
  4459 ;;  divisor         2    2[COMRAM] int 
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;  quotient        2    6[COMRAM] int 
  4462 ;;  sign            1    5[COMRAM] unsigned char 
  4463 ;;  counter         1    4[COMRAM] unsigned char 
  4464 ;; Return value:  Size  Location     Type
  4465 ;;                  2    0[COMRAM] int 
  4466 ;; Registers used:
  4467 ;;		wreg, status,2, status,0
  4468 ;; Tracked objects:
  4469 ;;		On entry : 0/0
  4470 ;;		On exit  : 0/0
  4471 ;;		Unchanged: 0/0
  4472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4473 ;;      Params:         4       0       0       0       0       0       0
  4474 ;;      Locals:         4       0       0       0       0       0       0
  4475 ;;      Temps:          0       0       0       0       0       0       0
  4476 ;;      Totals:         8       0       0       0       0       0       0
  4477 ;;Total ram usage:        8 bytes
  4478 ;; Hardware stack levels used:    1
  4479 ;; This function calls:
  4480 ;;		Nothing
  4481 ;; This function is called by:
  4482 ;;		_settime
  4483 ;; This function uses a non-reentrant model
  4484 ;;
  4485                           
  4486                           	psect	text5
  4487  0015E8                     __ptext5:
  4488                           	opt stack 0
  4489  0015E8                     ___awdiv:
  4490                           	opt stack 29
  4491                           
  4492                           ;incstack = 0
  4493  0015E8  0E00               	movlw	0
  4494  0015EA  6E06               	movwf	___awdiv@sign,c
  4495  0015EC  AE04               	btfss	___awdiv@divisor+1,7,c
  4496  0015EE  D006               	goto	l2984
  4497  0015F0  6C03               	negf	___awdiv@divisor,c
  4498  0015F2  1E04               	comf	___awdiv@divisor+1,f,c
  4499  0015F4  B0D8               	btfsc	status,0,c
  4500  0015F6  2A04               	incf	___awdiv@divisor+1,f,c
  4501  0015F8  0E01               	movlw	1
  4502  0015FA  6E06               	movwf	___awdiv@sign,c
  4503  0015FC                     l2984:
  4504  0015FC  AE02               	btfss	___awdiv@dividend+1,7,c
  4505  0015FE  D006               	goto	l2990
  4506  001600  6C01               	negf	___awdiv@dividend,c
  4507  001602  1E02               	comf	___awdiv@dividend+1,f,c
  4508  001604  B0D8               	btfsc	status,0,c
  4509  001606  2A02               	incf	___awdiv@dividend+1,f,c
  4510  001608  0E01               	movlw	1
  4511  00160A  1A06               	xorwf	___awdiv@sign,f,c
  4512  00160C                     l2990:
  4513  00160C  0E00               	movlw	0
  4514  00160E  6E08               	movwf	___awdiv@quotient+1,c
  4515  001610  0E00               	movlw	0
  4516  001612  6E07               	movwf	___awdiv@quotient,c
  4517  001614  5003               	movf	___awdiv@divisor,w,c
  4518  001616  1004               	iorwf	___awdiv@divisor+1,w,c
  4519  001618  B4D8               	btfsc	status,2,c
  4520  00161A  D01C               	goto	l3012
  4521  00161C  0E01               	movlw	1
  4522  00161E  6E05               	movwf	___awdiv@counter,c
  4523  001620  D004               	goto	l2998
  4524  001622                     l2996:
  4525  001622  90D8               	bcf	status,0,c
  4526  001624  3603               	rlcf	___awdiv@divisor,f,c
  4527  001626  3604               	rlcf	___awdiv@divisor+1,f,c
  4528  001628  2A05               	incf	___awdiv@counter,f,c
  4529  00162A                     l2998:
  4530  00162A  AE04               	btfss	___awdiv@divisor+1,7,c
  4531  00162C  D7FA               	goto	l2996
  4532  00162E                     l3000:
  4533  00162E  90D8               	bcf	status,0,c
  4534  001630  3607               	rlcf	___awdiv@quotient,f,c
  4535  001632  3608               	rlcf	___awdiv@quotient+1,f,c
  4536  001634  5003               	movf	___awdiv@divisor,w,c
  4537  001636  5C01               	subwf	___awdiv@dividend,w,c
  4538  001638  5004               	movf	___awdiv@divisor+1,w,c
  4539  00163A  5802               	subwfb	___awdiv@dividend+1,w,c
  4540  00163C  A0D8               	btfss	status,0,c
  4541  00163E  D005               	goto	l3008
  4542  001640  5003               	movf	___awdiv@divisor,w,c
  4543  001642  5E01               	subwf	___awdiv@dividend,f,c
  4544  001644  5004               	movf	___awdiv@divisor+1,w,c
  4545  001646  5A02               	subwfb	___awdiv@dividend+1,f,c
  4546  001648  8007               	bsf	___awdiv@quotient,0,c
  4547  00164A                     l3008:
  4548  00164A  90D8               	bcf	status,0,c
  4549  00164C  3204               	rrcf	___awdiv@divisor+1,f,c
  4550  00164E  3203               	rrcf	___awdiv@divisor,f,c
  4551  001650  2E05               	decfsz	___awdiv@counter,f,c
  4552  001652  D7ED               	goto	l3000
  4553  001654                     l3012:
  4554  001654  5006               	movf	___awdiv@sign,w,c
  4555  001656  B4D8               	btfsc	status,2,c
  4556  001658  D004               	goto	l3016
  4557  00165A  6C07               	negf	___awdiv@quotient,c
  4558  00165C  1E08               	comf	___awdiv@quotient+1,f,c
  4559  00165E  B0D8               	btfsc	status,0,c
  4560  001660  2A08               	incf	___awdiv@quotient+1,f,c
  4561  001662                     l3016:
  4562  001662  C007  F001         	movff	___awdiv@quotient,?___awdiv
  4563  001666  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  4564  00166A  0012               	return	
  4565  00166C                     __end_of___awdiv:
  4566                           	opt stack 0
  4567                           tblptru	equ	0xFF8
  4568                           tblptrh	equ	0xFF7
  4569                           tblptrl	equ	0xFF6
  4570                           tablat	equ	0xFF5
  4571                           postinc0	equ	0xFEE
  4572                           wreg	equ	0xFE8
  4573                           indf1	equ	0xFE7
  4574                           postdec1	equ	0xFE5
  4575                           plusw1	equ	0xFE3
  4576                           fsr1h	equ	0xFE2
  4577                           fsr1l	equ	0xFE1
  4578                           indf2	equ	0xFDF
  4579                           plusw2	equ	0xFDB
  4580                           fsr2h	equ	0xFDA
  4581                           fsr2l	equ	0xFD9
  4582                           status	equ	0xFD8
  4583                           
  4584 ;; *************** function _read_adc *****************
  4585 ;; Defined at:
  4586 ;;		line 41 in file "adc.c"
  4587 ;; Parameters:    Size  Location     Type
  4588 ;;  channel         1    wreg     unsigned char 
  4589 ;; Auto vars:     Size  Location     Type
  4590 ;;  channel         1    6[COMRAM] unsigned char 
  4591 ;;  reg_val         2    4[COMRAM] unsigned short 
  4592 ;; Return value:  Size  Location     Type
  4593 ;;                  2    0[COMRAM] unsigned short 
  4594 ;; Registers used:
  4595 ;;		wreg, status,2, status,0
  4596 ;; Tracked objects:
  4597 ;;		On entry : 0/0
  4598 ;;		On exit  : 0/0
  4599 ;;		Unchanged: 0/0
  4600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4601 ;;      Params:         2       0       0       0       0       0       0
  4602 ;;      Locals:         3       0       0       0       0       0       0
  4603 ;;      Temps:          2       0       0       0       0       0       0
  4604 ;;      Totals:         7       0       0       0       0       0       0
  4605 ;;Total ram usage:        7 bytes
  4606 ;; Hardware stack levels used:    1
  4607 ;; This function calls:
  4608 ;;		Nothing
  4609 ;; This function is called by:
  4610 ;;		_main
  4611 ;; This function uses a non-reentrant model
  4612 ;;
  4613                           
  4614                           	psect	text6
  4615  001106                     __ptext6:
  4616                           	opt stack 0
  4617  001106                     _read_adc:
  4618                           	opt stack 30
  4619                           
  4620                           ;incstack = 0
  4621                           ;read_adc@channel stored from wreg
  4622  001106  6E07               	movwf	read_adc@channel,c
  4623                           
  4624                           ;adc.c: 43: unsigned short reg_val;
  4625                           ;adc.c: 45: ADCON0 = (ADCON0 & 0xC3) | (channel << 2);
  4626  001108  C007  F003         	movff	read_adc@channel,??_read_adc
  4627  00110C  90D8               	bcf	status,0,c
  4628  00110E  3603               	rlcf	??_read_adc,f,c
  4629  001110  90D8               	bcf	status,0,c
  4630  001112  3603               	rlcf	??_read_adc,f,c
  4631  001114  50C2               	movf	4034,w,c	;volatile
  4632  001116  0BC3               	andlw	195
  4633  001118  1003               	iorwf	??_read_adc,w,c
  4634  00111A  6EC2               	movwf	4034,c	;volatile
  4635                           
  4636                           ;adc.c: 47: GO = 1;
  4637  00111C  82C2               	bsf	4034,1,c	;volatile
  4638  00111E                     l619:
  4639  00111E  B2C2               	btfsc	4034,1,c	;volatile
  4640  001120  D7FE               	goto	l619
  4641                           
  4642                           ;adc.c: 49: reg_val = (ADRESH << 8) | ADRESL;
  4643  001122  50C3               	movf	4035,w,c	;volatile
  4644  001124  CFC4 F003          	movff	4036,??_read_adc	;volatile
  4645  001128  6A04               	clrf	(??_read_adc+1)& (0+255),c
  4646  00112A  C003  F004         	movff	??_read_adc,??_read_adc+1
  4647  00112E  6A03               	clrf	??_read_adc,c
  4648  001130  1003               	iorwf	??_read_adc,w,c
  4649  001132  6E05               	movwf	read_adc@reg_val,c
  4650  001134  5004               	movf	??_read_adc+1,w,c
  4651  001136  6E06               	movwf	read_adc@reg_val+1,c
  4652                           
  4653                           ;adc.c: 51: return reg_val;
  4654  001138  C005  F001         	movff	read_adc@reg_val,?_read_adc
  4655  00113C  C006  F002         	movff	read_adc@reg_val+1,?_read_adc+1
  4656  001140  0012               	return	
  4657  001142                     __end_of_read_adc:
  4658                           	opt stack 0
  4659                           tblptru	equ	0xFF8
  4660                           tblptrh	equ	0xFF7
  4661                           tblptrl	equ	0xFF6
  4662                           tablat	equ	0xFF5
  4663                           postinc0	equ	0xFEE
  4664                           wreg	equ	0xFE8
  4665                           indf1	equ	0xFE7
  4666                           postdec1	equ	0xFE5
  4667                           plusw1	equ	0xFE3
  4668                           fsr1h	equ	0xFE2
  4669                           fsr1l	equ	0xFE1
  4670                           indf2	equ	0xFDF
  4671                           plusw2	equ	0xFDB
  4672                           fsr2h	equ	0xFDA
  4673                           fsr2l	equ	0xFD9
  4674                           status	equ	0xFD8
  4675                           
  4676 ;; *************** function _pass *****************
  4677 ;; Defined at:
  4678 ;;		line 6 in file "pass.c"
  4679 ;; Parameters:    Size  Location     Type
  4680 ;;		None
  4681 ;; Auto vars:     Size  Location     Type
  4682 ;;  i               4   33[COMRAM] long 
  4683 ;;  i               2   45[COMRAM] int 
  4684 ;;  i               2   24[COMRAM] int 
  4685 ;;  str2            9   15[COMRAM] unsigned char [9]
  4686 ;;  k               2   47[COMRAM] unsigned int 
  4687 ;;  flag            2   42[COMRAM] unsigned int 
  4688 ;;  j               2   40[COMRAM] unsigned int 
  4689 ;;  blink           2   37[COMRAM] unsigned int 
  4690 ;;  delay           2   30[COMRAM] unsigned int 
  4691 ;;  t               2   28[COMRAM] unsigned int 
  4692 ;;  m               2   26[COMRAM] unsigned int 
  4693 ;;  y               2   13[COMRAM] unsigned int 
  4694 ;;  i               2   11[COMRAM] unsigned int 
  4695 ;;  try             1   44[COMRAM] unsigned char 
  4696 ;;  key             1   39[COMRAM] unsigned char 
  4697 ;;  input           1   32[COMRAM] unsigned char 
  4698 ;; Return value:  Size  Location     Type
  4699 ;;                  2  191[None  ] int 
  4700 ;; Registers used:
  4701 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4702 ;; Tracked objects:
  4703 ;;		On entry : 0/0
  4704 ;;		On exit  : 0/0
  4705 ;;		Unchanged: 0/0
  4706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4707 ;;      Params:         0       0       0       0       0       0       0
  4708 ;;      Locals:        38       0       0       0       0       0       0
  4709 ;;      Temps:          2       0       0       0       0       0       0
  4710 ;;      Totals:        40       0       0       0       0       0       0
  4711 ;;Total ram usage:       40 bytes
  4712 ;; Hardware stack levels used:    1
  4713 ;; Hardware stack levels required when called:    2
  4714 ;; This function calls:
  4715 ;;		_clcd_print
  4716 ;;		_clcd_putch
  4717 ;;		_read_switches
  4718 ;; This function is called by:
  4719 ;;		_main
  4720 ;; This function uses a non-reentrant model
  4721 ;;
  4722                           
  4723                           	psect	text7
  4724  001D8C                     __ptext7:
  4725                           	opt stack 0
  4726  001D8C                     _pass:
  4727                           	opt stack 28
  4728                           
  4729                           ;pass.c: 8: unsigned char key;
  4730                           ;pass.c: 9: unsigned char input='0',try='5';
  4731                           
  4732                           ;incstack = 0
  4733  001D8C  0E30               	movlw	48
  4734  001D8E  6E21               	movwf	pass@input,c
  4735  001D90  0E35               	movlw	53
  4736  001D92  6E2D               	movwf	pass@try,c
  4737                           
  4738                           ;pass.c: 10: unsigned int i=0,j=0,flag=1,m=0,t=0,k=0,blink=0,delay=0,y=0;
  4739  001D94  0E00               	movlw	0
  4740  001D96  6E0D               	movwf	pass@i+1,c
  4741  001D98  0E00               	movlw	0
  4742  001D9A  6E0C               	movwf	pass@i,c
  4743  001D9C  0E00               	movlw	0
  4744  001D9E  6E2A               	movwf	pass@j+1,c
  4745  001DA0  0E00               	movlw	0
  4746  001DA2  6E29               	movwf	pass@j,c
  4747  001DA4  0E00               	movlw	0
  4748  001DA6  6E2C               	movwf	pass@flag+1,c
  4749  001DA8  0E01               	movlw	1
  4750  001DAA  6E2B               	movwf	pass@flag,c
  4751  001DAC  0E00               	movlw	0
  4752  001DAE  6E1C               	movwf	pass@m+1,c
  4753  001DB0  0E00               	movlw	0
  4754  001DB2  6E1B               	movwf	pass@m,c
  4755  001DB4  0E00               	movlw	0
  4756  001DB6  6E1E               	movwf	pass@t+1,c
  4757  001DB8  0E00               	movlw	0
  4758  001DBA  6E1D               	movwf	pass@t,c
  4759  001DBC  0E00               	movlw	0
  4760  001DBE  6E31               	movwf	pass@k+1,c
  4761  001DC0  0E00               	movlw	0
  4762  001DC2  6E30               	movwf	pass@k,c
  4763  001DC4  0E00               	movlw	0
  4764  001DC6  6E27               	movwf	pass@blink+1,c
  4765  001DC8  0E00               	movlw	0
  4766  001DCA  6E26               	movwf	pass@blink,c
  4767  001DCC  0E00               	movlw	0
  4768  001DCE  6E20               	movwf	pass@delay+1,c
  4769  001DD0  0E00               	movlw	0
  4770  001DD2  6E1F               	movwf	pass@delay,c
  4771  001DD4  0E00               	movlw	0
  4772  001DD6  6E0F               	movwf	pass@y+1,c
  4773  001DD8  0E00               	movlw	0
  4774  001DDA  6E0E               	movwf	pass@y,c
  4775                           
  4776                           ;pass.c: 11: unsigned char str2[9]="00000000";
  4777  001DDC  EE20  F0CF         	lfsr	2,pass@F15952
  4778  001DE0  EE10  F010         	lfsr	1,pass@str2
  4779  001DE4  0E08               	movlw	8
  4780  001DE6                     u2801:
  4781  001DE6  CFDB FFE3          	movff	plusw2,plusw1
  4782  001DEA  06E8               	decf	wreg,f,c
  4783  001DEC  E2FC               	bc	u2801
  4784                           
  4785                           ;pass.c: 12: clcd_print("Enter Password  ", (0x80 + (0)));
  4786  001DEE  0E46               	movlw	low STR_24
  4787  001DF0  6E07               	movwf	clcd_print@data,c
  4788  001DF2  0E2F               	movlw	high STR_24
  4789  001DF4  6E08               	movwf	clcd_print@data+1,c
  4790  001DF6  0E80               	movlw	128
  4791  001DF8  6E09               	movwf	clcd_print@addr,c
  4792  001DFA  ECA5  F009         	call	_clcd_print	;wreg free
  4793                           
  4794                           ;pass.c: 13: clcd_print("                ",(0xC0 + (0)));
  4795  001DFE  0EFF               	movlw	low (STR_32+2)
  4796  001E00  6E07               	movwf	clcd_print@data,c
  4797  001E02  0E2E               	movlw	high (STR_32+2)
  4798  001E04  6E08               	movwf	clcd_print@data+1,c
  4799  001E06  0EC0               	movlw	192
  4800  001E08  6E09               	movwf	clcd_print@addr,c
  4801  001E0A  ECA5  F009         	call	_clcd_print	;wreg free
  4802  001E0E                     l3266:
  4803                           
  4804                           ;pass.c: 15: {
  4805                           ;pass.c: 16: if(try > '0')
  4806  001E0E  0E30               	movlw	48
  4807  001E10  642D               	cpfsgt	pass@try,c
  4808  001E12  D0F5               	goto	l3352
  4809                           
  4810                           ;pass.c: 17: {
  4811                           ;pass.c: 18: key = read_switches(1);
  4812  001E14  0E01               	movlw	1
  4813  001E16  ECA1  F008         	call	_read_switches
  4814  001E1A  6E28               	movwf	pass@key,c
  4815                           
  4816                           ;pass.c: 19: if(input < '8')
  4817  001E1C  0E38               	movlw	56
  4818  001E1E  6021               	cpfslt	pass@input,c
  4819  001E20  D05F               	goto	l3306
  4820                           
  4821                           ;pass.c: 20: {
  4822                           ;pass.c: 21: if(blink++ < 500)
  4823  001E22  5026               	movf	pass@blink,w,c
  4824  001E24  6E0A               	movwf	??_pass& (0+255),c
  4825  001E26  5027               	movf	pass@blink+1,w,c
  4826  001E28  6E0B               	movwf	(??_pass+1)& (0+255),c
  4827  001E2A  4A26               	infsnz	pass@blink,f,c
  4828  001E2C  2A27               	incf	pass@blink+1,f,c
  4829  001E2E  0EF4               	movlw	244
  4830  001E30  5C0A               	subwf	??_pass,w,c
  4831  001E32  0E01               	movlw	1
  4832  001E34  580B               	subwfb	??_pass+1,w,c
  4833  001E36  B0D8               	btfsc	status,0,c
  4834  001E38  D00A               	goto	l3276
  4835                           
  4836                           ;pass.c: 22: {
  4837                           ;pass.c: 23: clcd_print(" ",(0xC0 + (k)));
  4838  001E3A  0E0E               	movlw	low (STR_32+17)
  4839  001E3C  6E07               	movwf	clcd_print@data,c
  4840  001E3E  0E2F               	movlw	high (STR_32+17)
  4841  001E40  6E08               	movwf	clcd_print@data+1,c
  4842  001E42  5030               	movf	pass@k,w,c
  4843  001E44  0FC0               	addlw	192
  4844  001E46  6E09               	movwf	clcd_print@addr,c
  4845  001E48  ECA5  F009         	call	_clcd_print	;wreg free
  4846                           
  4847                           ;pass.c: 24: }
  4848  001E4C  D014               	goto	l3282
  4849  001E4E                     l3276:
  4850                           
  4851                           ;pass.c: 25: else
  4852                           ;pass.c: 26: {
  4853                           ;pass.c: 27: if(blink == 1000)
  4854  001E4E  0EE8               	movlw	232
  4855  001E50  1826               	xorwf	pass@blink,w,c
  4856  001E52  E108               	bnz	l3280
  4857  001E54  0E03               	movlw	3
  4858  001E56  1827               	xorwf	pass@blink+1,w,c
  4859  001E58  A4D8               	btfss	status,2,c
  4860  001E5A  D004               	goto	l3280
  4861                           
  4862                           ;pass.c: 28: blink = 0;
  4863  001E5C  0E00               	movlw	0
  4864  001E5E  6E27               	movwf	pass@blink+1,c
  4865  001E60  0E00               	movlw	0
  4866  001E62  6E26               	movwf	pass@blink,c
  4867  001E64                     l3280:
  4868                           
  4869                           ;pass.c: 29: clcd_print("_",(0xC0 + (k)));
  4870  001E64  0EFD               	movlw	low STR_3
  4871  001E66  6E07               	movwf	clcd_print@data,c
  4872  001E68  0E2F               	movlw	high STR_3
  4873  001E6A  6E08               	movwf	clcd_print@data+1,c
  4874  001E6C  5030               	movf	pass@k,w,c
  4875  001E6E  0FC0               	addlw	192
  4876  001E70  6E09               	movwf	clcd_print@addr,c
  4877  001E72  ECA5  F009         	call	_clcd_print	;wreg free
  4878  001E76                     l3282:
  4879                           
  4880                           ;pass.c: 30: }
  4881                           ;pass.c: 31: if(key == 8)
  4882  001E76  0E08               	movlw	8
  4883  001E78  1828               	xorwf	pass@key,w,c
  4884  001E7A  A4D8               	btfss	status,2,c
  4885  001E7C  D016               	goto	l3294
  4886                           
  4887                           ;pass.c: 32: {
  4888                           ;pass.c: 33: input++;
  4889  001E7E  2A21               	incf	pass@input,f,c
  4890                           
  4891                           ;pass.c: 34: str2[j]='1';
  4892  001E80  0E10               	movlw	low pass@str2
  4893  001E82  2429               	addwf	pass@j,w,c
  4894  001E84  6ED9               	movwf	fsr2l,c
  4895  001E86  0E00               	movlw	high pass@str2
  4896  001E88  202A               	addwfc	pass@j+1,w,c
  4897  001E8A  6EDA               	movwf	fsr2h,c
  4898  001E8C  0E31               	movlw	49
  4899  001E8E  6EDF               	movwf	indf2,c
  4900                           
  4901                           ;pass.c: 35: j++;
  4902  001E90  4A29               	infsnz	pass@j,f,c
  4903  001E92  2A2A               	incf	pass@j+1,f,c
  4904                           
  4905                           ;pass.c: 36: clcd_print("*", (0xC0 + (k)));
  4906  001E94  0EFB               	movlw	low STR_4
  4907  001E96  6E07               	movwf	clcd_print@data,c
  4908  001E98  0E2F               	movlw	high STR_4
  4909  001E9A  6E08               	movwf	clcd_print@data+1,c
  4910  001E9C  5030               	movf	pass@k,w,c
  4911  001E9E  0FC0               	addlw	192
  4912  001EA0  6E09               	movwf	clcd_print@addr,c
  4913  001EA2  ECA5  F009         	call	_clcd_print	;wreg free
  4914                           
  4915                           ;pass.c: 37: k++;
  4916  001EA6  4A30               	infsnz	pass@k,f,c
  4917  001EA8  2A31               	incf	pass@k+1,f,c
  4918  001EAA                     l3294:
  4919                           
  4920                           ;pass.c: 38: }
  4921                           ;pass.c: 39: if(key == 9)
  4922  001EAA  0E09               	movlw	9
  4923  001EAC  1828               	xorwf	pass@key,w,c
  4924  001EAE  A4D8               	btfss	status,2,c
  4925  001EB0  D0D6               	goto	l3372
  4926                           
  4927                           ;pass.c: 40: {
  4928                           ;pass.c: 41: input++;
  4929  001EB2  2A21               	incf	pass@input,f,c
  4930                           
  4931                           ;pass.c: 42: str2[j]='0';
  4932  001EB4  0E10               	movlw	low pass@str2
  4933  001EB6  2429               	addwf	pass@j,w,c
  4934  001EB8  6ED9               	movwf	fsr2l,c
  4935  001EBA  0E00               	movlw	high pass@str2
  4936  001EBC  202A               	addwfc	pass@j+1,w,c
  4937  001EBE  6EDA               	movwf	fsr2h,c
  4938  001EC0  0E30               	movlw	48
  4939  001EC2  6EDF               	movwf	indf2,c
  4940                           
  4941                           ;pass.c: 43: j++;
  4942  001EC4  4A29               	infsnz	pass@j,f,c
  4943  001EC6  2A2A               	incf	pass@j+1,f,c
  4944                           
  4945                           ;pass.c: 44: clcd_print("*", (0xC0 + (k)));
  4946  001EC8  0EFB               	movlw	low STR_4
  4947  001ECA  6E07               	movwf	clcd_print@data,c
  4948  001ECC  0E2F               	movlw	high STR_4
  4949  001ECE  6E08               	movwf	clcd_print@data+1,c
  4950  001ED0  5030               	movf	pass@k,w,c
  4951  001ED2  0FC0               	addlw	192
  4952  001ED4  6E09               	movwf	clcd_print@addr,c
  4953  001ED6  ECA5  F009         	call	_clcd_print	;wreg free
  4954                           
  4955                           ;pass.c: 45: k++;
  4956  001EDA  4A30               	infsnz	pass@k,f,c
  4957  001EDC  2A31               	incf	pass@k+1,f,c
  4958                           
  4959                           ;pass.c: 46: }
  4960                           ;pass.c: 47: }
  4961  001EDE  D0BF               	goto	l3372
  4962  001EE0                     l3306:
  4963                           
  4964                           ;pass.c: 48: else
  4965                           ;pass.c: 49: {
  4966                           ;pass.c: 50: for( int i = 0; i<8; i++ )
  4967  001EE0  0E00               	movlw	0
  4968  001EE2  6E2F               	movwf	pass@i_366+1,c
  4969  001EE4  0E00               	movlw	0
  4970  001EE6  6E2E               	movwf	pass@i_366,c
  4971  001EE8                     l3308:
  4972  001EE8  BE2F               	btfsc	pass@i_366+1,7,c
  4973  001EEA  D006               	goto	l3312
  4974  001EEC  502F               	movf	pass@i_366+1,w,c
  4975  001EEE  E11B               	bnz	l3320
  4976  001EF0  0E08               	movlw	8
  4977  001EF2  5C2E               	subwf	pass@i_366,w,c
  4978  001EF4  B0D8               	btfsc	status,0,c
  4979  001EF6  D017               	goto	l3320
  4980  001EF8                     l3312:
  4981                           
  4982                           ;pass.c: 51: {
  4983                           ;pass.c: 52: if ( str1[i] != str2[i] )
  4984  001EF8  0E10               	movlw	low pass@str2
  4985  001EFA  242E               	addwf	pass@i_366,w,c
  4986  001EFC  6ED9               	movwf	fsr2l,c
  4987  001EFE  0E00               	movlw	high pass@str2
  4988  001F00  202F               	addwfc	pass@i_366+1,w,c
  4989  001F02  6EDA               	movwf	fsr2h,c
  4990  001F04  0E3B               	movlw	low _str1
  4991  001F06  242E               	addwf	pass@i_366,w,c
  4992  001F08  6EE1               	movwf	fsr1l,c
  4993  001F0A  0E00               	movlw	high _str1
  4994  001F0C  202F               	addwfc	pass@i_366+1,w,c
  4995  001F0E  6EE2               	movwf	fsr1h,c
  4996  001F10  50DE               	movf	postinc2,w,c
  4997  001F12  18E6               	xorwf	postinc1,w,c
  4998  001F14  B4D8               	btfsc	status,2,c
  4999  001F16  D004               	goto	l3316
  5000                           
  5001                           ;pass.c: 53: {
  5002                           ;pass.c: 54: flag = 0;
  5003  001F18  0E00               	movlw	0
  5004  001F1A  6E2C               	movwf	pass@flag+1,c
  5005  001F1C  0E00               	movlw	0
  5006  001F1E  6E2B               	movwf	pass@flag,c
  5007  001F20                     l3316:
  5008  001F20  4A2E               	infsnz	pass@i_366,f,c
  5009  001F22  2A2F               	incf	pass@i_366+1,f,c
  5010  001F24  D7E1               	goto	l3308
  5011  001F26                     l3320:
  5012                           
  5013                           ;pass.c: 55: }
  5014                           ;pass.c: 56: }
  5015                           ;pass.c: 57: if ( flag )
  5016  001F26  502B               	movf	pass@flag,w,c
  5017  001F28  102C               	iorwf	pass@flag+1,w,c
  5018  001F2A  B4D8               	btfsc	status,2,c
  5019  001F2C  D003               	goto	l3324
  5020                           
  5021                           ;pass.c: 58: {
  5022                           ;pass.c: 59: try='0';
  5023  001F2E  0E30               	movlw	48
  5024  001F30  6E2D               	movwf	pass@try,c
  5025                           
  5026                           ;pass.c: 60: }
  5027  001F32  D095               	goto	l3372
  5028  001F34                     l3324:
  5029                           
  5030                           ;pass.c: 61: else
  5031                           ;pass.c: 62: {
  5032                           ;pass.c: 63: if ( try > '1' )
  5033  001F34  0E31               	movlw	49
  5034  001F36  642D               	cpfsgt	pass@try,c
  5035  001F38  D05B               	goto	l3350
  5036                           
  5037                           ;pass.c: 64: {
  5038                           ;pass.c: 65: if ( t++ < 1000 )
  5039  001F3A  501D               	movf	pass@t,w,c
  5040  001F3C  6E0A               	movwf	??_pass& (0+255),c
  5041  001F3E  501E               	movf	pass@t+1,w,c
  5042  001F40  6E0B               	movwf	(??_pass+1)& (0+255),c
  5043  001F42  4A1D               	infsnz	pass@t,f,c
  5044  001F44  2A1E               	incf	pass@t+1,f,c
  5045  001F46  0EE8               	movlw	232
  5046  001F48  5C0A               	subwf	??_pass,w,c
  5047  001F4A  0E03               	movlw	3
  5048  001F4C  580B               	subwfb	??_pass+1,w,c
  5049  001F4E  B0D8               	btfsc	status,0,c
  5050  001F50  D016               	goto	l3334
  5051                           
  5052                           ;pass.c: 66: {
  5053                           ;pass.c: 67: clcd_print("TRY AGAIN",(0xC0 + (0)));
  5054  001F52  0EDD               	movlw	low STR_30
  5055  001F54  6E07               	movwf	clcd_print@data,c
  5056  001F56  0E2F               	movlw	high STR_30
  5057  001F58  6E08               	movwf	clcd_print@data+1,c
  5058  001F5A  0EC0               	movlw	192
  5059  001F5C  6E09               	movwf	clcd_print@addr,c
  5060  001F5E  ECA5  F009         	call	_clcd_print	;wreg free
  5061                           
  5062                           ;pass.c: 68: clcd_putch(try-1,(0xC0 + (10)));
  5063  001F62  0ECA               	movlw	202
  5064  001F64  6E03               	movwf	clcd_putch@addr,c
  5065  001F66  042D               	decf	pass@try,w,c
  5066  001F68  ECAD  F007         	call	_clcd_putch
  5067                           
  5068                           ;pass.c: 69: clcd_print("LEFT",(0xC0 + (12)));
  5069  001F6C  0EF3               	movlw	low STR_31
  5070  001F6E  6E07               	movwf	clcd_print@data,c
  5071  001F70  0E2F               	movlw	high STR_31
  5072  001F72  6E08               	movwf	clcd_print@data+1,c
  5073  001F74  0ECC               	movlw	204
  5074  001F76  6E09               	movwf	clcd_print@addr,c
  5075  001F78  ECA5  F009         	call	_clcd_print	;wreg free
  5076                           
  5077                           ;pass.c: 70: }
  5078  001F7C  D028               	goto	l3344
  5079  001F7E                     l3334:
  5080                           
  5081                           ;pass.c: 71: else
  5082                           ;pass.c: 72: {
  5083                           ;pass.c: 73: if ( m++ == 500 )
  5084  001F7E  4A1B               	infsnz	pass@m,f,c
  5085  001F80  2A1C               	incf	pass@m+1,f,c
  5086  001F82  0EF5               	movlw	245
  5087  001F84  181B               	xorwf	pass@m,w,c
  5088  001F86  E11B               	bnz	l3342
  5089  001F88  041C               	decf	pass@m+1,w,c
  5090  001F8A  A4D8               	btfss	status,2,c
  5091  001F8C  D018               	goto	l3342
  5092                           
  5093                           ;pass.c: 74: {
  5094                           ;pass.c: 75: flag = 1;
  5095  001F8E  0E00               	movlw	0
  5096  001F90  6E2C               	movwf	pass@flag+1,c
  5097  001F92  0E01               	movlw	1
  5098  001F94  6E2B               	movwf	pass@flag,c
  5099                           
  5100                           ;pass.c: 76: j=0;
  5101  001F96  0E00               	movlw	0
  5102  001F98  6E2A               	movwf	pass@j+1,c
  5103  001F9A  0E00               	movlw	0
  5104  001F9C  6E29               	movwf	pass@j,c
  5105                           
  5106                           ;pass.c: 77: k=0;
  5107  001F9E  0E00               	movlw	0
  5108  001FA0  6E31               	movwf	pass@k+1,c
  5109  001FA2  0E00               	movlw	0
  5110  001FA4  6E30               	movwf	pass@k,c
  5111                           
  5112                           ;pass.c: 78: input = '0';
  5113  001FA6  0E30               	movlw	48
  5114  001FA8  6E21               	movwf	pass@input,c
  5115                           
  5116                           ;pass.c: 79: t = 0;
  5117  001FAA  0E00               	movlw	0
  5118  001FAC  6E1E               	movwf	pass@t+1,c
  5119  001FAE  0E00               	movlw	0
  5120  001FB0  6E1D               	movwf	pass@t,c
  5121                           
  5122                           ;pass.c: 80: m=0;
  5123  001FB2  0E00               	movlw	0
  5124  001FB4  6E1C               	movwf	pass@m+1,c
  5125  001FB6  0E00               	movlw	0
  5126  001FB8  6E1B               	movwf	pass@m,c
  5127                           
  5128                           ;pass.c: 81: RB0 = 0;
  5129  001FBA  9081               	bcf	3969,0,c	;volatile
  5130                           
  5131                           ;pass.c: 82: try--;
  5132  001FBC  062D               	decf	pass@try,f,c
  5133  001FBE                     l3342:
  5134                           
  5135                           ;pass.c: 83: }
  5136                           ;pass.c: 84: clcd_print("                  ",(0xC0 + (0)));
  5137  001FBE  0EFD               	movlw	low STR_32
  5138  001FC0  6E07               	movwf	clcd_print@data,c
  5139  001FC2  0E2E               	movlw	high STR_32
  5140  001FC4  6E08               	movwf	clcd_print@data+1,c
  5141  001FC6  0EC0               	movlw	192
  5142  001FC8  6E09               	movwf	clcd_print@addr,c
  5143  001FCA  ECA5  F009         	call	_clcd_print	;wreg free
  5144  001FCE                     l3344:
  5145                           
  5146                           ;pass.c: 85: }
  5147                           ;pass.c: 86: if(delay++ == 100)
  5148  001FCE  4A1F               	infsnz	pass@delay,f,c
  5149  001FD0  2A20               	incf	pass@delay+1,f,c
  5150  001FD2  0E65               	movlw	101
  5151  001FD4  181F               	xorwf	pass@delay,w,c
  5152  001FD6  1020               	iorwf	pass@delay+1,w,c
  5153  001FD8  A4D8               	btfss	status,2,c
  5154  001FDA  D041               	goto	l3372
  5155                           
  5156                           ;pass.c: 87: {
  5157                           ;pass.c: 88: RB0=!RB0;
  5158  001FDC  B081               	btfsc	3969,0,c	;volatile
  5159  001FDE  D002               	goto	u2950
  5160  001FE0  8081               	bsf	3969,0,c	;volatile
  5161  001FE2  D001               	goto	l3348
  5162  001FE4                     u2950:
  5163  001FE4  9081               	bcf	3969,0,c	;volatile
  5164  001FE6                     l3348:
  5165                           
  5166                           ;pass.c: 89: delay=0;
  5167  001FE6  0E00               	movlw	0
  5168  001FE8  6E20               	movwf	pass@delay+1,c
  5169  001FEA  0E00               	movlw	0
  5170  001FEC  6E1F               	movwf	pass@delay,c
  5171                           
  5172                           ;pass.c: 90: }
  5173                           ;pass.c: 91: }
  5174  001FEE  D037               	goto	l3372
  5175  001FF0                     l3350:
  5176                           
  5177                           ;pass.c: 92: else
  5178                           ;pass.c: 93: {
  5179                           ;pass.c: 94: try = '0';
  5180  001FF0  0E30               	movlw	48
  5181  001FF2  6E2D               	movwf	pass@try,c
  5182                           
  5183                           ;pass.c: 95: flag = 0;
  5184  001FF4  0E00               	movlw	0
  5185  001FF6  6E2C               	movwf	pass@flag+1,c
  5186  001FF8  0E00               	movlw	0
  5187  001FFA  6E2B               	movwf	pass@flag,c
  5188                           
  5189                           ;pass.c: 96: }
  5190                           ;pass.c: 97: }
  5191                           ;pass.c: 98: }
  5192                           ;pass.c: 99: }
  5193  001FFC  D030               	goto	l3372
  5194  001FFE                     l3352:
  5195                           
  5196                           ;pass.c: 100: else
  5197                           ;pass.c: 101: {
  5198                           ;pass.c: 102: if ( flag )
  5199  001FFE  502B               	movf	pass@flag,w,c
  5200  002000  102C               	iorwf	pass@flag+1,w,c
  5201  002002  B4D8               	btfsc	status,2,c
  5202  002004  D023               	goto	l3368
  5203                           
  5204                           ;pass.c: 103: {
  5205                           ;pass.c: 104: clcd_print("    SUCCESS    ",(0xC0 + (0)));
  5206  002006  0ECD               	movlw	low STR_33
  5207  002008  6E07               	movwf	clcd_print@data,c
  5208  00200A  0E2F               	movlw	high STR_33
  5209  00200C  6E08               	movwf	clcd_print@data+1,c
  5210  00200E  0EC0               	movlw	192
  5211  002010  6E09               	movwf	clcd_print@addr,c
  5212  002012  ECA5  F009         	call	_clcd_print	;wreg free
  5213                           
  5214                           ;pass.c: 105: RB0 = 0;
  5215  002016  9081               	bcf	3969,0,c	;volatile
  5216                           
  5217                           ;pass.c: 106: for(long int i=10000;i>0;i--);
  5218  002018  0E10               	movlw	16
  5219  00201A  6E22               	movwf	pass@i_371,c
  5220  00201C  0E27               	movlw	39
  5221  00201E  6E23               	movwf	pass@i_371+1,c
  5222  002020  0E00               	movlw	0
  5223  002022  6E24               	movwf	pass@i_371+2,c
  5224  002024  0E00               	movlw	0
  5225  002026  6E25               	movwf	pass@i_371+3,c
  5226  002028                     l3360:
  5227  002028  BE25               	btfsc	pass@i_371+3,7,c
  5228  00202A  0012               	return	
  5229  00202C  5025               	movf	pass@i_371+3,w,c
  5230  00202E  1024               	iorwf	pass@i_371+2,w,c
  5231  002030  1023               	iorwf	pass@i_371+1,w,c
  5232  002032  E103               	bnz	l3364
  5233  002034  0422               	decf	pass@i_371,w,c
  5234  002036  A0D8               	btfss	status,0,c
  5235  002038  0012               	return	
  5236  00203A                     l3364:
  5237  00203A  0EFF               	movlw	255
  5238  00203C  2622               	addwf	pass@i_371,f,c
  5239  00203E  0EFF               	movlw	255
  5240  002040  2223               	addwfc	pass@i_371+1,f,c
  5241  002042  0EFF               	movlw	255
  5242  002044  2224               	addwfc	pass@i_371+2,f,c
  5243  002046  0EFF               	movlw	255
  5244  002048  2225               	addwfc	pass@i_371+3,f,c
  5245  00204A  D7EE               	goto	l3360
  5246  00204C                     l3368:
  5247                           
  5248                           ;pass.c: 109: else
  5249                           ;pass.c: 110: {
  5250                           ;pass.c: 111: clcd_print("    FAILURE    ",(0xC0 + (0)));
  5251  00204C  0EBD               	movlw	low STR_34
  5252  00204E  6E07               	movwf	clcd_print@data,c
  5253  002050  0E2F               	movlw	high STR_34
  5254  002052  6E08               	movwf	clcd_print@data+1,c
  5255  002054  0EC0               	movlw	192
  5256  002056  6E09               	movwf	clcd_print@addr,c
  5257  002058  ECA5  F009         	call	_clcd_print	;wreg free
  5258                           
  5259                           ;pass.c: 112: RB0 = 1;
  5260  00205C  8081               	bsf	3969,0,c	;volatile
  5261  00205E                     l3372:
  5262                           
  5263                           ;pass.c: 113: }
  5264                           ;pass.c: 114: }
  5265                           ;pass.c: 115: for(int i = 1000; i--; );
  5266  00205E  0E03               	movlw	3
  5267  002060  6E1A               	movwf	pass@i_373+1,c
  5268  002062  0EE8               	movlw	232
  5269  002064  6E19               	movwf	pass@i_373,c
  5270  002066                     l3374:
  5271  002066  0619               	decf	pass@i_373,f,c
  5272  002068  A0D8               	btfss	status,0,c
  5273  00206A  061A               	decf	pass@i_373+1,f,c
  5274  00206C  2819               	incf	pass@i_373,w,c
  5275  00206E  E1FB               	bnz	l3374
  5276  002070  281A               	incf	pass@i_373+1,w,c
  5277  002072  B4D8               	btfsc	status,2,c
  5278  002074  D6CC               	goto	l3266
  5279  002076  D7F7               	goto	l3374
  5280  002078                     __end_of_pass:
  5281                           	opt stack 0
  5282                           tblptru	equ	0xFF8
  5283                           tblptrh	equ	0xFF7
  5284                           tblptrl	equ	0xFF6
  5285                           tablat	equ	0xFF5
  5286                           postinc0	equ	0xFEE
  5287                           wreg	equ	0xFE8
  5288                           indf1	equ	0xFE7
  5289                           postinc1	equ	0xFE6
  5290                           postdec1	equ	0xFE5
  5291                           plusw1	equ	0xFE3
  5292                           fsr1h	equ	0xFE2
  5293                           fsr1l	equ	0xFE1
  5294                           indf2	equ	0xFDF
  5295                           postinc2	equ	0xFDE
  5296                           plusw2	equ	0xFDB
  5297                           fsr2h	equ	0xFDA
  5298                           fsr2l	equ	0xFD9
  5299                           status	equ	0xFD8
  5300                           
  5301 ;; *************** function _clcd_putch *****************
  5302 ;; Defined at:
  5303 ;;		line 51 in file "clcd.c"
  5304 ;; Parameters:    Size  Location     Type
  5305 ;;  data            1    wreg     const unsigned char 
  5306 ;;  addr            1    2[COMRAM] unsigned char 
  5307 ;; Auto vars:     Size  Location     Type
  5308 ;;  data            1    3[COMRAM] const unsigned char 
  5309 ;; Return value:  Size  Location     Type
  5310 ;;                  1    wreg      void 
  5311 ;; Registers used:
  5312 ;;		wreg, status,2, cstack
  5313 ;; Tracked objects:
  5314 ;;		On entry : 0/0
  5315 ;;		On exit  : 0/0
  5316 ;;		Unchanged: 0/0
  5317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5318 ;;      Params:         1       0       0       0       0       0       0
  5319 ;;      Locals:         1       0       0       0       0       0       0
  5320 ;;      Temps:          0       0       0       0       0       0       0
  5321 ;;      Totals:         2       0       0       0       0       0       0
  5322 ;;Total ram usage:        2 bytes
  5323 ;; Hardware stack levels used:    1
  5324 ;; Hardware stack levels required when called:    1
  5325 ;; This function calls:
  5326 ;;		_clcd_write
  5327 ;; This function is called by:
  5328 ;;		_main
  5329 ;;		_pass
  5330 ;; This function uses a non-reentrant model
  5331 ;;
  5332                           
  5333                           	psect	text8
  5334  000F5A                     __ptext8:
  5335                           	opt stack 0
  5336  000F5A                     _clcd_putch:
  5337                           	opt stack 28
  5338                           
  5339                           ;incstack = 0
  5340                           ;clcd_putch@data stored from wreg
  5341  000F5A  6E04               	movwf	clcd_putch@data,c
  5342                           
  5343                           ;clcd.c: 53: clcd_write(addr, 0);
  5344  000F5C  0E00               	movlw	0
  5345  000F5E  6E01               	movwf	clcd_write@control_bit,c
  5346  000F60  5003               	movf	clcd_putch@addr,w,c
  5347  000F62  EC0D  F008         	call	_clcd_write
  5348                           
  5349                           ;clcd.c: 54: clcd_write(data, 1);
  5350  000F66  0E01               	movlw	1
  5351  000F68  6E01               	movwf	clcd_write@control_bit,c
  5352  000F6A  5004               	movf	clcd_putch@data,w,c
  5353  000F6C  EC0D  F008         	call	_clcd_write
  5354  000F70  0012               	return		;funcret
  5355  000F72                     __end_of_clcd_putch:
  5356                           	opt stack 0
  5357                           tblptru	equ	0xFF8
  5358                           tblptrh	equ	0xFF7
  5359                           tblptrl	equ	0xFF6
  5360                           tablat	equ	0xFF5
  5361                           postinc0	equ	0xFEE
  5362                           wreg	equ	0xFE8
  5363                           indf1	equ	0xFE7
  5364                           postinc1	equ	0xFE6
  5365                           postdec1	equ	0xFE5
  5366                           plusw1	equ	0xFE3
  5367                           fsr1h	equ	0xFE2
  5368                           fsr1l	equ	0xFE1
  5369                           indf2	equ	0xFDF
  5370                           postinc2	equ	0xFDE
  5371                           plusw2	equ	0xFDB
  5372                           fsr2h	equ	0xFDA
  5373                           fsr2l	equ	0xFD9
  5374                           status	equ	0xFD8
  5375                           
  5376 ;; *************** function _init_config *****************
  5377 ;; Defined at:
  5378 ;;		line 51 in file "main.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;		None
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;		None
  5383 ;; Return value:  Size  Location     Type
  5384 ;;                  1    wreg      void 
  5385 ;; Registers used:
  5386 ;;		wreg, status,2, status,0, cstack
  5387 ;; Tracked objects:
  5388 ;;		On entry : 0/0
  5389 ;;		On exit  : 0/0
  5390 ;;		Unchanged: 0/0
  5391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5392 ;;      Params:         0       0       0       0       0       0       0
  5393 ;;      Locals:         0       0       0       0       0       0       0
  5394 ;;      Temps:          0       0       0       0       0       0       0
  5395 ;;      Totals:         0       0       0       0       0       0       0
  5396 ;;Total ram usage:        0 bytes
  5397 ;; Hardware stack levels used:    1
  5398 ;; Hardware stack levels required when called:    5
  5399 ;; This function calls:
  5400 ;;		_init_adc
  5401 ;;		_init_clcd
  5402 ;;		_init_ds1307
  5403 ;;		_init_i2c
  5404 ;;		_init_matrix_keypad
  5405 ;;		_init_uart
  5406 ;; This function is called by:
  5407 ;;		_main
  5408 ;; This function uses a non-reentrant model
  5409 ;;
  5410                           
  5411                           	psect	text9
  5412  000FB0                     __ptext9:
  5413                           	opt stack 0
  5414  000FB0                     _init_config:
  5415                           	opt stack 25
  5416                           
  5417                           ;main.c: 53: init_clcd();
  5418                           
  5419                           ;incstack = 0
  5420  000FB0  EC4B  F008         	call	_init_clcd	;wreg free
  5421                           
  5422                           ;main.c: 54: init_i2c();
  5423  000FB4  ECA2  F007         	call	_init_i2c	;wreg free
  5424                           
  5425                           ;main.c: 55: init_ds1307();
  5426  000FB8  EC00  F009         	call	_init_ds1307	;wreg free
  5427                           
  5428                           ;main.c: 56: init_matrix_keypad();
  5429  000FBC  EC8F  F007         	call	_init_matrix_keypad	;wreg free
  5430                           
  5431                           ;main.c: 57: init_adc();
  5432  000FC0  ECC8  F007         	call	_init_adc	;wreg free
  5433                           
  5434                           ;main.c: 58: init_uart();
  5435  000FC4  ECC0  F008         	call	_init_uart	;wreg free
  5436                           
  5437                           ;main.c: 59: TRISB0 = 0X00;
  5438  000FC8  9093               	bcf	3987,0,c	;volatile
  5439                           
  5440                           ;main.c: 60: ADCON1=0xFF;
  5441  000FCA  68C1               	setf	4033,c	;volatile
  5442                           
  5443                           ;main.c: 61: RB0=0;
  5444  000FCC  9081               	bcf	3969,0,c	;volatile
  5445  000FCE  0012               	return		;funcret
  5446  000FD0                     __end_of_init_config:
  5447                           	opt stack 0
  5448                           tblptru	equ	0xFF8
  5449                           tblptrh	equ	0xFF7
  5450                           tblptrl	equ	0xFF6
  5451                           tablat	equ	0xFF5
  5452                           postinc0	equ	0xFEE
  5453                           wreg	equ	0xFE8
  5454                           indf1	equ	0xFE7
  5455                           postinc1	equ	0xFE6
  5456                           postdec1	equ	0xFE5
  5457                           plusw1	equ	0xFE3
  5458                           fsr1h	equ	0xFE2
  5459                           fsr1l	equ	0xFE1
  5460                           indf2	equ	0xFDF
  5461                           postinc2	equ	0xFDE
  5462                           plusw2	equ	0xFDB
  5463                           fsr2h	equ	0xFDA
  5464                           fsr2l	equ	0xFD9
  5465                           status	equ	0xFD8
  5466                           
  5467 ;; *************** function _init_uart *****************
  5468 ;; Defined at:
  5469 ;;		line 4 in file "uart.c"
  5470 ;; Parameters:    Size  Location     Type
  5471 ;;		None
  5472 ;; Auto vars:     Size  Location     Type
  5473 ;;		None
  5474 ;; Return value:  Size  Location     Type
  5475 ;;                  1    wreg      void 
  5476 ;; Registers used:
  5477 ;;		wreg, status,2
  5478 ;; Tracked objects:
  5479 ;;		On entry : 0/0
  5480 ;;		On exit  : 0/0
  5481 ;;		Unchanged: 0/0
  5482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5483 ;;      Params:         0       0       0       0       0       0       0
  5484 ;;      Locals:         0       0       0       0       0       0       0
  5485 ;;      Temps:          0       0       0       0       0       0       0
  5486 ;;      Totals:         0       0       0       0       0       0       0
  5487 ;;Total ram usage:        0 bytes
  5488 ;; Hardware stack levels used:    1
  5489 ;; This function calls:
  5490 ;;		Nothing
  5491 ;; This function is called by:
  5492 ;;		_init_config
  5493 ;; This function uses a non-reentrant model
  5494 ;;
  5495                           
  5496                           	psect	text10
  5497  001180                     __ptext10:
  5498                           	opt stack 0
  5499  001180                     _init_uart:
  5500                           	opt stack 29
  5501                           
  5502                           ;uart.c: 7: TRISC7 = 1;
  5503                           
  5504                           ;incstack = 0
  5505  001180  8E94               	bsf	3988,7,c	;volatile
  5506                           
  5507                           ;uart.c: 8: TRISC6 = 0;
  5508  001182  9C94               	bcf	3988,6,c	;volatile
  5509                           
  5510                           ;uart.c: 13: CSRC = 0;
  5511  001184  9EAC               	bcf	4012,7,c	;volatile
  5512                           
  5513                           ;uart.c: 15: TX9 = 0;
  5514  001186  9CAC               	bcf	4012,6,c	;volatile
  5515                           
  5516                           ;uart.c: 17: TXEN = 1;
  5517  001188  8AAC               	bsf	4012,5,c	;volatile
  5518                           
  5519                           ;uart.c: 20: SYNC = 0;
  5520  00118A  98AC               	bcf	4012,4,c	;volatile
  5521                           
  5522                           ;uart.c: 22: SENDB = 0;
  5523  00118C  96AC               	bcf	4012,3,c	;volatile
  5524                           
  5525                           ;uart.c: 25: BRGH = 1;
  5526  00118E  84AC               	bsf	4012,2,c	;volatile
  5527                           
  5528                           ;uart.c: 27: TRMT = 0;
  5529  001190  92AC               	bcf	4012,1,c	;volatile
  5530                           
  5531                           ;uart.c: 29: TX9D = 0;
  5532  001192  90AC               	bcf	4012,0,c	;volatile
  5533                           
  5534                           ;uart.c: 34: SPEN = 1;
  5535  001194  8EAB               	bsf	4011,7,c	;volatile
  5536                           
  5537                           ;uart.c: 36: RX9 = 0;
  5538  001196  9CAB               	bcf	4011,6,c	;volatile
  5539                           
  5540                           ;uart.c: 38: SREN = 0;
  5541  001198  9AAB               	bcf	4011,5,c	;volatile
  5542                           
  5543                           ;uart.c: 40: CREN = 1;
  5544  00119A  88AB               	bsf	4011,4,c	;volatile
  5545                           
  5546                           ;uart.c: 42: ADDEN = 0;
  5547  00119C  96AB               	bcf	4011,3,c	;volatile
  5548                           
  5549                           ;uart.c: 44: FERR = 0;
  5550  00119E  94AB               	bcf	4011,2,c	;volatile
  5551                           
  5552                           ;uart.c: 46: OERR = 0;
  5553  0011A0  92AB               	bcf	4011,1,c	;volatile
  5554                           
  5555                           ;uart.c: 48: RX9D = 0;
  5556  0011A2  90AB               	bcf	4011,0,c	;volatile
  5557                           
  5558                           ;uart.c: 53: ABDOVF = 0;
  5559  0011A4  9EB8               	bcf	4024,7,c	;volatile
  5560                           
  5561                           ;uart.c: 55: RCIDL = 1;
  5562  0011A6  8CB8               	bsf	4024,6,c	;volatile
  5563                           
  5564                           ;uart.c: 57: SCKP = 0;
  5565  0011A8  98B8               	bcf	4024,4,c	;volatile
  5566                           
  5567                           ;uart.c: 59: BRG16 = 0;
  5568  0011AA  96B8               	bcf	4024,3,c	;volatile
  5569                           
  5570                           ;uart.c: 61: WUE = 0;
  5571  0011AC  92B8               	bcf	4024,1,c	;volatile
  5572                           
  5573                           ;uart.c: 63: ABDEN = 0;
  5574  0011AE  90B8               	bcf	4024,0,c	;volatile
  5575                           
  5576                           ;uart.c: 67: SPBRG = 129;
  5577  0011B0  0E81               	movlw	129
  5578  0011B2  6EAF               	movwf	4015,c	;volatile
  5579                           
  5580                           ;uart.c: 70: TXIE = 1;
  5581  0011B4  889D               	bsf	3997,4,c	;volatile
  5582                           
  5583                           ;uart.c: 72: TXIF = 0;
  5584  0011B6  989E               	bcf	3998,4,c	;volatile
  5585                           
  5586                           ;uart.c: 74: RCIE = 1;
  5587  0011B8  8A9D               	bsf	3997,5,c	;volatile
  5588                           
  5589                           ;uart.c: 76: RCIF = 0;
  5590  0011BA  9A9E               	bcf	3998,5,c	;volatile
  5591  0011BC  0012               	return		;funcret
  5592  0011BE                     __end_of_init_uart:
  5593                           	opt stack 0
  5594                           tblptru	equ	0xFF8
  5595                           tblptrh	equ	0xFF7
  5596                           tblptrl	equ	0xFF6
  5597                           tablat	equ	0xFF5
  5598                           postinc0	equ	0xFEE
  5599                           wreg	equ	0xFE8
  5600                           indf1	equ	0xFE7
  5601                           postinc1	equ	0xFE6
  5602                           postdec1	equ	0xFE5
  5603                           plusw1	equ	0xFE3
  5604                           fsr1h	equ	0xFE2
  5605                           fsr1l	equ	0xFE1
  5606                           indf2	equ	0xFDF
  5607                           postinc2	equ	0xFDE
  5608                           plusw2	equ	0xFDB
  5609                           fsr2h	equ	0xFDA
  5610                           fsr2l	equ	0xFD9
  5611                           status	equ	0xFD8
  5612                           
  5613 ;; *************** function _init_matrix_keypad *****************
  5614 ;; Defined at:
  5615 ;;		line 4 in file "matrix_keypad.c"
  5616 ;; Parameters:    Size  Location     Type
  5617 ;;		None
  5618 ;; Auto vars:     Size  Location     Type
  5619 ;;		None
  5620 ;; Return value:  Size  Location     Type
  5621 ;;                  1    wreg      void 
  5622 ;; Registers used:
  5623 ;;		wreg, status,2, status,0
  5624 ;; Tracked objects:
  5625 ;;		On entry : 0/0
  5626 ;;		On exit  : 0/0
  5627 ;;		Unchanged: 0/0
  5628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5629 ;;      Params:         0       0       0       0       0       0       0
  5630 ;;      Locals:         0       0       0       0       0       0       0
  5631 ;;      Temps:          0       0       0       0       0       0       0
  5632 ;;      Totals:         0       0       0       0       0       0       0
  5633 ;;Total ram usage:        0 bytes
  5634 ;; Hardware stack levels used:    1
  5635 ;; This function calls:
  5636 ;;		Nothing
  5637 ;; This function is called by:
  5638 ;;		_init_config
  5639 ;; This function uses a non-reentrant model
  5640 ;;
  5641                           
  5642                           	psect	text11
  5643  000F1E                     __ptext11:
  5644                           	opt stack 0
  5645  000F1E                     _init_matrix_keypad:
  5646                           	opt stack 29
  5647                           
  5648                           ;matrix_keypad.c: 7: ADCON1 = 0x0F;
  5649                           
  5650                           ;incstack = 0
  5651  000F1E  0E0F               	movlw	15
  5652  000F20  6EC1               	movwf	4033,c	;volatile
  5653                           
  5654                           ;matrix_keypad.c: 10: TRISB = 0x1E;
  5655  000F22  0E1E               	movlw	30
  5656  000F24  6E93               	movwf	3987,c	;volatile
  5657                           
  5658                           ;matrix_keypad.c: 13: RBPU = 0;
  5659  000F26  9EF1               	bcf	intcon2,7,c	;volatile
  5660                           
  5661                           ;matrix_keypad.c: 15: PORTB = PORTB | 0xE0;
  5662  000F28  5081               	movf	3969,w,c	;volatile
  5663  000F2A  09E0               	iorlw	224
  5664  000F2C  6E81               	movwf	3969,c	;volatile
  5665  000F2E  0012               	return		;funcret
  5666  000F30                     __end_of_init_matrix_keypad:
  5667                           	opt stack 0
  5668                           tblptru	equ	0xFF8
  5669                           tblptrh	equ	0xFF7
  5670                           tblptrl	equ	0xFF6
  5671                           tablat	equ	0xFF5
  5672                           intcon2	equ	0xFF1
  5673                           postinc0	equ	0xFEE
  5674                           wreg	equ	0xFE8
  5675                           indf1	equ	0xFE7
  5676                           postinc1	equ	0xFE6
  5677                           postdec1	equ	0xFE5
  5678                           plusw1	equ	0xFE3
  5679                           fsr1h	equ	0xFE2
  5680                           fsr1l	equ	0xFE1
  5681                           indf2	equ	0xFDF
  5682                           postinc2	equ	0xFDE
  5683                           plusw2	equ	0xFDB
  5684                           fsr2h	equ	0xFDA
  5685                           fsr2l	equ	0xFD9
  5686                           status	equ	0xFD8
  5687                           
  5688 ;; *************** function _init_i2c *****************
  5689 ;; Defined at:
  5690 ;;		line 3 in file "i2c.c"
  5691 ;; Parameters:    Size  Location     Type
  5692 ;;		None
  5693 ;; Auto vars:     Size  Location     Type
  5694 ;;		None
  5695 ;; Return value:  Size  Location     Type
  5696 ;;                  1    wreg      void 
  5697 ;; Registers used:
  5698 ;;		wreg, status,2
  5699 ;; Tracked objects:
  5700 ;;		On entry : 0/0
  5701 ;;		On exit  : 0/0
  5702 ;;		Unchanged: 0/0
  5703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5704 ;;      Params:         0       0       0       0       0       0       0
  5705 ;;      Locals:         0       0       0       0       0       0       0
  5706 ;;      Temps:          0       0       0       0       0       0       0
  5707 ;;      Totals:         0       0       0       0       0       0       0
  5708 ;;Total ram usage:        0 bytes
  5709 ;; Hardware stack levels used:    1
  5710 ;; This function calls:
  5711 ;;		Nothing
  5712 ;; This function is called by:
  5713 ;;		_init_config
  5714 ;; This function uses a non-reentrant model
  5715 ;;
  5716                           
  5717                           	psect	text12
  5718  000F44                     __ptext12:
  5719                           	opt stack 0
  5720  000F44                     _init_i2c:
  5721                           	opt stack 29
  5722                           
  5723                           ;i2c.c: 6: TRISC3 = 1;
  5724                           
  5725                           ;incstack = 0
  5726  000F44  8694               	bsf	3988,3,c	;volatile
  5727                           
  5728                           ;i2c.c: 7: TRISC4 = 1;
  5729  000F46  8894               	bsf	3988,4,c	;volatile
  5730                           
  5731                           ;i2c.c: 9: SSPCON1 = 0x28;
  5732  000F48  0E28               	movlw	40
  5733  000F4A  6EC6               	movwf	4038,c	;volatile
  5734                           
  5735                           ;i2c.c: 11: SSPADD = 0x31;
  5736  000F4C  0E31               	movlw	49
  5737  000F4E  6EC8               	movwf	4040,c	;volatile
  5738                           
  5739                           ;i2c.c: 13: CKE = 0;
  5740  000F50  9CC7               	bcf	4039,6,c	;volatile
  5741                           
  5742                           ;i2c.c: 15: SMP = 1;
  5743  000F52  8EC7               	bsf	4039,7,c	;volatile
  5744                           
  5745                           ;i2c.c: 17: SSPIF = 0;
  5746  000F54  969E               	bcf	3998,3,c	;volatile
  5747                           
  5748                           ;i2c.c: 19: BCLIF = 0;
  5749  000F56  96A1               	bcf	4001,3,c	;volatile
  5750  000F58  0012               	return		;funcret
  5751  000F5A                     __end_of_init_i2c:
  5752                           	opt stack 0
  5753                           tblptru	equ	0xFF8
  5754                           tblptrh	equ	0xFF7
  5755                           tblptrl	equ	0xFF6
  5756                           tablat	equ	0xFF5
  5757                           intcon2	equ	0xFF1
  5758                           postinc0	equ	0xFEE
  5759                           wreg	equ	0xFE8
  5760                           indf1	equ	0xFE7
  5761                           postinc1	equ	0xFE6
  5762                           postdec1	equ	0xFE5
  5763                           plusw1	equ	0xFE3
  5764                           fsr1h	equ	0xFE2
  5765                           fsr1l	equ	0xFE1
  5766                           indf2	equ	0xFDF
  5767                           postinc2	equ	0xFDE
  5768                           plusw2	equ	0xFDB
  5769                           fsr2h	equ	0xFDA
  5770                           fsr2l	equ	0xFD9
  5771                           status	equ	0xFD8
  5772                           
  5773 ;; *************** function _init_ds1307 *****************
  5774 ;; Defined at:
  5775 ;;		line 12 in file "ds1307.c"
  5776 ;; Parameters:    Size  Location     Type
  5777 ;;		None
  5778 ;; Auto vars:     Size  Location     Type
  5779 ;;  dummy           1    3[COMRAM] unsigned char 
  5780 ;; Return value:  Size  Location     Type
  5781 ;;                  1    wreg      void 
  5782 ;; Registers used:
  5783 ;;		wreg, status,2, status,0, cstack
  5784 ;; Tracked objects:
  5785 ;;		On entry : 0/0
  5786 ;;		On exit  : 0/0
  5787 ;;		Unchanged: 0/0
  5788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5789 ;;      Params:         0       0       0       0       0       0       0
  5790 ;;      Locals:         1       0       0       0       0       0       0
  5791 ;;      Temps:          0       0       0       0       0       0       0
  5792 ;;      Totals:         1       0       0       0       0       0       0
  5793 ;;Total ram usage:        1 bytes
  5794 ;; Hardware stack levels used:    1
  5795 ;; Hardware stack levels required when called:    4
  5796 ;; This function calls:
  5797 ;;		_read_ds1307
  5798 ;;		_write_ds1307
  5799 ;; This function is called by:
  5800 ;;		_init_config
  5801 ;; This function uses a non-reentrant model
  5802 ;;
  5803                           
  5804                           	psect	text13
  5805  001200                     __ptext13:
  5806                           	opt stack 0
  5807  001200                     _init_ds1307:
  5808                           	opt stack 25
  5809                           
  5810                           ;ds1307.c: 14: unsigned char dummy;
  5811                           ;ds1307.c: 17: dummy = read_ds1307(0x00);
  5812                           
  5813                           ;incstack = 0
  5814  001200  0E00               	movlw	0
  5815  001202  EC36  F008         	call	_read_ds1307
  5816  001206  6E04               	movwf	init_ds1307@dummy,c
  5817                           
  5818                           ;ds1307.c: 18: write_ds1307(0x00, dummy | 0x80);
  5819  001208  5004               	movf	init_ds1307@dummy,w,c
  5820  00120A  0980               	iorlw	128
  5821  00120C  6E02               	movwf	write_ds1307@data,c
  5822  00120E  0E00               	movlw	0
  5823  001210  ECB9  F007         	call	_write_ds1307
  5824                           
  5825                           ;ds1307.c: 21: dummy = read_ds1307(0x02);
  5826  001214  0E02               	movlw	2
  5827  001216  EC36  F008         	call	_read_ds1307
  5828  00121A  6E04               	movwf	init_ds1307@dummy,c
  5829                           
  5830                           ;ds1307.c: 22: write_ds1307(0x02, dummy | 0x40);
  5831  00121C  5004               	movf	init_ds1307@dummy,w,c
  5832  00121E  0940               	iorlw	64
  5833  001220  6E02               	movwf	write_ds1307@data,c
  5834  001222  0E02               	movlw	2
  5835  001224  ECB9  F007         	call	_write_ds1307
  5836                           
  5837                           ;ds1307.c: 37: write_ds1307(0x07, 0x93);
  5838  001228  0E93               	movlw	147
  5839  00122A  6E02               	movwf	write_ds1307@data,c
  5840  00122C  0E07               	movlw	7
  5841  00122E  ECB9  F007         	call	_write_ds1307
  5842                           
  5843                           ;ds1307.c: 40: dummy = read_ds1307(0x00);
  5844  001232  0E00               	movlw	0
  5845  001234  EC36  F008         	call	_read_ds1307
  5846  001238  6E04               	movwf	init_ds1307@dummy,c
  5847                           
  5848                           ;ds1307.c: 41: write_ds1307(0x00, dummy & 0x7F);
  5849  00123A  5004               	movf	init_ds1307@dummy,w,c
  5850  00123C  0B7F               	andlw	127
  5851  00123E  6E02               	movwf	write_ds1307@data,c
  5852  001240  0E00               	movlw	0
  5853  001242  ECB9  F007         	call	_write_ds1307
  5854  001246  0012               	return		;funcret
  5855  001248                     __end_of_init_ds1307:
  5856                           	opt stack 0
  5857                           tblptru	equ	0xFF8
  5858                           tblptrh	equ	0xFF7
  5859                           tblptrl	equ	0xFF6
  5860                           tablat	equ	0xFF5
  5861                           intcon2	equ	0xFF1
  5862                           postinc0	equ	0xFEE
  5863                           wreg	equ	0xFE8
  5864                           indf1	equ	0xFE7
  5865                           postinc1	equ	0xFE6
  5866                           postdec1	equ	0xFE5
  5867                           plusw1	equ	0xFE3
  5868                           fsr1h	equ	0xFE2
  5869                           fsr1l	equ	0xFE1
  5870                           indf2	equ	0xFDF
  5871                           postinc2	equ	0xFDE
  5872                           plusw2	equ	0xFDB
  5873                           fsr2h	equ	0xFDA
  5874                           fsr2l	equ	0xFD9
  5875                           status	equ	0xFD8
  5876                           
  5877 ;; *************** function _write_ds1307 *****************
  5878 ;; Defined at:
  5879 ;;		line 45 in file "ds1307.c"
  5880 ;; Parameters:    Size  Location     Type
  5881 ;;  address         1    wreg     unsigned char 
  5882 ;;  data            1    1[COMRAM] unsigned char 
  5883 ;; Auto vars:     Size  Location     Type
  5884 ;;  address         1    2[COMRAM] unsigned char 
  5885 ;; Return value:  Size  Location     Type
  5886 ;;                  1    wreg      void 
  5887 ;; Registers used:
  5888 ;;		wreg, status,2, cstack
  5889 ;; Tracked objects:
  5890 ;;		On entry : 0/0
  5891 ;;		On exit  : 0/0
  5892 ;;		Unchanged: 0/0
  5893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5894 ;;      Params:         1       0       0       0       0       0       0
  5895 ;;      Locals:         1       0       0       0       0       0       0
  5896 ;;      Temps:          0       0       0       0       0       0       0
  5897 ;;      Totals:         2       0       0       0       0       0       0
  5898 ;;Total ram usage:        2 bytes
  5899 ;; Hardware stack levels used:    1
  5900 ;; Hardware stack levels required when called:    2
  5901 ;; This function calls:
  5902 ;;		_i2c_start
  5903 ;;		_i2c_stop
  5904 ;;		_i2c_write
  5905 ;; This function is called by:
  5906 ;;		_main
  5907 ;;		_init_ds1307
  5908 ;; This function uses a non-reentrant model
  5909 ;;
  5910                           
  5911                           	psect	text14
  5912  000F72                     __ptext14:
  5913                           	opt stack 0
  5914  000F72                     _write_ds1307:
  5915                           	opt stack 28
  5916                           
  5917                           ;incstack = 0
  5918                           ;write_ds1307@address stored from wreg
  5919  000F72  6E03               	movwf	write_ds1307@address,c
  5920                           
  5921                           ;ds1307.c: 47: i2c_start();
  5922  000F74  EC6E  F007         	call	_i2c_start	;wreg free
  5923                           
  5924                           ;ds1307.c: 48: i2c_write(0xD0);
  5925  000F78  0ED0               	movlw	208
  5926  000F7A  EC82  F007         	call	_i2c_write
  5927                           
  5928                           ;ds1307.c: 49: i2c_write(address);
  5929  000F7E  5003               	movf	write_ds1307@address,w,c
  5930  000F80  EC82  F007         	call	_i2c_write
  5931                           
  5932                           ;ds1307.c: 50: i2c_write(data);
  5933  000F84  5002               	movf	write_ds1307@data,w,c
  5934  000F86  EC82  F007         	call	_i2c_write
  5935                           
  5936                           ;ds1307.c: 51: i2c_stop();
  5937  000F8A  EC72  F007         	call	_i2c_stop	;wreg free
  5938  000F8E  0012               	return		;funcret
  5939  000F90                     __end_of_write_ds1307:
  5940                           	opt stack 0
  5941                           tblptru	equ	0xFF8
  5942                           tblptrh	equ	0xFF7
  5943                           tblptrl	equ	0xFF6
  5944                           tablat	equ	0xFF5
  5945                           intcon2	equ	0xFF1
  5946                           postinc0	equ	0xFEE
  5947                           wreg	equ	0xFE8
  5948                           indf1	equ	0xFE7
  5949                           postinc1	equ	0xFE6
  5950                           postdec1	equ	0xFE5
  5951                           plusw1	equ	0xFE3
  5952                           fsr1h	equ	0xFE2
  5953                           fsr1l	equ	0xFE1
  5954                           indf2	equ	0xFDF
  5955                           postinc2	equ	0xFDE
  5956                           plusw2	equ	0xFDB
  5957                           fsr2h	equ	0xFDA
  5958                           fsr2l	equ	0xFD9
  5959                           status	equ	0xFD8
  5960                           
  5961 ;; *************** function _init_clcd *****************
  5962 ;; Defined at:
  5963 ;;		line 27 in file "clcd.c"
  5964 ;; Parameters:    Size  Location     Type
  5965 ;;		None
  5966 ;; Auto vars:     Size  Location     Type
  5967 ;;		None
  5968 ;; Return value:  Size  Location     Type
  5969 ;;                  1    wreg      void 
  5970 ;; Registers used:
  5971 ;;		wreg, status,2, status,0, cstack
  5972 ;; Tracked objects:
  5973 ;;		On entry : 0/0
  5974 ;;		On exit  : 0/0
  5975 ;;		Unchanged: 0/0
  5976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5977 ;;      Params:         0       0       0       0       0       0       0
  5978 ;;      Locals:         0       0       0       0       0       0       0
  5979 ;;      Temps:          0       0       0       0       0       0       0
  5980 ;;      Totals:         0       0       0       0       0       0       0
  5981 ;;Total ram usage:        0 bytes
  5982 ;; Hardware stack levels used:    1
  5983 ;; Hardware stack levels required when called:    1
  5984 ;; This function calls:
  5985 ;;		_clcd_write
  5986 ;; This function is called by:
  5987 ;;		_init_config
  5988 ;; This function uses a non-reentrant model
  5989 ;;
  5990                           
  5991                           	psect	text15
  5992  001096                     __ptext15:
  5993                           	opt stack 0
  5994  001096                     _init_clcd:
  5995                           	opt stack 28
  5996                           
  5997                           ;clcd.c: 30: TRISD = 0x00;
  5998                           
  5999                           ;incstack = 0
  6000  001096  0E00               	movlw	0
  6001  001098  6E95               	movwf	3989,c	;volatile
  6002                           
  6003                           ;clcd.c: 32: TRISC = TRISC & 0xF8;
  6004  00109A  5094               	movf	3988,w,c	;volatile
  6005  00109C  0BF8               	andlw	248
  6006  00109E  6E94               	movwf	3988,c	;volatile
  6007                           
  6008                           ;clcd.c: 34: RC0 = 0;
  6009  0010A0  9082               	bcf	3970,0,c	;volatile
  6010                           
  6011                           ;clcd.c: 36: clcd_write(0x02, 0);
  6012  0010A2  0E00               	movlw	0
  6013  0010A4  6E01               	movwf	clcd_write@control_bit,c
  6014  0010A6  0E02               	movlw	2
  6015  0010A8  EC0D  F008         	call	_clcd_write
  6016                           
  6017                           ;clcd.c: 37: clcd_write(0x38, 0);
  6018  0010AC  0E00               	movlw	0
  6019  0010AE  6E01               	movwf	clcd_write@control_bit,c
  6020  0010B0  0E38               	movlw	56
  6021  0010B2  EC0D  F008         	call	_clcd_write
  6022                           
  6023                           ;clcd.c: 38: clcd_write(0x0C, 0);
  6024  0010B6  0E00               	movlw	0
  6025  0010B8  6E01               	movwf	clcd_write@control_bit,c
  6026  0010BA  0E0C               	movlw	12
  6027  0010BC  EC0D  F008         	call	_clcd_write
  6028                           
  6029                           ;clcd.c: 39: clcd_write(0x01, 0);
  6030  0010C0  0E00               	movlw	0
  6031  0010C2  6E01               	movwf	clcd_write@control_bit,c
  6032  0010C4  0E01               	movlw	1
  6033  0010C6  EC0D  F008         	call	_clcd_write
  6034  0010CA  0012               	return		;funcret
  6035  0010CC                     __end_of_init_clcd:
  6036                           	opt stack 0
  6037                           tblptru	equ	0xFF8
  6038                           tblptrh	equ	0xFF7
  6039                           tblptrl	equ	0xFF6
  6040                           tablat	equ	0xFF5
  6041                           intcon2	equ	0xFF1
  6042                           postinc0	equ	0xFEE
  6043                           wreg	equ	0xFE8
  6044                           indf1	equ	0xFE7
  6045                           postinc1	equ	0xFE6
  6046                           postdec1	equ	0xFE5
  6047                           plusw1	equ	0xFE3
  6048                           fsr1h	equ	0xFE2
  6049                           fsr1l	equ	0xFE1
  6050                           indf2	equ	0xFDF
  6051                           postinc2	equ	0xFDE
  6052                           plusw2	equ	0xFDB
  6053                           fsr2h	equ	0xFDA
  6054                           fsr2l	equ	0xFD9
  6055                           status	equ	0xFD8
  6056                           
  6057 ;; *************** function _init_adc *****************
  6058 ;; Defined at:
  6059 ;;		line 4 in file "adc.c"
  6060 ;; Parameters:    Size  Location     Type
  6061 ;;		None
  6062 ;; Auto vars:     Size  Location     Type
  6063 ;;		None
  6064 ;; Return value:  Size  Location     Type
  6065 ;;                  1    wreg      void 
  6066 ;; Registers used:
  6067 ;;		wreg, status,2
  6068 ;; Tracked objects:
  6069 ;;		On entry : 0/0
  6070 ;;		On exit  : 0/0
  6071 ;;		Unchanged: 0/0
  6072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6073 ;;      Params:         0       0       0       0       0       0       0
  6074 ;;      Locals:         0       0       0       0       0       0       0
  6075 ;;      Temps:          0       0       0       0       0       0       0
  6076 ;;      Totals:         0       0       0       0       0       0       0
  6077 ;;Total ram usage:        0 bytes
  6078 ;; Hardware stack levels used:    1
  6079 ;; This function calls:
  6080 ;;		Nothing
  6081 ;; This function is called by:
  6082 ;;		_init_config
  6083 ;; This function uses a non-reentrant model
  6084 ;;
  6085                           
  6086                           	psect	text16
  6087  000F90                     __ptext16:
  6088                           	opt stack 0
  6089  000F90                     _init_adc:
  6090                           	opt stack 29
  6091                           
  6092                           ;adc.c: 7: ADFM = 1;
  6093                           
  6094                           ;incstack = 0
  6095  000F90  8EC0               	bsf	4032,7,c	;volatile
  6096                           
  6097                           ;adc.c: 12: ACQT2 = 0;
  6098  000F92  9AC0               	bcf	4032,5,c	;volatile
  6099                           
  6100                           ;adc.c: 13: ACQT1 = 1;
  6101  000F94  88C0               	bsf	4032,4,c	;volatile
  6102                           
  6103                           ;adc.c: 14: ACQT0 = 0;
  6104  000F96  96C0               	bcf	4032,3,c	;volatile
  6105                           
  6106                           ;adc.c: 19: ADCS0 = 0;
  6107  000F98  90C0               	bcf	4032,0,c	;volatile
  6108                           
  6109                           ;adc.c: 20: ADCS1 = 1;
  6110  000F9A  82C0               	bsf	4032,1,c	;volatile
  6111                           
  6112                           ;adc.c: 21: ADCS2 = 0;
  6113  000F9C  94C0               	bcf	4032,2,c	;volatile
  6114                           
  6115                           ;adc.c: 23: GODONE = 0;
  6116  000F9E  92C2               	bcf	4034,1,c	;volatile
  6117                           
  6118                           ;adc.c: 29: VCFG1 = 0;
  6119  000FA0  9AC1               	bcf	4033,5,c	;volatile
  6120                           
  6121                           ;adc.c: 31: VCFG0 = 0;
  6122  000FA2  98C1               	bcf	4033,4,c	;volatile
  6123                           
  6124                           ;adc.c: 34: ADRESH = 0;
  6125  000FA4  0E00               	movlw	0
  6126  000FA6  6EC4               	movwf	4036,c	;volatile
  6127                           
  6128                           ;adc.c: 35: ADRESL = 0;
  6129  000FA8  0E00               	movlw	0
  6130  000FAA  6EC3               	movwf	4035,c	;volatile
  6131                           
  6132                           ;adc.c: 38: ADON = 1;
  6133  000FAC  80C2               	bsf	4034,0,c	;volatile
  6134  000FAE  0012               	return		;funcret
  6135  000FB0                     __end_of_init_adc:
  6136                           	opt stack 0
  6137                           tblptru	equ	0xFF8
  6138                           tblptrh	equ	0xFF7
  6139                           tblptrl	equ	0xFF6
  6140                           tablat	equ	0xFF5
  6141                           intcon2	equ	0xFF1
  6142                           postinc0	equ	0xFEE
  6143                           wreg	equ	0xFE8
  6144                           indf1	equ	0xFE7
  6145                           postinc1	equ	0xFE6
  6146                           postdec1	equ	0xFE5
  6147                           plusw1	equ	0xFE3
  6148                           fsr1h	equ	0xFE2
  6149                           fsr1l	equ	0xFE1
  6150                           indf2	equ	0xFDF
  6151                           postinc2	equ	0xFDE
  6152                           plusw2	equ	0xFDB
  6153                           fsr2h	equ	0xFDA
  6154                           fsr2l	equ	0xFD9
  6155                           status	equ	0xFD8
  6156                           
  6157 ;; *************** function _get_time *****************
  6158 ;; Defined at:
  6159 ;;		line 27 in file "main.c"
  6160 ;; Parameters:    Size  Location     Type
  6161 ;;		None
  6162 ;; Auto vars:     Size  Location     Type
  6163 ;;		None
  6164 ;; Return value:  Size  Location     Type
  6165 ;;                  1    wreg      void 
  6166 ;; Registers used:
  6167 ;;		wreg, status,2, status,0, cstack
  6168 ;; Tracked objects:
  6169 ;;		On entry : 0/0
  6170 ;;		On exit  : 0/0
  6171 ;;		Unchanged: 0/0
  6172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6173 ;;      Params:         0       0       0       0       0       0       0
  6174 ;;      Locals:         0       0       0       0       0       0       0
  6175 ;;      Temps:          0       0       0       0       0       0       0
  6176 ;;      Totals:         0       0       0       0       0       0       0
  6177 ;;Total ram usage:        0 bytes
  6178 ;; Hardware stack levels used:    1
  6179 ;; Hardware stack levels required when called:    4
  6180 ;; This function calls:
  6181 ;;		_read_ds1307
  6182 ;; This function is called by:
  6183 ;;		_main
  6184 ;; This function uses a non-reentrant model
  6185 ;;
  6186                           
  6187                           	psect	text17
  6188  0013AA                     __ptext17:
  6189                           	opt stack 0
  6190  0013AA                     _get_time:
  6191                           	opt stack 26
  6192                           
  6193                           ;main.c: 29: clock_reg[0] = read_ds1307(0x02);
  6194                           
  6195                           ;incstack = 0
  6196  0013AA  0E02               	movlw	2
  6197  0013AC  EC36  F008         	call	_read_ds1307
  6198  0013B0  6E4E               	movwf	_clock_reg,c
  6199                           
  6200                           ;main.c: 30: clock_reg[1] = read_ds1307(0x01);
  6201  0013B2  0E01               	movlw	1
  6202  0013B4  EC36  F008         	call	_read_ds1307
  6203  0013B8  6E4F               	movwf	_clock_reg+1,c
  6204                           
  6205                           ;main.c: 31: clock_reg[2] = read_ds1307(0x00);
  6206  0013BA  0E00               	movlw	0
  6207  0013BC  EC36  F008         	call	_read_ds1307
  6208  0013C0  6E50               	movwf	_clock_reg+2,c
  6209                           
  6210                           ;main.c: 33: if (clock_reg[0] & 0x40)
  6211  0013C2  AC4E               	btfss	_clock_reg,6,c
  6212  0013C4  D004               	goto	l3218
  6213                           
  6214                           ;main.c: 34: {
  6215                           ;main.c: 35: time[0] = '0' + ((clock_reg[0] >> 4) & 0x01);
  6216  0013C6  384E               	swapf	_clock_reg,w,c
  6217  0013C8  0B0F               	andlw	15
  6218  0013CA  0B01               	andlw	1
  6219  0013CC  D003               	goto	L4
  6220  0013CE                     l3218:
  6221                           
  6222                           ;main.c: 38: else
  6223                           ;main.c: 39: {
  6224                           ;main.c: 40: time[0] = '0' + ((clock_reg[0] >> 4) & 0x03);
  6225  0013CE  384E               	swapf	_clock_reg,w,c
  6226  0013D0  0B0F               	andlw	15
  6227  0013D2  0B03               	andlw	3
  6228  0013D4                     L4:
  6229  0013D4  0F30               	addlw	48
  6230  0013D6  6E57               	movwf	_time,c
  6231                           
  6232                           ;main.c: 41: time[1] = '0' + (clock_reg[0] & 0x0F);
  6233  0013D8  504E               	movf	_clock_reg,w,c
  6234  0013DA  0B0F               	andlw	15
  6235  0013DC  0F30               	addlw	48
  6236  0013DE  6E58               	movwf	_time+1,c
  6237                           
  6238                           ;main.c: 42: }
  6239                           ;main.c: 43: time[2] = ':';
  6240  0013E0  0E3A               	movlw	58
  6241  0013E2  6E59               	movwf	_time+2,c
  6242                           
  6243                           ;main.c: 44: time[3] = '0' + ((clock_reg[1] >> 4) & 0x0F);
  6244  0013E4  384F               	swapf	_clock_reg+1,w,c
  6245  0013E6  0B0F               	andlw	15
  6246  0013E8  0B0F               	andlw	15
  6247  0013EA  0F30               	addlw	48
  6248  0013EC  6E5A               	movwf	_time+3,c
  6249                           
  6250                           ;main.c: 45: time[4] = '0' + (clock_reg[1] & 0x0F);
  6251  0013EE  504F               	movf	_clock_reg+1,w,c
  6252  0013F0  0B0F               	andlw	15
  6253  0013F2  0F30               	addlw	48
  6254  0013F4  6E5B               	movwf	_time+4,c
  6255                           
  6256                           ;main.c: 46: time[5] = ':';
  6257  0013F6  0E3A               	movlw	58
  6258  0013F8  6E5C               	movwf	_time+5,c
  6259                           
  6260                           ;main.c: 47: time[6] = '0' + ((clock_reg[2] >> 4) & 0x0F);
  6261  0013FA  3850               	swapf	_clock_reg+2,w,c
  6262  0013FC  0B0F               	andlw	15
  6263  0013FE  0B0F               	andlw	15
  6264  001400  0F30               	addlw	48
  6265  001402  6E5D               	movwf	_time+6,c
  6266                           
  6267                           ;main.c: 48: time[7] = '0' + (clock_reg[2] & 0x0F);
  6268  001404  5050               	movf	_clock_reg+2,w,c
  6269  001406  0B0F               	andlw	15
  6270  001408  0F30               	addlw	48
  6271  00140A  6E5E               	movwf	_time+7,c
  6272                           
  6273                           ;main.c: 49: time[8] = '\0';
  6274  00140C  0E00               	movlw	0
  6275  00140E  6E5F               	movwf	_time+8,c
  6276  001410  0012               	return		;funcret
  6277  001412                     __end_of_get_time:
  6278                           	opt stack 0
  6279                           tblptru	equ	0xFF8
  6280                           tblptrh	equ	0xFF7
  6281                           tblptrl	equ	0xFF6
  6282                           tablat	equ	0xFF5
  6283                           intcon2	equ	0xFF1
  6284                           postinc0	equ	0xFEE
  6285                           wreg	equ	0xFE8
  6286                           indf1	equ	0xFE7
  6287                           postinc1	equ	0xFE6
  6288                           postdec1	equ	0xFE5
  6289                           plusw1	equ	0xFE3
  6290                           fsr1h	equ	0xFE2
  6291                           fsr1l	equ	0xFE1
  6292                           indf2	equ	0xFDF
  6293                           postinc2	equ	0xFDE
  6294                           plusw2	equ	0xFDB
  6295                           fsr2h	equ	0xFDA
  6296                           fsr2l	equ	0xFD9
  6297                           status	equ	0xFD8
  6298                           
  6299 ;; *************** function _read_ds1307 *****************
  6300 ;; Defined at:
  6301 ;;		line 54 in file "ds1307.c"
  6302 ;; Parameters:    Size  Location     Type
  6303 ;;  address         1    wreg     unsigned char 
  6304 ;; Auto vars:     Size  Location     Type
  6305 ;;  address         1    1[COMRAM] unsigned char 
  6306 ;;  data            1    2[COMRAM] unsigned char 
  6307 ;; Return value:  Size  Location     Type
  6308 ;;                  1    wreg      unsigned char 
  6309 ;; Registers used:
  6310 ;;		wreg, status,2, cstack
  6311 ;; Tracked objects:
  6312 ;;		On entry : 0/0
  6313 ;;		On exit  : 0/0
  6314 ;;		Unchanged: 0/0
  6315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6316 ;;      Params:         0       0       0       0       0       0       0
  6317 ;;      Locals:         2       0       0       0       0       0       0
  6318 ;;      Temps:          0       0       0       0       0       0       0
  6319 ;;      Totals:         2       0       0       0       0       0       0
  6320 ;;Total ram usage:        2 bytes
  6321 ;; Hardware stack levels used:    1
  6322 ;; Hardware stack levels required when called:    3
  6323 ;; This function calls:
  6324 ;;		_i2c_read
  6325 ;;		_i2c_rep_start
  6326 ;;		_i2c_start
  6327 ;;		_i2c_stop
  6328 ;;		_i2c_write
  6329 ;; This function is called by:
  6330 ;;		_get_time
  6331 ;;		_init_ds1307
  6332 ;; This function uses a non-reentrant model
  6333 ;;
  6334                           
  6335                           	psect	text18
  6336  00106C                     __ptext18:
  6337                           	opt stack 0
  6338  00106C                     _read_ds1307:
  6339                           	opt stack 25
  6340                           
  6341                           ;incstack = 0
  6342                           ;read_ds1307@address stored from wreg
  6343  00106C  6E02               	movwf	read_ds1307@address,c
  6344                           
  6345                           ;ds1307.c: 56: unsigned char data;
  6346                           ;ds1307.c: 58: i2c_start();
  6347  00106E  EC6E  F007         	call	_i2c_start	;wreg free
  6348                           
  6349                           ;ds1307.c: 59: i2c_write(0xD0);
  6350  001072  0ED0               	movlw	208
  6351  001074  EC82  F007         	call	_i2c_write
  6352                           
  6353                           ;ds1307.c: 60: i2c_write(address);
  6354  001078  5002               	movf	read_ds1307@address,w,c
  6355  00107A  EC82  F007         	call	_i2c_write
  6356                           
  6357                           ;ds1307.c: 61: i2c_rep_start();
  6358  00107E  EC6A  F007         	call	_i2c_rep_start	;wreg free
  6359                           
  6360                           ;ds1307.c: 62: i2c_write(0xD1);
  6361  001082  0ED1               	movlw	209
  6362  001084  EC82  F007         	call	_i2c_write
  6363                           
  6364                           ;ds1307.c: 63: data = i2c_read();
  6365  001088  EC7C  F007         	call	_i2c_read	;wreg free
  6366  00108C  6E03               	movwf	read_ds1307@data,c
  6367                           
  6368                           ;ds1307.c: 64: i2c_stop();
  6369  00108E  EC72  F007         	call	_i2c_stop	;wreg free
  6370                           
  6371                           ;ds1307.c: 66: return data;
  6372  001092  5003               	movf	read_ds1307@data,w,c
  6373  001094  0012               	return	
  6374  001096                     __end_of_read_ds1307:
  6375                           	opt stack 0
  6376                           tblptru	equ	0xFF8
  6377                           tblptrh	equ	0xFF7
  6378                           tblptrl	equ	0xFF6
  6379                           tablat	equ	0xFF5
  6380                           intcon2	equ	0xFF1
  6381                           postinc0	equ	0xFEE
  6382                           wreg	equ	0xFE8
  6383                           indf1	equ	0xFE7
  6384                           postinc1	equ	0xFE6
  6385                           postdec1	equ	0xFE5
  6386                           plusw1	equ	0xFE3
  6387                           fsr1h	equ	0xFE2
  6388                           fsr1l	equ	0xFE1
  6389                           indf2	equ	0xFDF
  6390                           postinc2	equ	0xFDE
  6391                           plusw2	equ	0xFDB
  6392                           fsr2h	equ	0xFDA
  6393                           fsr2l	equ	0xFD9
  6394                           status	equ	0xFD8
  6395                           
  6396 ;; *************** function _download *****************
  6397 ;; Defined at:
  6398 ;;		line 6 in file "download.c"
  6399 ;; Parameters:    Size  Location     Type
  6400 ;;		None
  6401 ;; Auto vars:     Size  Location     Type
  6402 ;;  i               2   21[COMRAM] int 
  6403 ;;  display        17    3[COMRAM] unsigned char [17]
  6404 ;;  less            1   20[COMRAM] unsigned char 
  6405 ;; Return value:  Size  Location     Type
  6406 ;;                  2  199[None  ] int 
  6407 ;; Registers used:
  6408 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6409 ;; Tracked objects:
  6410 ;;		On entry : 0/0
  6411 ;;		On exit  : 0/0
  6412 ;;		Unchanged: 0/0
  6413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6414 ;;      Params:         0       0       0       0       0       0       0
  6415 ;;      Locals:        20       0       0       0       0       0       0
  6416 ;;      Temps:          0       0       0       0       0       0       0
  6417 ;;      Totals:        20       0       0       0       0       0       0
  6418 ;;Total ram usage:       20 bytes
  6419 ;; Hardware stack levels used:    1
  6420 ;; Hardware stack levels required when called:    4
  6421 ;; This function calls:
  6422 ;;		_puts
  6423 ;;		_readEEP
  6424 ;; This function is called by:
  6425 ;;		_main
  6426 ;; This function uses a non-reentrant model
  6427 ;;
  6428                           
  6429                           	psect	text19
  6430  0012EC                     __ptext19:
  6431                           	opt stack 0
  6432  0012EC                     _download:
  6433                           	opt stack 26
  6434                           
  6435                           ;download.c: 8: unsigned char less=0x00,display[17];
  6436                           
  6437                           ;incstack = 0
  6438  0012EC  0E00               	movlw	0
  6439  0012EE  6E15               	movwf	download@less,c
  6440                           
  6441                           ;download.c: 9: display[16]='\0';
  6442  0012F0  0E00               	movlw	0
  6443  0012F2  6E14               	movwf	download@display+16,c
  6444  0012F4                     l3498:
  6445                           
  6446                           ;download.c: 12: {
  6447                           ;download.c: 13: if(less != 0xA0)
  6448  0012F4  0EA0               	movlw	160
  6449  0012F6  1815               	xorwf	download@less,w,c
  6450  0012F8  B4D8               	btfsc	status,2,c
  6451  0012FA  0012               	return	
  6452                           
  6453                           ;download.c: 14: {
  6454                           ;download.c: 15: for (int i =0 ;i<16;i++)
  6455  0012FC  0E00               	movlw	0
  6456  0012FE  6E17               	movwf	download@i+1,c
  6457  001300  0E00               	movlw	0
  6458  001302  6E16               	movwf	download@i,c
  6459  001304                     l3502:
  6460  001304  BE17               	btfsc	download@i+1,7,c
  6461  001306  D006               	goto	l3506
  6462  001308  5017               	movf	download@i+1,w,c
  6463  00130A  E112               	bnz	l3514
  6464  00130C  0E10               	movlw	16
  6465  00130E  5C16               	subwf	download@i,w,c
  6466  001310  B0D8               	btfsc	status,0,c
  6467  001312  D00E               	goto	l3514
  6468  001314                     l3506:
  6469                           
  6470                           ;download.c: 16: {
  6471                           ;download.c: 17: display[i]=readEEP(less++);
  6472  001314  0E04               	movlw	low download@display
  6473  001316  2416               	addwf	download@i,w,c
  6474  001318  6ED9               	movwf	fsr2l,c
  6475  00131A  0E00               	movlw	high download@display
  6476  00131C  2017               	addwfc	download@i+1,w,c
  6477  00131E  6EDA               	movwf	fsr2h,c
  6478  001320  5015               	movf	download@less,w,c
  6479  001322  EC21  F008         	call	_readEEP
  6480  001326  6EDF               	movwf	indf2,c
  6481  001328  2A15               	incf	download@less,f,c
  6482  00132A  4A16               	infsnz	download@i,f,c
  6483  00132C  2A17               	incf	download@i+1,f,c
  6484  00132E  D7EA               	goto	l3502
  6485  001330                     l3514:
  6486                           
  6487                           ;download.c: 18: }
  6488                           ;download.c: 19: puts(display);
  6489  001330  0E04               	movlw	low download@display
  6490  001332  6E02               	movwf	puts@s,c
  6491  001334  0E00               	movlw	high download@display
  6492  001336  6E03               	movwf	puts@s+1,c
  6493  001338  EC4D  F009         	call	_puts	;wreg free
  6494                           
  6495                           ;download.c: 20: puts("\n\r");
  6496  00133C  0EF8               	movlw	low STR_17
  6497  00133E  6E02               	movwf	puts@s,c
  6498  001340  0E2F               	movlw	high STR_17
  6499  001342  6E03               	movwf	puts@s+1,c
  6500  001344  EC4D  F009         	call	_puts	;wreg free
  6501                           
  6502                           ;download.c: 21: }
  6503  001348  D7D5               	goto	l3498
  6504  00134A                     __end_of_download:
  6505                           	opt stack 0
  6506                           tblptru	equ	0xFF8
  6507                           tblptrh	equ	0xFF7
  6508                           tblptrl	equ	0xFF6
  6509                           tablat	equ	0xFF5
  6510                           intcon2	equ	0xFF1
  6511                           postinc0	equ	0xFEE
  6512                           wreg	equ	0xFE8
  6513                           indf1	equ	0xFE7
  6514                           postinc1	equ	0xFE6
  6515                           postdec1	equ	0xFE5
  6516                           plusw1	equ	0xFE3
  6517                           fsr1h	equ	0xFE2
  6518                           fsr1l	equ	0xFE1
  6519                           indf2	equ	0xFDF
  6520                           postinc2	equ	0xFDE
  6521                           plusw2	equ	0xFDB
  6522                           fsr2h	equ	0xFDA
  6523                           fsr2l	equ	0xFD9
  6524                           status	equ	0xFD8
  6525                           
  6526 ;; *************** function _readEEP *****************
  6527 ;; Defined at:
  6528 ;;		line 22 in file "EEP.c"
  6529 ;; Parameters:    Size  Location     Type
  6530 ;;  address         1    wreg     unsigned char 
  6531 ;; Auto vars:     Size  Location     Type
  6532 ;;  address         1    1[COMRAM] unsigned char 
  6533 ;;  data            1    2[COMRAM] unsigned char 
  6534 ;; Return value:  Size  Location     Type
  6535 ;;                  1    wreg      unsigned char 
  6536 ;; Registers used:
  6537 ;;		wreg, status,2, cstack
  6538 ;; Tracked objects:
  6539 ;;		On entry : 0/0
  6540 ;;		On exit  : 0/0
  6541 ;;		Unchanged: 0/0
  6542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6543 ;;      Params:         0       0       0       0       0       0       0
  6544 ;;      Locals:         2       0       0       0       0       0       0
  6545 ;;      Temps:          0       0       0       0       0       0       0
  6546 ;;      Totals:         2       0       0       0       0       0       0
  6547 ;;Total ram usage:        2 bytes
  6548 ;; Hardware stack levels used:    1
  6549 ;; Hardware stack levels required when called:    3
  6550 ;; This function calls:
  6551 ;;		_i2c_read
  6552 ;;		_i2c_rep_start
  6553 ;;		_i2c_start
  6554 ;;		_i2c_stop
  6555 ;;		_i2c_write
  6556 ;; This function is called by:
  6557 ;;		_download
  6558 ;;		_view
  6559 ;; This function uses a non-reentrant model
  6560 ;;
  6561                           
  6562                           	psect	text20
  6563  001042                     __ptext20:
  6564                           	opt stack 0
  6565  001042                     _readEEP:
  6566                           	opt stack 26
  6567                           
  6568                           ;incstack = 0
  6569                           ;readEEP@address stored from wreg
  6570  001042  6E02               	movwf	readEEP@address,c
  6571                           
  6572                           ;EEP.c: 24: unsigned char data;
  6573                           ;EEP.c: 26: i2c_start();
  6574  001044  EC6E  F007         	call	_i2c_start	;wreg free
  6575                           
  6576                           ;EEP.c: 27: i2c_write(0xA0);
  6577  001048  0EA0               	movlw	160
  6578  00104A  EC82  F007         	call	_i2c_write
  6579                           
  6580                           ;EEP.c: 28: i2c_write(address);
  6581  00104E  5002               	movf	readEEP@address,w,c
  6582  001050  EC82  F007         	call	_i2c_write
  6583                           
  6584                           ;EEP.c: 29: i2c_rep_start();
  6585  001054  EC6A  F007         	call	_i2c_rep_start	;wreg free
  6586                           
  6587                           ;EEP.c: 30: i2c_write(0xA1);
  6588  001058  0EA1               	movlw	161
  6589  00105A  EC82  F007         	call	_i2c_write
  6590                           
  6591                           ;EEP.c: 31: data = i2c_read();
  6592  00105E  EC7C  F007         	call	_i2c_read	;wreg free
  6593  001062  6E03               	movwf	readEEP@data,c
  6594                           
  6595                           ;EEP.c: 32: i2c_stop();
  6596  001064  EC72  F007         	call	_i2c_stop	;wreg free
  6597                           
  6598                           ;EEP.c: 34: return data;
  6599  001068  5003               	movf	readEEP@data,w,c
  6600  00106A  0012               	return	
  6601  00106C                     __end_of_readEEP:
  6602                           	opt stack 0
  6603                           tblptru	equ	0xFF8
  6604                           tblptrh	equ	0xFF7
  6605                           tblptrl	equ	0xFF6
  6606                           tablat	equ	0xFF5
  6607                           intcon2	equ	0xFF1
  6608                           postinc0	equ	0xFEE
  6609                           wreg	equ	0xFE8
  6610                           indf1	equ	0xFE7
  6611                           postinc1	equ	0xFE6
  6612                           postdec1	equ	0xFE5
  6613                           plusw1	equ	0xFE3
  6614                           fsr1h	equ	0xFE2
  6615                           fsr1l	equ	0xFE1
  6616                           indf2	equ	0xFDF
  6617                           postinc2	equ	0xFDE
  6618                           plusw2	equ	0xFDB
  6619                           fsr2h	equ	0xFDA
  6620                           fsr2l	equ	0xFD9
  6621                           status	equ	0xFD8
  6622                           
  6623 ;; *************** function _i2c_write *****************
  6624 ;; Defined at:
  6625 ;;		line 54 in file "i2c.c"
  6626 ;; Parameters:    Size  Location     Type
  6627 ;;  data            1    wreg     unsigned char 
  6628 ;; Auto vars:     Size  Location     Type
  6629 ;;  data            1    0[COMRAM] unsigned char 
  6630 ;; Return value:  Size  Location     Type
  6631 ;;                  1    wreg      void 
  6632 ;; Registers used:
  6633 ;;		wreg, cstack
  6634 ;; Tracked objects:
  6635 ;;		On entry : 0/0
  6636 ;;		On exit  : 0/0
  6637 ;;		Unchanged: 0/0
  6638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6639 ;;      Params:         0       0       0       0       0       0       0
  6640 ;;      Locals:         1       0       0       0       0       0       0
  6641 ;;      Temps:          0       0       0       0       0       0       0
  6642 ;;      Totals:         1       0       0       0       0       0       0
  6643 ;;Total ram usage:        1 bytes
  6644 ;; Hardware stack levels used:    1
  6645 ;; Hardware stack levels required when called:    1
  6646 ;; This function calls:
  6647 ;;		_i2c_idle
  6648 ;; This function is called by:
  6649 ;;		_writeEEP
  6650 ;;		_readEEP
  6651 ;;		_write_ds1307
  6652 ;;		_read_ds1307
  6653 ;; This function uses a non-reentrant model
  6654 ;;
  6655                           
  6656                           	psect	text21
  6657  000F04                     __ptext21:
  6658                           	opt stack 0
  6659  000F04                     _i2c_write:
  6660                           	opt stack 28
  6661                           
  6662                           ;incstack = 0
  6663                           ;i2c_write@data stored from wreg
  6664  000F04  6E01               	movwf	i2c_write@data,c
  6665                           
  6666                           ;i2c.c: 56: SSPBUF = data;
  6667  000F06  C001  FFC9         	movff	i2c_write@data,4041	;volatile
  6668                           
  6669                           ;i2c.c: 57: i2c_idle();
  6670  000F0A  EC62  F007         	call	_i2c_idle	;wreg free
  6671  000F0E  0012               	return		;funcret
  6672  000F10                     __end_of_i2c_write:
  6673                           	opt stack 0
  6674                           tblptru	equ	0xFF8
  6675                           tblptrh	equ	0xFF7
  6676                           tblptrl	equ	0xFF6
  6677                           tablat	equ	0xFF5
  6678                           intcon2	equ	0xFF1
  6679                           postinc0	equ	0xFEE
  6680                           wreg	equ	0xFE8
  6681                           indf1	equ	0xFE7
  6682                           postinc1	equ	0xFE6
  6683                           postdec1	equ	0xFE5
  6684                           plusw1	equ	0xFE3
  6685                           fsr1h	equ	0xFE2
  6686                           fsr1l	equ	0xFE1
  6687                           indf2	equ	0xFDF
  6688                           postinc2	equ	0xFDE
  6689                           plusw2	equ	0xFDB
  6690                           fsr2h	equ	0xFDA
  6691                           fsr2l	equ	0xFD9
  6692                           status	equ	0xFD8
  6693                           
  6694 ;; *************** function _i2c_stop *****************
  6695 ;; Defined at:
  6696 ;;		line 42 in file "i2c.c"
  6697 ;; Parameters:    Size  Location     Type
  6698 ;;		None
  6699 ;; Auto vars:     Size  Location     Type
  6700 ;;		None
  6701 ;; Return value:  Size  Location     Type
  6702 ;;                  1    wreg      void 
  6703 ;; Registers used:
  6704 ;;		cstack
  6705 ;; Tracked objects:
  6706 ;;		On entry : 0/0
  6707 ;;		On exit  : 0/0
  6708 ;;		Unchanged: 0/0
  6709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6710 ;;      Params:         0       0       0       0       0       0       0
  6711 ;;      Locals:         0       0       0       0       0       0       0
  6712 ;;      Temps:          0       0       0       0       0       0       0
  6713 ;;      Totals:         0       0       0       0       0       0       0
  6714 ;;Total ram usage:        0 bytes
  6715 ;; Hardware stack levels used:    1
  6716 ;; Hardware stack levels required when called:    1
  6717 ;; This function calls:
  6718 ;;		_i2c_idle
  6719 ;; This function is called by:
  6720 ;;		_writeEEP
  6721 ;;		_readEEP
  6722 ;;		_write_ds1307
  6723 ;;		_read_ds1307
  6724 ;; This function uses a non-reentrant model
  6725 ;;
  6726                           
  6727                           	psect	text22
  6728  000EE4                     __ptext22:
  6729                           	opt stack 0
  6730  000EE4                     _i2c_stop:
  6731                           	opt stack 28
  6732                           
  6733                           ;i2c.c: 44: PEN = 1;
  6734                           
  6735                           ;incstack = 0
  6736  000EE4  84C5               	bsf	4037,2,c	;volatile
  6737                           
  6738                           ;i2c.c: 45: i2c_idle();
  6739  000EE6  EC62  F007         	call	_i2c_idle	;wreg free
  6740  000EEA  0012               	return		;funcret
  6741  000EEC                     __end_of_i2c_stop:
  6742                           	opt stack 0
  6743                           tblptru	equ	0xFF8
  6744                           tblptrh	equ	0xFF7
  6745                           tblptrl	equ	0xFF6
  6746                           tablat	equ	0xFF5
  6747                           intcon2	equ	0xFF1
  6748                           postinc0	equ	0xFEE
  6749                           wreg	equ	0xFE8
  6750                           indf1	equ	0xFE7
  6751                           postinc1	equ	0xFE6
  6752                           postdec1	equ	0xFE5
  6753                           plusw1	equ	0xFE3
  6754                           fsr1h	equ	0xFE2
  6755                           fsr1l	equ	0xFE1
  6756                           indf2	equ	0xFDF
  6757                           postinc2	equ	0xFDE
  6758                           plusw2	equ	0xFDB
  6759                           fsr2h	equ	0xFDA
  6760                           fsr2l	equ	0xFD9
  6761                           status	equ	0xFD8
  6762                           
  6763 ;; *************** function _i2c_start *****************
  6764 ;; Defined at:
  6765 ;;		line 36 in file "i2c.c"
  6766 ;; Parameters:    Size  Location     Type
  6767 ;;		None
  6768 ;; Auto vars:     Size  Location     Type
  6769 ;;		None
  6770 ;; Return value:  Size  Location     Type
  6771 ;;                  1    wreg      void 
  6772 ;; Registers used:
  6773 ;;		cstack
  6774 ;; Tracked objects:
  6775 ;;		On entry : 0/0
  6776 ;;		On exit  : 0/0
  6777 ;;		Unchanged: 0/0
  6778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6779 ;;      Params:         0       0       0       0       0       0       0
  6780 ;;      Locals:         0       0       0       0       0       0       0
  6781 ;;      Temps:          0       0       0       0       0       0       0
  6782 ;;      Totals:         0       0       0       0       0       0       0
  6783 ;;Total ram usage:        0 bytes
  6784 ;; Hardware stack levels used:    1
  6785 ;; Hardware stack levels required when called:    1
  6786 ;; This function calls:
  6787 ;;		_i2c_idle
  6788 ;; This function is called by:
  6789 ;;		_writeEEP
  6790 ;;		_readEEP
  6791 ;;		_write_ds1307
  6792 ;;		_read_ds1307
  6793 ;; This function uses a non-reentrant model
  6794 ;;
  6795                           
  6796                           	psect	text23
  6797  000EDC                     __ptext23:
  6798                           	opt stack 0
  6799  000EDC                     _i2c_start:
  6800                           	opt stack 28
  6801                           
  6802                           ;i2c.c: 38: SEN = 1;
  6803                           
  6804                           ;incstack = 0
  6805  000EDC  80C5               	bsf	4037,0,c	;volatile
  6806                           
  6807                           ;i2c.c: 39: i2c_idle();
  6808  000EDE  EC62  F007         	call	_i2c_idle	;wreg free
  6809  000EE2  0012               	return		;funcret
  6810  000EE4                     __end_of_i2c_start:
  6811                           	opt stack 0
  6812                           tblptru	equ	0xFF8
  6813                           tblptrh	equ	0xFF7
  6814                           tblptrl	equ	0xFF6
  6815                           tablat	equ	0xFF5
  6816                           intcon2	equ	0xFF1
  6817                           postinc0	equ	0xFEE
  6818                           wreg	equ	0xFE8
  6819                           indf1	equ	0xFE7
  6820                           postinc1	equ	0xFE6
  6821                           postdec1	equ	0xFE5
  6822                           plusw1	equ	0xFE3
  6823                           fsr1h	equ	0xFE2
  6824                           fsr1l	equ	0xFE1
  6825                           indf2	equ	0xFDF
  6826                           postinc2	equ	0xFDE
  6827                           plusw2	equ	0xFDB
  6828                           fsr2h	equ	0xFDA
  6829                           fsr2l	equ	0xFD9
  6830                           status	equ	0xFD8
  6831                           
  6832 ;; *************** function _i2c_rep_start *****************
  6833 ;; Defined at:
  6834 ;;		line 48 in file "i2c.c"
  6835 ;; Parameters:    Size  Location     Type
  6836 ;;		None
  6837 ;; Auto vars:     Size  Location     Type
  6838 ;;		None
  6839 ;; Return value:  Size  Location     Type
  6840 ;;                  1    wreg      void 
  6841 ;; Registers used:
  6842 ;;		cstack
  6843 ;; Tracked objects:
  6844 ;;		On entry : 0/0
  6845 ;;		On exit  : 0/0
  6846 ;;		Unchanged: 0/0
  6847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6848 ;;      Params:         0       0       0       0       0       0       0
  6849 ;;      Locals:         0       0       0       0       0       0       0
  6850 ;;      Temps:          0       0       0       0       0       0       0
  6851 ;;      Totals:         0       0       0       0       0       0       0
  6852 ;;Total ram usage:        0 bytes
  6853 ;; Hardware stack levels used:    1
  6854 ;; Hardware stack levels required when called:    1
  6855 ;; This function calls:
  6856 ;;		_i2c_idle
  6857 ;; This function is called by:
  6858 ;;		_readEEP
  6859 ;;		_read_ds1307
  6860 ;; This function uses a non-reentrant model
  6861 ;;
  6862                           
  6863                           	psect	text24
  6864  000ED4                     __ptext24:
  6865                           	opt stack 0
  6866  000ED4                     _i2c_rep_start:
  6867                           	opt stack 27
  6868                           
  6869                           ;i2c.c: 50: RSEN = 1;
  6870                           
  6871                           ;incstack = 0
  6872  000ED4  82C5               	bsf	4037,1,c	;volatile
  6873                           
  6874                           ;i2c.c: 51: i2c_idle();
  6875  000ED6  EC62  F007         	call	_i2c_idle	;wreg free
  6876  000EDA  0012               	return		;funcret
  6877  000EDC                     __end_of_i2c_rep_start:
  6878                           	opt stack 0
  6879                           tblptru	equ	0xFF8
  6880                           tblptrh	equ	0xFF7
  6881                           tblptrl	equ	0xFF6
  6882                           tablat	equ	0xFF5
  6883                           intcon2	equ	0xFF1
  6884                           postinc0	equ	0xFEE
  6885                           wreg	equ	0xFE8
  6886                           indf1	equ	0xFE7
  6887                           postinc1	equ	0xFE6
  6888                           postdec1	equ	0xFE5
  6889                           plusw1	equ	0xFE3
  6890                           fsr1h	equ	0xFE2
  6891                           fsr1l	equ	0xFE1
  6892                           indf2	equ	0xFDF
  6893                           postinc2	equ	0xFDE
  6894                           plusw2	equ	0xFDB
  6895                           fsr2h	equ	0xFDA
  6896                           fsr2l	equ	0xFD9
  6897                           status	equ	0xFD8
  6898                           
  6899 ;; *************** function _i2c_read *****************
  6900 ;; Defined at:
  6901 ;;		line 72 in file "i2c.c"
  6902 ;; Parameters:    Size  Location     Type
  6903 ;;		None
  6904 ;; Auto vars:     Size  Location     Type
  6905 ;;		None
  6906 ;; Return value:  Size  Location     Type
  6907 ;;                  1    wreg      unsigned char 
  6908 ;; Registers used:
  6909 ;;		wreg, status,2, cstack
  6910 ;; Tracked objects:
  6911 ;;		On entry : 0/0
  6912 ;;		On exit  : 0/0
  6913 ;;		Unchanged: 0/0
  6914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6915 ;;      Params:         0       0       0       0       0       0       0
  6916 ;;      Locals:         0       0       0       0       0       0       0
  6917 ;;      Temps:          0       0       0       0       0       0       0
  6918 ;;      Totals:         0       0       0       0       0       0       0
  6919 ;;Total ram usage:        0 bytes
  6920 ;; Hardware stack levels used:    1
  6921 ;; Hardware stack levels required when called:    2
  6922 ;; This function calls:
  6923 ;;		_i2c_no_ack
  6924 ;;		_i2c_rx_mode
  6925 ;; This function is called by:
  6926 ;;		_readEEP
  6927 ;;		_read_ds1307
  6928 ;; This function uses a non-reentrant model
  6929 ;;
  6930                           
  6931                           	psect	text25
  6932  000EF8                     __ptext25:
  6933                           	opt stack 0
  6934  000EF8                     _i2c_read:
  6935                           	opt stack 26
  6936                           
  6937                           ;i2c.c: 74: i2c_rx_mode();
  6938                           
  6939                           ;incstack = 0
  6940  000EF8  EC66  F007         	call	_i2c_rx_mode	;wreg free
  6941                           
  6942                           ;i2c.c: 75: i2c_no_ack();
  6943  000EFC  EC5F  F007         	call	_i2c_no_ack	;wreg free
  6944                           
  6945                           ;i2c.c: 77: return SSPBUF;
  6946  000F00  50C9               	movf	4041,w,c	;volatile
  6947  000F02  0012               	return	
  6948  000F04                     __end_of_i2c_read:
  6949                           	opt stack 0
  6950                           tblptru	equ	0xFF8
  6951                           tblptrh	equ	0xFF7
  6952                           tblptrl	equ	0xFF6
  6953                           tablat	equ	0xFF5
  6954                           intcon2	equ	0xFF1
  6955                           postinc0	equ	0xFEE
  6956                           wreg	equ	0xFE8
  6957                           indf1	equ	0xFE7
  6958                           postinc1	equ	0xFE6
  6959                           postdec1	equ	0xFE5
  6960                           plusw1	equ	0xFE3
  6961                           fsr1h	equ	0xFE2
  6962                           fsr1l	equ	0xFE1
  6963                           indf2	equ	0xFDF
  6964                           postinc2	equ	0xFDE
  6965                           plusw2	equ	0xFDB
  6966                           fsr2h	equ	0xFDA
  6967                           fsr2l	equ	0xFD9
  6968                           status	equ	0xFD8
  6969                           
  6970 ;; *************** function _i2c_rx_mode *****************
  6971 ;; Defined at:
  6972 ;;		line 60 in file "i2c.c"
  6973 ;; Parameters:    Size  Location     Type
  6974 ;;		None
  6975 ;; Auto vars:     Size  Location     Type
  6976 ;;		None
  6977 ;; Return value:  Size  Location     Type
  6978 ;;                  1    wreg      void 
  6979 ;; Registers used:
  6980 ;;		cstack
  6981 ;; Tracked objects:
  6982 ;;		On entry : 0/0
  6983 ;;		On exit  : 0/0
  6984 ;;		Unchanged: 0/0
  6985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6986 ;;      Params:         0       0       0       0       0       0       0
  6987 ;;      Locals:         0       0       0       0       0       0       0
  6988 ;;      Temps:          0       0       0       0       0       0       0
  6989 ;;      Totals:         0       0       0       0       0       0       0
  6990 ;;Total ram usage:        0 bytes
  6991 ;; Hardware stack levels used:    1
  6992 ;; Hardware stack levels required when called:    1
  6993 ;; This function calls:
  6994 ;;		_i2c_idle
  6995 ;; This function is called by:
  6996 ;;		_i2c_read
  6997 ;; This function uses a non-reentrant model
  6998 ;;
  6999                           
  7000                           	psect	text26
  7001  000ECC                     __ptext26:
  7002                           	opt stack 0
  7003  000ECC                     _i2c_rx_mode:
  7004                           	opt stack 26
  7005                           
  7006                           ;i2c.c: 62: RCEN = 1;
  7007                           
  7008                           ;incstack = 0
  7009  000ECC  86C5               	bsf	4037,3,c	;volatile
  7010                           
  7011                           ;i2c.c: 63: i2c_idle();
  7012  000ECE  EC62  F007         	call	_i2c_idle	;wreg free
  7013  000ED2  0012               	return		;funcret
  7014  000ED4                     __end_of_i2c_rx_mode:
  7015                           	opt stack 0
  7016                           tblptru	equ	0xFF8
  7017                           tblptrh	equ	0xFF7
  7018                           tblptrl	equ	0xFF6
  7019                           tablat	equ	0xFF5
  7020                           intcon2	equ	0xFF1
  7021                           postinc0	equ	0xFEE
  7022                           wreg	equ	0xFE8
  7023                           indf1	equ	0xFE7
  7024                           postinc1	equ	0xFE6
  7025                           postdec1	equ	0xFE5
  7026                           plusw1	equ	0xFE3
  7027                           fsr1h	equ	0xFE2
  7028                           fsr1l	equ	0xFE1
  7029                           indf2	equ	0xFDF
  7030                           postinc2	equ	0xFDE
  7031                           plusw2	equ	0xFDB
  7032                           fsr2h	equ	0xFDA
  7033                           fsr2l	equ	0xFD9
  7034                           status	equ	0xFD8
  7035                           
  7036 ;; *************** function _i2c_idle *****************
  7037 ;; Defined at:
  7038 ;;		line 22 in file "i2c.c"
  7039 ;; Parameters:    Size  Location     Type
  7040 ;;		None
  7041 ;; Auto vars:     Size  Location     Type
  7042 ;;		None
  7043 ;; Return value:  Size  Location     Type
  7044 ;;                  1    wreg      void 
  7045 ;; Registers used:
  7046 ;;		None
  7047 ;; Tracked objects:
  7048 ;;		On entry : 0/0
  7049 ;;		On exit  : 0/0
  7050 ;;		Unchanged: 0/0
  7051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7052 ;;      Params:         0       0       0       0       0       0       0
  7053 ;;      Locals:         0       0       0       0       0       0       0
  7054 ;;      Temps:          0       0       0       0       0       0       0
  7055 ;;      Totals:         0       0       0       0       0       0       0
  7056 ;;Total ram usage:        0 bytes
  7057 ;; Hardware stack levels used:    1
  7058 ;; This function calls:
  7059 ;;		Nothing
  7060 ;; This function is called by:
  7061 ;;		_i2c_start
  7062 ;;		_i2c_stop
  7063 ;;		_i2c_rep_start
  7064 ;;		_i2c_write
  7065 ;;		_i2c_rx_mode
  7066 ;; This function uses a non-reentrant model
  7067 ;;
  7068                           
  7069                           	psect	text27
  7070  000EC4                     __ptext27:
  7071                           	opt stack 0
  7072  000EC4                     _i2c_idle:
  7073                           	opt stack 28
  7074  000EC4                     l555:
  7075  000EC4  A69E               	btfss	3998,3,c	;volatile
  7076  000EC6  D7FE               	goto	l555
  7077                           
  7078                           ;i2c.c: 25: SSPIF = 0;
  7079  000EC8  969E               	bcf	3998,3,c	;volatile
  7080  000ECA  0012               	return		;funcret
  7081  000ECC                     __end_of_i2c_idle:
  7082                           	opt stack 0
  7083                           tblptru	equ	0xFF8
  7084                           tblptrh	equ	0xFF7
  7085                           tblptrl	equ	0xFF6
  7086                           tablat	equ	0xFF5
  7087                           intcon2	equ	0xFF1
  7088                           postinc0	equ	0xFEE
  7089                           wreg	equ	0xFE8
  7090                           indf1	equ	0xFE7
  7091                           postinc1	equ	0xFE6
  7092                           postdec1	equ	0xFE5
  7093                           plusw1	equ	0xFE3
  7094                           fsr1h	equ	0xFE2
  7095                           fsr1l	equ	0xFE1
  7096                           indf2	equ	0xFDF
  7097                           postinc2	equ	0xFDE
  7098                           plusw2	equ	0xFDB
  7099                           fsr2h	equ	0xFDA
  7100                           fsr2l	equ	0xFD9
  7101                           status	equ	0xFD8
  7102                           
  7103 ;; *************** function _i2c_no_ack *****************
  7104 ;; Defined at:
  7105 ;;		line 66 in file "i2c.c"
  7106 ;; Parameters:    Size  Location     Type
  7107 ;;		None
  7108 ;; Auto vars:     Size  Location     Type
  7109 ;;		None
  7110 ;; Return value:  Size  Location     Type
  7111 ;;                  1    wreg      void 
  7112 ;; Registers used:
  7113 ;;		None
  7114 ;; Tracked objects:
  7115 ;;		On entry : 0/0
  7116 ;;		On exit  : 0/0
  7117 ;;		Unchanged: 0/0
  7118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7119 ;;      Params:         0       0       0       0       0       0       0
  7120 ;;      Locals:         0       0       0       0       0       0       0
  7121 ;;      Temps:          0       0       0       0       0       0       0
  7122 ;;      Totals:         0       0       0       0       0       0       0
  7123 ;;Total ram usage:        0 bytes
  7124 ;; Hardware stack levels used:    1
  7125 ;; This function calls:
  7126 ;;		Nothing
  7127 ;; This function is called by:
  7128 ;;		_i2c_read
  7129 ;; This function uses a non-reentrant model
  7130 ;;
  7131                           
  7132                           	psect	text28
  7133  000EBE                     __ptext28:
  7134                           	opt stack 0
  7135  000EBE                     _i2c_no_ack:
  7136                           	opt stack 27
  7137                           
  7138                           ;i2c.c: 68: ACKDT = 1;
  7139                           
  7140                           ;incstack = 0
  7141  000EBE  8AC5               	bsf	4037,5,c	;volatile
  7142                           
  7143                           ;i2c.c: 69: ACKEN = 1;
  7144  000EC0  88C5               	bsf	4037,4,c	;volatile
  7145  000EC2  0012               	return		;funcret
  7146  000EC4                     __end_of_i2c_no_ack:
  7147                           	opt stack 0
  7148                           tblptru	equ	0xFF8
  7149                           tblptrh	equ	0xFF7
  7150                           tblptrl	equ	0xFF6
  7151                           tablat	equ	0xFF5
  7152                           intcon2	equ	0xFF1
  7153                           postinc0	equ	0xFEE
  7154                           wreg	equ	0xFE8
  7155                           indf1	equ	0xFE7
  7156                           postinc1	equ	0xFE6
  7157                           postdec1	equ	0xFE5
  7158                           plusw1	equ	0xFE3
  7159                           fsr1h	equ	0xFE2
  7160                           fsr1l	equ	0xFE1
  7161                           indf2	equ	0xFDF
  7162                           postinc2	equ	0xFDE
  7163                           plusw2	equ	0xFDB
  7164                           fsr2h	equ	0xFDA
  7165                           fsr2l	equ	0xFD9
  7166                           status	equ	0xFD8
  7167                           
  7168 ;; *************** function _puts *****************
  7169 ;; Defined at:
  7170 ;;		line 90 in file "uart.c"
  7171 ;; Parameters:    Size  Location     Type
  7172 ;;  s               2    1[COMRAM] PTR const unsigned char 
  7173 ;;		 -> STR_35(3), download@display(17), STR_19(3), STR_18(6), 
  7174 ;;		 -> STR_17(3), STR_16(6), main@clear(9), main@store(17), 
  7175 ;;		 -> time(9), 
  7176 ;; Auto vars:     Size  Location     Type
  7177 ;;		None
  7178 ;; Return value:  Size  Location     Type
  7179 ;;                  2    1[COMRAM] int 
  7180 ;; Registers used:
  7181 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7182 ;; Tracked objects:
  7183 ;;		On entry : 0/0
  7184 ;;		On exit  : 0/0
  7185 ;;		Unchanged: 0/0
  7186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7187 ;;      Params:         2       0       0       0       0       0       0
  7188 ;;      Locals:         0       0       0       0       0       0       0
  7189 ;;      Temps:          0       0       0       0       0       0       0
  7190 ;;      Totals:         2       0       0       0       0       0       0
  7191 ;;Total ram usage:        2 bytes
  7192 ;; Hardware stack levels used:    1
  7193 ;; Hardware stack levels required when called:    1
  7194 ;; This function calls:
  7195 ;;		_putch
  7196 ;; This function is called by:
  7197 ;;		_main
  7198 ;;		_download
  7199 ;; This function uses a non-reentrant model
  7200 ;;
  7201                           
  7202                           	psect	text29
  7203  00129A                     __ptext29:
  7204                           	opt stack 0
  7205  00129A                     _puts:
  7206                           	opt stack 29
  7207                           
  7208                           ;uart.c: 92: while(*s)
  7209                           
  7210                           ;incstack = 0
  7211  00129A  D014               	goto	l2890
  7212  00129C                     l2886:
  7213                           
  7214                           ;uart.c: 93: {
  7215                           ;uart.c: 94: putch(*s++);
  7216  00129C  C002  FFF6         	movff	puts@s,tblptrl
  7217  0012A0  C003  FFF7         	movff	puts@s+1,tblptrh
  7218  0012A4  6AF8               	clrf	tblptru,c
  7219  0012A6  0E05               	movlw	(high __ramtop+-1)
  7220  0012A8  64F7               	cpfsgt	tblptrh,c
  7221  0012AA  D003               	bra	u2327
  7222  0012AC  0008               	tblrd		*
  7223  0012AE  50F5               	movf	tablat,w,c
  7224  0012B0  D005               	bra	u2320
  7225  0012B2                     u2327:
  7226  0012B2  CFF6 FFE9          	movff	tblptrl,fsr0l
  7227  0012B6  CFF7 FFEA          	movff	tblptrh,fsr0h
  7228  0012BA  50EF               	movf	indf0,w,c
  7229  0012BC                     u2320:
  7230  0012BC  EC76  F007         	call	_putch
  7231  0012C0  4A02               	infsnz	puts@s,f,c
  7232  0012C2  2A03               	incf	puts@s+1,f,c
  7233  0012C4                     l2890:
  7234  0012C4  C002  FFF6         	movff	puts@s,tblptrl
  7235  0012C8  C003  FFF7         	movff	puts@s+1,tblptrh
  7236  0012CC  6AF8               	clrf	tblptru,c
  7237  0012CE  0E05               	movlw	(high __ramtop+-1)
  7238  0012D0  64F7               	cpfsgt	tblptrh,c
  7239  0012D2  D003               	bra	u2337
  7240  0012D4  0008               	tblrd		*
  7241  0012D6  50F5               	movf	tablat,w,c
  7242  0012D8  D005               	bra	u2330
  7243  0012DA                     u2337:
  7244  0012DA  CFF6 FFE9          	movff	tblptrl,fsr0l
  7245  0012DE  CFF7 FFEA          	movff	tblptrh,fsr0h
  7246  0012E2  50EF               	movf	indf0,w,c
  7247  0012E4                     u2330:
  7248  0012E4  0900               	iorlw	0
  7249  0012E6  B4D8               	btfsc	status,2,c
  7250  0012E8  0012               	return	
  7251  0012EA  D7D8               	goto	l2886
  7252  0012EC                     __end_of_puts:
  7253                           	opt stack 0
  7254                           tblptru	equ	0xFF8
  7255                           tblptrh	equ	0xFF7
  7256                           tblptrl	equ	0xFF6
  7257                           tablat	equ	0xFF5
  7258                           intcon2	equ	0xFF1
  7259                           indf0	equ	0xFEF
  7260                           postinc0	equ	0xFEE
  7261                           fsr0h	equ	0xFEA
  7262                           fsr0l	equ	0xFE9
  7263                           wreg	equ	0xFE8
  7264                           indf1	equ	0xFE7
  7265                           postinc1	equ	0xFE6
  7266                           postdec1	equ	0xFE5
  7267                           plusw1	equ	0xFE3
  7268                           fsr1h	equ	0xFE2
  7269                           fsr1l	equ	0xFE1
  7270                           indf2	equ	0xFDF
  7271                           postinc2	equ	0xFDE
  7272                           plusw2	equ	0xFDB
  7273                           fsr2h	equ	0xFDA
  7274                           fsr2l	equ	0xFD9
  7275                           status	equ	0xFD8
  7276                           
  7277 ;; *************** function _putch *****************
  7278 ;; Defined at:
  7279 ;;		line 79 in file "uart.c"
  7280 ;; Parameters:    Size  Location     Type
  7281 ;;  byte            1    wreg     unsigned char 
  7282 ;; Auto vars:     Size  Location     Type
  7283 ;;  byte            1    0[COMRAM] unsigned char 
  7284 ;; Return value:  Size  Location     Type
  7285 ;;                  1    wreg      void 
  7286 ;; Registers used:
  7287 ;;		wreg
  7288 ;; Tracked objects:
  7289 ;;		On entry : 0/0
  7290 ;;		On exit  : 0/0
  7291 ;;		Unchanged: 0/0
  7292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7293 ;;      Params:         0       0       0       0       0       0       0
  7294 ;;      Locals:         1       0       0       0       0       0       0
  7295 ;;      Temps:          0       0       0       0       0       0       0
  7296 ;;      Totals:         1       0       0       0       0       0       0
  7297 ;;Total ram usage:        1 bytes
  7298 ;; Hardware stack levels used:    1
  7299 ;; This function calls:
  7300 ;;		Nothing
  7301 ;; This function is called by:
  7302 ;;		_puts
  7303 ;;		_getche
  7304 ;; This function uses a non-reentrant model
  7305 ;;
  7306                           
  7307                           	psect	text30
  7308  000EEC                     __ptext30:
  7309                           	opt stack 0
  7310  000EEC                     _putch:
  7311                           	opt stack 29
  7312                           
  7313                           ;incstack = 0
  7314                           ;putch@byte stored from wreg
  7315  000EEC  6E01               	movwf	putch@byte,c
  7316  000EEE                     l145:
  7317  000EEE  A89E               	btfss	3998,4,c	;volatile
  7318  000EF0  D7FE               	goto	l145
  7319                           
  7320                           ;uart.c: 86: }
  7321                           ;uart.c: 87: TXREG = byte;
  7322  000EF2  C001  FFAD         	movff	putch@byte,4013	;volatile
  7323  000EF6  0012               	return		;funcret
  7324  000EF8                     __end_of_putch:
  7325                           	opt stack 0
  7326                           tblptru	equ	0xFF8
  7327                           tblptrh	equ	0xFF7
  7328                           tblptrl	equ	0xFF6
  7329                           tablat	equ	0xFF5
  7330                           intcon2	equ	0xFF1
  7331                           indf0	equ	0xFEF
  7332                           postinc0	equ	0xFEE
  7333                           fsr0h	equ	0xFEA
  7334                           fsr0l	equ	0xFE9
  7335                           wreg	equ	0xFE8
  7336                           indf1	equ	0xFE7
  7337                           postinc1	equ	0xFE6
  7338                           postdec1	equ	0xFE5
  7339                           plusw1	equ	0xFE3
  7340                           fsr1h	equ	0xFE2
  7341                           fsr1l	equ	0xFE1
  7342                           indf2	equ	0xFDF
  7343                           postinc2	equ	0xFDE
  7344                           plusw2	equ	0xFDB
  7345                           fsr2h	equ	0xFDA
  7346                           fsr2l	equ	0xFD9
  7347                           status	equ	0xFD8
  7348                           
  7349 ;; *************** function _changepass *****************
  7350 ;; Defined at:
  7351 ;;		line 8 in file "changepass.c"
  7352 ;; Parameters:    Size  Location     Type
  7353 ;;		None
  7354 ;; Auto vars:     Size  Location     Type
  7355 ;;  i               2   31[COMRAM] unsigned int 
  7356 ;;  i               2   45[COMRAM] int 
  7357 ;;  i               2   43[COMRAM] int 
  7358 ;;  pass1           9   20[COMRAM] unsigned char [9]
  7359 ;;  pass2           9   11[COMRAM] unsigned char [9]
  7360 ;;  blink           2   52[COMRAM] unsigned int 
  7361 ;;  k1              2   50[COMRAM] unsigned int 
  7362 ;;  k               2   48[COMRAM] unsigned int 
  7363 ;;  j1              2   39[COMRAM] unsigned int 
  7364 ;;  j               2   37[COMRAM] unsigned int 
  7365 ;;  flag1           2   35[COMRAM] unsigned int 
  7366 ;;  flag            2   33[COMRAM] unsigned int 
  7367 ;;  delay           2   29[COMRAM] unsigned int 
  7368 ;;  key             1   47[COMRAM] unsigned char 
  7369 ;;  input2          1   42[COMRAM] unsigned char 
  7370 ;;  input           1   41[COMRAM] unsigned char 
  7371 ;; Return value:  Size  Location     Type
  7372 ;;                  1    wreg      void 
  7373 ;; Registers used:
  7374 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7375 ;; Tracked objects:
  7376 ;;		On entry : 0/0
  7377 ;;		On exit  : 0/0
  7378 ;;		Unchanged: 0/0
  7379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7380 ;;      Params:         0       0       0       0       0       0       0
  7381 ;;      Locals:        43       0       0       0       0       0       0
  7382 ;;      Temps:          2       0       0       0       0       0       0
  7383 ;;      Totals:        45       0       0       0       0       0       0
  7384 ;;Total ram usage:       45 bytes
  7385 ;; Hardware stack levels used:    1
  7386 ;; Hardware stack levels required when called:    2
  7387 ;; This function calls:
  7388 ;;		_clcd_print
  7389 ;;		_clcd_write
  7390 ;;		_read_switches
  7391 ;; This function is called by:
  7392 ;;		_main
  7393 ;; This function uses a non-reentrant model
  7394 ;;
  7395                           
  7396                           	psect	text31
  7397  002078                     __ptext31:
  7398                           	opt stack 0
  7399  002078                     _changepass:
  7400                           	opt stack 28
  7401                           
  7402                           ;changepass.c: 10: unsigned char key=0,input='0',input2='0',pass1[9]="00000000",pass2[9]
      +                          ="00000000";
  7403                           
  7404                           ;incstack = 0
  7405  002078  0E00               	movlw	0
  7406  00207A  6E30               	movwf	changepass@key,c
  7407  00207C  0E30               	movlw	48
  7408  00207E  6E2A               	movwf	changepass@input,c
  7409  002080  0E30               	movlw	48
  7410  002082  6E2B               	movwf	changepass@input2,c
  7411  002084  EE20  F044         	lfsr	2,changepass@F15943
  7412  002088  EE10  F015         	lfsr	1,changepass@pass1
  7413  00208C  0E08               	movlw	8
  7414  00208E                     u2551:
  7415  00208E  CFDB FFE3          	movff	plusw2,plusw1
  7416  002092  06E8               	decf	wreg,f,c
  7417  002094  E2FC               	bc	u2551
  7418  002096  EE20  F0C6         	lfsr	2,changepass@F15945
  7419  00209A  EE10  F00C         	lfsr	1,changepass@pass2
  7420  00209E  0E08               	movlw	8
  7421  0020A0                     u2561:
  7422  0020A0  CFDB FFE3          	movff	plusw2,plusw1
  7423  0020A4  06E8               	decf	wreg,f,c
  7424  0020A6  E2FC               	bc	u2561
  7425                           
  7426                           ;changepass.c: 11: unsigned int j=0,k=0,j1=0,k1=0,flag=0,blink=0,delay=0,flag1=0;
  7427  0020A8  0E00               	movlw	0
  7428  0020AA  6E27               	movwf	changepass@j+1,c
  7429  0020AC  0E00               	movlw	0
  7430  0020AE  6E26               	movwf	changepass@j,c
  7431  0020B0  0E00               	movlw	0
  7432  0020B2  6E32               	movwf	changepass@k+1,c
  7433  0020B4  0E00               	movlw	0
  7434  0020B6  6E31               	movwf	changepass@k,c
  7435  0020B8  0E00               	movlw	0
  7436  0020BA  6E29               	movwf	changepass@j1+1,c
  7437  0020BC  0E00               	movlw	0
  7438  0020BE  6E28               	movwf	changepass@j1,c
  7439  0020C0  0E00               	movlw	0
  7440  0020C2  6E34               	movwf	changepass@k1+1,c
  7441  0020C4  0E00               	movlw	0
  7442  0020C6  6E33               	movwf	changepass@k1,c
  7443  0020C8  0E00               	movlw	0
  7444  0020CA  6E23               	movwf	changepass@flag+1,c
  7445  0020CC  0E00               	movlw	0
  7446  0020CE  6E22               	movwf	changepass@flag,c
  7447  0020D0  0E00               	movlw	0
  7448  0020D2  6E36               	movwf	changepass@blink+1,c
  7449  0020D4  0E00               	movlw	0
  7450  0020D6  6E35               	movwf	changepass@blink,c
  7451  0020D8  0E00               	movlw	0
  7452  0020DA  6E1F               	movwf	changepass@delay+1,c
  7453  0020DC  0E00               	movlw	0
  7454  0020DE  6E1E               	movwf	changepass@delay,c
  7455  0020E0  0E00               	movlw	0
  7456  0020E2  6E25               	movwf	changepass@flag1+1,c
  7457  0020E4  0E00               	movlw	0
  7458  0020E6  6E24               	movwf	changepass@flag1,c
  7459                           
  7460                           ;changepass.c: 13: clcd_write(0x01, 0);
  7461  0020E8  0E00               	movlw	0
  7462  0020EA  6E01               	movwf	clcd_write@control_bit,c
  7463  0020EC  0E01               	movlw	1
  7464  0020EE  EC0D  F008         	call	_clcd_write
  7465  0020F2                     l3064:
  7466                           
  7467                           ;changepass.c: 15: {
  7468                           ;changepass.c: 16: key=read_switches(1);
  7469  0020F2  0E01               	movlw	1
  7470  0020F4  ECA1  F008         	call	_read_switches
  7471  0020F8  6E30               	movwf	changepass@key,c
  7472                           
  7473                           ;changepass.c: 17: if(input < '8')
  7474  0020FA  0E38               	movlw	56
  7475  0020FC  602A               	cpfslt	changepass@input,c
  7476  0020FE  D06B               	goto	l3104
  7477                           
  7478                           ;changepass.c: 18: {
  7479                           ;changepass.c: 19: clcd_print("change Password  ", (0x80 + (0)));
  7480  002100  0E23               	movlw	low STR_1
  7481  002102  6E07               	movwf	clcd_print@data,c
  7482  002104  0E2F               	movlw	high STR_1
  7483  002106  6E08               	movwf	clcd_print@data+1,c
  7484  002108  0E80               	movlw	128
  7485  00210A  6E09               	movwf	clcd_print@addr,c
  7486  00210C  ECA5  F009         	call	_clcd_print	;wreg free
  7487                           
  7488                           ;changepass.c: 20: if(blink++ < 500)
  7489  002110  5035               	movf	changepass@blink,w,c
  7490  002112  6E0A               	movwf	??_changepass& (0+255),c
  7491  002114  5036               	movf	changepass@blink+1,w,c
  7492  002116  6E0B               	movwf	(??_changepass+1)& (0+255),c
  7493  002118  4A35               	infsnz	changepass@blink,f,c
  7494  00211A  2A36               	incf	changepass@blink+1,f,c
  7495  00211C  0EF4               	movlw	244
  7496  00211E  5C0A               	subwf	??_changepass,w,c
  7497  002120  0E01               	movlw	1
  7498  002122  580B               	subwfb	??_changepass+1,w,c
  7499  002124  B0D8               	btfsc	status,0,c
  7500  002126  D00A               	goto	l3072
  7501                           
  7502                           ;changepass.c: 21: {
  7503                           ;changepass.c: 22: clcd_print(" ",(0xC0 + (k)));
  7504  002128  0E0E               	movlw	low (STR_32+17)
  7505  00212A  6E07               	movwf	clcd_print@data,c
  7506  00212C  0E2F               	movlw	high (STR_32+17)
  7507  00212E  6E08               	movwf	clcd_print@data+1,c
  7508  002130  5031               	movf	changepass@k,w,c
  7509  002132  0FC0               	addlw	192
  7510  002134  6E09               	movwf	clcd_print@addr,c
  7511  002136  ECA5  F009         	call	_clcd_print	;wreg free
  7512                           
  7513                           ;changepass.c: 23: }
  7514  00213A  D014               	goto	l3078
  7515  00213C                     l3072:
  7516                           
  7517                           ;changepass.c: 24: else
  7518                           ;changepass.c: 25: {
  7519                           ;changepass.c: 26: if(blink == 1000)
  7520  00213C  0EE8               	movlw	232
  7521  00213E  1835               	xorwf	changepass@blink,w,c
  7522  002140  E108               	bnz	l3076
  7523  002142  0E03               	movlw	3
  7524  002144  1836               	xorwf	changepass@blink+1,w,c
  7525  002146  A4D8               	btfss	status,2,c
  7526  002148  D004               	goto	l3076
  7527                           
  7528                           ;changepass.c: 27: blink = 0;
  7529  00214A  0E00               	movlw	0
  7530  00214C  6E36               	movwf	changepass@blink+1,c
  7531  00214E  0E00               	movlw	0
  7532  002150  6E35               	movwf	changepass@blink,c
  7533  002152                     l3076:
  7534                           
  7535                           ;changepass.c: 28: clcd_print("_",(0xC0 + (k)));
  7536  002152  0EFD               	movlw	low STR_3
  7537  002154  6E07               	movwf	clcd_print@data,c
  7538  002156  0E2F               	movlw	high STR_3
  7539  002158  6E08               	movwf	clcd_print@data+1,c
  7540  00215A  5031               	movf	changepass@k,w,c
  7541  00215C  0FC0               	addlw	192
  7542  00215E  6E09               	movwf	clcd_print@addr,c
  7543  002160  ECA5  F009         	call	_clcd_print	;wreg free
  7544  002164                     l3078:
  7545                           
  7546                           ;changepass.c: 29: }
  7547                           ;changepass.c: 30: if(key == 8)
  7548  002164  0E08               	movlw	8
  7549  002166  1830               	xorwf	changepass@key,w,c
  7550  002168  A4D8               	btfss	status,2,c
  7551  00216A  D01A               	goto	l3092
  7552                           
  7553                           ;changepass.c: 31: {
  7554                           ;changepass.c: 32: input++;
  7555  00216C  2A2A               	incf	changepass@input,f,c
  7556                           
  7557                           ;changepass.c: 33: pass1[j]='1';
  7558  00216E  0E15               	movlw	low changepass@pass1
  7559  002170  2426               	addwf	changepass@j,w,c
  7560  002172  6ED9               	movwf	fsr2l,c
  7561  002174  0E00               	movlw	high changepass@pass1
  7562  002176  2027               	addwfc	changepass@j+1,w,c
  7563  002178  6EDA               	movwf	fsr2h,c
  7564  00217A  0E31               	movlw	49
  7565  00217C  6EDF               	movwf	indf2,c
  7566                           
  7567                           ;changepass.c: 34: j++;
  7568  00217E  4A26               	infsnz	changepass@j,f,c
  7569  002180  2A27               	incf	changepass@j+1,f,c
  7570                           
  7571                           ;changepass.c: 35: clcd_print("*", (0xC0 + (k)));
  7572  002182  0EFB               	movlw	low STR_4
  7573  002184  6E07               	movwf	clcd_print@data,c
  7574  002186  0E2F               	movlw	high STR_4
  7575  002188  6E08               	movwf	clcd_print@data+1,c
  7576  00218A  5031               	movf	changepass@k,w,c
  7577  00218C  0FC0               	addlw	192
  7578  00218E  6E09               	movwf	clcd_print@addr,c
  7579  002190  ECA5  F009         	call	_clcd_print	;wreg free
  7580                           
  7581                           ;changepass.c: 36: blink = 0;
  7582  002194  0E00               	movlw	0
  7583  002196  6E36               	movwf	changepass@blink+1,c
  7584  002198  0E00               	movlw	0
  7585  00219A  6E35               	movwf	changepass@blink,c
  7586                           
  7587                           ;changepass.c: 37: k++;
  7588  00219C  4A31               	infsnz	changepass@k,f,c
  7589  00219E  2A32               	incf	changepass@k+1,f,c
  7590  0021A0                     l3092:
  7591                           
  7592                           ;changepass.c: 38: }
  7593                           ;changepass.c: 39: if(key == 9)
  7594  0021A0  0E09               	movlw	9
  7595  0021A2  1830               	xorwf	changepass@key,w,c
  7596  0021A4  A4D8               	btfss	status,2,c
  7597  0021A6  D09A               	goto	l3152
  7598                           
  7599                           ;changepass.c: 40: {
  7600                           ;changepass.c: 41: input++;
  7601  0021A8  2A2A               	incf	changepass@input,f,c
  7602                           
  7603                           ;changepass.c: 42: pass1[j]='0';
  7604  0021AA  0E15               	movlw	low changepass@pass1
  7605  0021AC  2426               	addwf	changepass@j,w,c
  7606  0021AE  6ED9               	movwf	fsr2l,c
  7607  0021B0  0E00               	movlw	high changepass@pass1
  7608  0021B2  2027               	addwfc	changepass@j+1,w,c
  7609  0021B4  6EDA               	movwf	fsr2h,c
  7610  0021B6  0E30               	movlw	48
  7611  0021B8  6EDF               	movwf	indf2,c
  7612                           
  7613                           ;changepass.c: 43: j++;
  7614  0021BA  4A26               	infsnz	changepass@j,f,c
  7615  0021BC  2A27               	incf	changepass@j+1,f,c
  7616                           
  7617                           ;changepass.c: 44: clcd_print("*", (0xC0 + (k)));
  7618  0021BE  0EFB               	movlw	low STR_4
  7619  0021C0  6E07               	movwf	clcd_print@data,c
  7620  0021C2  0E2F               	movlw	high STR_4
  7621  0021C4  6E08               	movwf	clcd_print@data+1,c
  7622  0021C6  5031               	movf	changepass@k,w,c
  7623  0021C8  0FC0               	addlw	192
  7624  0021CA  6E09               	movwf	clcd_print@addr,c
  7625  0021CC  ECA5  F009         	call	_clcd_print	;wreg free
  7626                           
  7627                           ;changepass.c: 45: k++;
  7628  0021D0  4A31               	infsnz	changepass@k,f,c
  7629  0021D2  2A32               	incf	changepass@k+1,f,c
  7630                           
  7631                           ;changepass.c: 46: }
  7632                           ;changepass.c: 47: }
  7633  0021D4  D083               	goto	l3152
  7634  0021D6                     l3104:
  7635                           
  7636                           ;changepass.c: 48: else if(input2 < '8')
  7637  0021D6  0E38               	movlw	56
  7638  0021D8  602B               	cpfslt	changepass@input2,c
  7639  0021DA  D080               	goto	l3152
  7640                           
  7641                           ;changepass.c: 49: {
  7642                           ;changepass.c: 50: if ( input == '8' )
  7643  0021DC  0E38               	movlw	56
  7644  0021DE  182A               	xorwf	changepass@input,w,c
  7645  0021E0  A4D8               	btfss	status,2,c
  7646  0021E2  D00E               	goto	l24
  7647                           
  7648                           ;changepass.c: 51: {
  7649                           ;changepass.c: 52: clcd_print("               ", (0xC0 + (0)));
  7650  0021E4  0E00               	movlw	low (STR_32+3)
  7651  0021E6  6E07               	movwf	clcd_print@data,c
  7652  0021E8  0E2F               	movlw	high (STR_32+3)
  7653  0021EA  6E08               	movwf	clcd_print@data+1,c
  7654  0021EC  0EC0               	movlw	192
  7655  0021EE  6E09               	movwf	clcd_print@addr,c
  7656  0021F0  ECA5  F009         	call	_clcd_print	;wreg free
  7657                           
  7658                           ;changepass.c: 53: blink = 0;
  7659  0021F4  0E00               	movlw	0
  7660  0021F6  6E36               	movwf	changepass@blink+1,c
  7661  0021F8  0E00               	movlw	0
  7662  0021FA  6E35               	movwf	changepass@blink,c
  7663                           
  7664                           ;changepass.c: 54: input = '9';
  7665  0021FC  0E39               	movlw	57
  7666  0021FE  6E2A               	movwf	changepass@input,c
  7667  002200                     l24:
  7668                           
  7669                           ;changepass.c: 55: }
  7670                           ;changepass.c: 56: clcd_print("confirm Password  ", (0x80 + (0)));
  7671  002200  0E10               	movlw	low STR_7
  7672  002202  6E07               	movwf	clcd_print@data,c
  7673  002204  0E2F               	movlw	high STR_7
  7674  002206  6E08               	movwf	clcd_print@data+1,c
  7675  002208  0E80               	movlw	128
  7676  00220A  6E09               	movwf	clcd_print@addr,c
  7677  00220C  ECA5  F009         	call	_clcd_print	;wreg free
  7678                           
  7679                           ;changepass.c: 57: if(blink++ < 500)
  7680  002210  5035               	movf	changepass@blink,w,c
  7681  002212  6E0A               	movwf	??_changepass& (0+255),c
  7682  002214  5036               	movf	changepass@blink+1,w,c
  7683  002216  6E0B               	movwf	(??_changepass+1)& (0+255),c
  7684  002218  4A35               	infsnz	changepass@blink,f,c
  7685  00221A  2A36               	incf	changepass@blink+1,f,c
  7686  00221C  0EF4               	movlw	244
  7687  00221E  5C0A               	subwf	??_changepass,w,c
  7688  002220  0E01               	movlw	1
  7689  002222  580B               	subwfb	??_changepass+1,w,c
  7690  002224  B0D8               	btfsc	status,0,c
  7691  002226  D00A               	goto	l3118
  7692                           
  7693                           ;changepass.c: 58: {
  7694                           ;changepass.c: 59: clcd_print(" ",(0xC0 + (k1)));
  7695  002228  0E0E               	movlw	low (STR_32+17)
  7696  00222A  6E07               	movwf	clcd_print@data,c
  7697  00222C  0E2F               	movlw	high (STR_32+17)
  7698  00222E  6E08               	movwf	clcd_print@data+1,c
  7699  002230  5033               	movf	changepass@k1,w,c
  7700  002232  0FC0               	addlw	192
  7701  002234  6E09               	movwf	clcd_print@addr,c
  7702  002236  ECA5  F009         	call	_clcd_print	;wreg free
  7703                           
  7704                           ;changepass.c: 60: }
  7705  00223A  D014               	goto	l3124
  7706  00223C                     l3118:
  7707                           
  7708                           ;changepass.c: 61: else
  7709                           ;changepass.c: 62: {
  7710                           ;changepass.c: 63: if(blink == 1000)
  7711  00223C  0EE8               	movlw	232
  7712  00223E  1835               	xorwf	changepass@blink,w,c
  7713  002240  E108               	bnz	l3122
  7714  002242  0E03               	movlw	3
  7715  002244  1836               	xorwf	changepass@blink+1,w,c
  7716  002246  A4D8               	btfss	status,2,c
  7717  002248  D004               	goto	l3122
  7718                           
  7719                           ;changepass.c: 64: blink = 0;
  7720  00224A  0E00               	movlw	0
  7721  00224C  6E36               	movwf	changepass@blink+1,c
  7722  00224E  0E00               	movlw	0
  7723  002250  6E35               	movwf	changepass@blink,c
  7724  002252                     l3122:
  7725                           
  7726                           ;changepass.c: 65: clcd_print("_",(0xC0 + (k1)));
  7727  002252  0EFD               	movlw	low STR_3
  7728  002254  6E07               	movwf	clcd_print@data,c
  7729  002256  0E2F               	movlw	high STR_3
  7730  002258  6E08               	movwf	clcd_print@data+1,c
  7731  00225A  5033               	movf	changepass@k1,w,c
  7732  00225C  0FC0               	addlw	192
  7733  00225E  6E09               	movwf	clcd_print@addr,c
  7734  002260  ECA5  F009         	call	_clcd_print	;wreg free
  7735  002264                     l3124:
  7736                           
  7737                           ;changepass.c: 66: }
  7738                           ;changepass.c: 67: if(key == 8)
  7739  002264  0E08               	movlw	8
  7740  002266  1830               	xorwf	changepass@key,w,c
  7741  002268  A4D8               	btfss	status,2,c
  7742  00226A  D01A               	goto	l3138
  7743                           
  7744                           ;changepass.c: 68: {
  7745                           ;changepass.c: 69: input2++;
  7746  00226C  2A2B               	incf	changepass@input2,f,c
  7747                           
  7748                           ;changepass.c: 70: pass2[j1]='1';
  7749  00226E  0E0C               	movlw	low changepass@pass2
  7750  002270  2428               	addwf	changepass@j1,w,c
  7751  002272  6ED9               	movwf	fsr2l,c
  7752  002274  0E00               	movlw	high changepass@pass2
  7753  002276  2029               	addwfc	changepass@j1+1,w,c
  7754  002278  6EDA               	movwf	fsr2h,c
  7755  00227A  0E31               	movlw	49
  7756  00227C  6EDF               	movwf	indf2,c
  7757                           
  7758                           ;changepass.c: 71: j1++;
  7759  00227E  4A28               	infsnz	changepass@j1,f,c
  7760  002280  2A29               	incf	changepass@j1+1,f,c
  7761                           
  7762                           ;changepass.c: 72: clcd_print("*", (0xC0 + (k1)));
  7763  002282  0EFB               	movlw	low STR_4
  7764  002284  6E07               	movwf	clcd_print@data,c
  7765  002286  0E2F               	movlw	high STR_4
  7766  002288  6E08               	movwf	clcd_print@data+1,c
  7767  00228A  5033               	movf	changepass@k1,w,c
  7768  00228C  0FC0               	addlw	192
  7769  00228E  6E09               	movwf	clcd_print@addr,c
  7770  002290  ECA5  F009         	call	_clcd_print	;wreg free
  7771                           
  7772                           ;changepass.c: 73: k1++;
  7773  002294  4A33               	infsnz	changepass@k1,f,c
  7774  002296  2A34               	incf	changepass@k1+1,f,c
  7775                           
  7776                           ;changepass.c: 74: blink = 0;
  7777  002298  0E00               	movlw	0
  7778  00229A  6E36               	movwf	changepass@blink+1,c
  7779  00229C  0E00               	movlw	0
  7780  00229E  6E35               	movwf	changepass@blink,c
  7781  0022A0                     l3138:
  7782                           
  7783                           ;changepass.c: 75: }
  7784                           ;changepass.c: 76: if(key == 9)
  7785  0022A0  0E09               	movlw	9
  7786  0022A2  1830               	xorwf	changepass@key,w,c
  7787  0022A4  A4D8               	btfss	status,2,c
  7788  0022A6  D01A               	goto	l3152
  7789                           
  7790                           ;changepass.c: 77: {
  7791                           ;changepass.c: 78: input2++;
  7792  0022A8  2A2B               	incf	changepass@input2,f,c
  7793                           
  7794                           ;changepass.c: 79: pass2[j1]='0';
  7795  0022AA  0E0C               	movlw	low changepass@pass2
  7796  0022AC  2428               	addwf	changepass@j1,w,c
  7797  0022AE  6ED9               	movwf	fsr2l,c
  7798  0022B0  0E00               	movlw	high changepass@pass2
  7799  0022B2  2029               	addwfc	changepass@j1+1,w,c
  7800  0022B4  6EDA               	movwf	fsr2h,c
  7801  0022B6  0E30               	movlw	48
  7802  0022B8  6EDF               	movwf	indf2,c
  7803                           
  7804                           ;changepass.c: 80: j1++;
  7805  0022BA  4A28               	infsnz	changepass@j1,f,c
  7806  0022BC  2A29               	incf	changepass@j1+1,f,c
  7807                           
  7808                           ;changepass.c: 81: clcd_print("*", (0xC0 + (k1)));
  7809  0022BE  0EFB               	movlw	low STR_4
  7810  0022C0  6E07               	movwf	clcd_print@data,c
  7811  0022C2  0E2F               	movlw	high STR_4
  7812  0022C4  6E08               	movwf	clcd_print@data+1,c
  7813  0022C6  5033               	movf	changepass@k1,w,c
  7814  0022C8  0FC0               	addlw	192
  7815  0022CA  6E09               	movwf	clcd_print@addr,c
  7816  0022CC  ECA5  F009         	call	_clcd_print	;wreg free
  7817                           
  7818                           ;changepass.c: 82: k1++;
  7819  0022D0  4A33               	infsnz	changepass@k1,f,c
  7820  0022D2  2A34               	incf	changepass@k1+1,f,c
  7821                           
  7822                           ;changepass.c: 83: blink = 0;
  7823  0022D4  0E00               	movlw	0
  7824  0022D6  6E36               	movwf	changepass@blink+1,c
  7825  0022D8  0E00               	movlw	0
  7826  0022DA  6E35               	movwf	changepass@blink,c
  7827  0022DC                     l3152:
  7828                           
  7829                           ;changepass.c: 84: }
  7830                           ;changepass.c: 85: }
  7831                           ;changepass.c: 87: if(input2 == '8')
  7832  0022DC  0E38               	movlw	56
  7833  0022DE  182B               	xorwf	changepass@input2,w,c
  7834  0022E0  A4D8               	btfss	status,2,c
  7835  0022E2  D006               	goto	l3156
  7836                           
  7837                           ;changepass.c: 88: {
  7838                           ;changepass.c: 89: flag1 = 1;
  7839  0022E4  0E00               	movlw	0
  7840  0022E6  6E25               	movwf	changepass@flag1+1,c
  7841  0022E8  0E01               	movlw	1
  7842  0022EA  6E24               	movwf	changepass@flag1,c
  7843                           
  7844                           ;changepass.c: 90: input2 ='9';
  7845  0022EC  0E39               	movlw	57
  7846  0022EE  6E2B               	movwf	changepass@input2,c
  7847  0022F0                     l3156:
  7848                           
  7849                           ;changepass.c: 91: }
  7850                           ;changepass.c: 93: if(flag1)
  7851  0022F0  5024               	movf	changepass@flag1,w,c
  7852  0022F2  1025               	iorwf	changepass@flag1+1,w,c
  7853  0022F4  B4D8               	btfsc	status,2,c
  7854  0022F6  D6FD               	goto	l3064
  7855                           
  7856                           ;changepass.c: 94: {
  7857                           ;changepass.c: 95: for(int i=0;i<8;i++)
  7858  0022F8  0E00               	movlw	0
  7859  0022FA  6E2D               	movwf	changepass@i+1,c
  7860  0022FC  0E00               	movlw	0
  7861  0022FE  6E2C               	movwf	changepass@i,c
  7862  002300                     l3160:
  7863  002300  BE2D               	btfsc	changepass@i+1,7,c
  7864  002302  D006               	goto	l3164
  7865  002304  502D               	movf	changepass@i+1,w,c
  7866  002306  E14C               	bnz	l3192
  7867  002308  0E08               	movlw	8
  7868  00230A  5C2C               	subwf	changepass@i,w,c
  7869  00230C  B0D8               	btfsc	status,0,c
  7870  00230E  D048               	goto	l3192
  7871  002310                     l3164:
  7872                           
  7873                           ;changepass.c: 96: {
  7874                           ;changepass.c: 97: if(pass1[i] != pass2[i])
  7875  002310  0E0C               	movlw	low changepass@pass2
  7876  002312  242C               	addwf	changepass@i,w,c
  7877  002314  6ED9               	movwf	fsr2l,c
  7878  002316  0E00               	movlw	high changepass@pass2
  7879  002318  202D               	addwfc	changepass@i+1,w,c
  7880  00231A  6EDA               	movwf	fsr2h,c
  7881  00231C  0E15               	movlw	low changepass@pass1
  7882  00231E  242C               	addwf	changepass@i,w,c
  7883  002320  6EE1               	movwf	fsr1l,c
  7884  002322  0E00               	movlw	high changepass@pass1
  7885  002324  202D               	addwfc	changepass@i+1,w,c
  7886  002326  6EE2               	movwf	fsr1h,c
  7887  002328  50DE               	movf	postinc2,w,c
  7888  00232A  18E6               	xorwf	postinc1,w,c
  7889  00232C  B4D8               	btfsc	status,2,c
  7890  00232E  D035               	goto	l3188
  7891                           
  7892                           ;changepass.c: 98: {
  7893                           ;changepass.c: 99: flag=1;
  7894  002330  0E00               	movlw	0
  7895  002332  6E23               	movwf	changepass@flag+1,c
  7896  002334  0E01               	movlw	1
  7897  002336  6E22               	movwf	changepass@flag,c
  7898                           
  7899                           ;changepass.c: 100: clcd_print(" TRY AGAIN      ",(0xC0 + (0)));
  7900  002338  0E9B               	movlw	low STR_12
  7901  00233A  6E07               	movwf	clcd_print@data,c
  7902  00233C  0E2F               	movlw	high STR_12
  7903  00233E  6E08               	movwf	clcd_print@data+1,c
  7904  002340  0EC0               	movlw	192
  7905  002342  6E09               	movwf	clcd_print@addr,c
  7906  002344  ECA5  F009         	call	_clcd_print	;wreg free
  7907                           
  7908                           ;changepass.c: 101: input = '0';
  7909  002348  0E30               	movlw	48
  7910  00234A  6E2A               	movwf	changepass@input,c
  7911                           
  7912                           ;changepass.c: 102: input2 = '0';
  7913  00234C  0E30               	movlw	48
  7914  00234E  6E2B               	movwf	changepass@input2,c
  7915                           
  7916                           ;changepass.c: 103: k1=0;
  7917  002350  0E00               	movlw	0
  7918  002352  6E34               	movwf	changepass@k1+1,c
  7919  002354  0E00               	movlw	0
  7920  002356  6E33               	movwf	changepass@k1,c
  7921                           
  7922                           ;changepass.c: 104: k=0;
  7923  002358  0E00               	movlw	0
  7924  00235A  6E32               	movwf	changepass@k+1,c
  7925  00235C  0E00               	movlw	0
  7926  00235E  6E31               	movwf	changepass@k,c
  7927                           
  7928                           ;changepass.c: 105: blink = 0;
  7929  002360  0E00               	movlw	0
  7930  002362  6E36               	movwf	changepass@blink+1,c
  7931  002364  0E00               	movlw	0
  7932  002366  6E35               	movwf	changepass@blink,c
  7933                           
  7934                           ;changepass.c: 106: flag1 = 0;
  7935  002368  0E00               	movlw	0
  7936  00236A  6E25               	movwf	changepass@flag1+1,c
  7937  00236C  0E00               	movlw	0
  7938  00236E  6E24               	movwf	changepass@flag1,c
  7939                           
  7940                           ;changepass.c: 107: for ( unsigned int i = 1000;i--;);
  7941  002370  0E03               	movlw	3
  7942  002372  6E21               	movwf	changepass@i_68+1,c
  7943  002374  0EE8               	movlw	232
  7944  002376  6E20               	movwf	changepass@i_68,c
  7945  002378                     l3184:
  7946  002378  0620               	decf	changepass@i_68,f,c
  7947  00237A  A0D8               	btfss	status,0,c
  7948  00237C  0621               	decf	changepass@i_68+1,f,c
  7949  00237E  2820               	incf	changepass@i_68,w,c
  7950  002380  E1FB               	bnz	l3184
  7951  002382  2821               	incf	changepass@i_68+1,w,c
  7952  002384  A4D8               	btfss	status,2,c
  7953  002386  D7F8               	goto	l3184
  7954                           
  7955                           ;changepass.c: 108: clcd_print("                ",(0xC0 + (0)));
  7956  002388  0EFF               	movlw	low (STR_32+2)
  7957  00238A  6E07               	movwf	clcd_print@data,c
  7958  00238C  0E2E               	movlw	high (STR_32+2)
  7959  00238E  6E08               	movwf	clcd_print@data+1,c
  7960  002390  0EC0               	movlw	192
  7961  002392  6E09               	movwf	clcd_print@addr,c
  7962  002394  ECA5  F009         	call	_clcd_print	;wreg free
  7963                           
  7964                           ;changepass.c: 109: break;
  7965  002398  D003               	goto	l3192
  7966  00239A                     l3188:
  7967  00239A  4A2C               	infsnz	changepass@i,f,c
  7968  00239C  2A2D               	incf	changepass@i+1,f,c
  7969  00239E  D7B0               	goto	l3160
  7970  0023A0                     l3192:
  7971                           
  7972                           ;changepass.c: 110: }
  7973                           ;changepass.c: 111: }
  7974                           ;changepass.c: 112: if(flag != 1)
  7975  0023A0  0422               	decf	changepass@flag,w,c
  7976  0023A2  1023               	iorwf	changepass@flag+1,w,c
  7977  0023A4  B4D8               	btfsc	status,2,c
  7978  0023A6  D6A5               	goto	l3064
  7979                           
  7980                           ;changepass.c: 113: {
  7981                           ;changepass.c: 114: for( int i= 0; i<8;i++ )
  7982  0023A8  0E00               	movlw	0
  7983  0023AA  6E2F               	movwf	changepass@i_70+1,c
  7984  0023AC  0E00               	movlw	0
  7985  0023AE  6E2E               	movwf	changepass@i_70,c
  7986  0023B0                     l3196:
  7987  0023B0  BE2F               	btfsc	changepass@i_70+1,7,c
  7988  0023B2  D006               	goto	l3200
  7989  0023B4  502F               	movf	changepass@i_70+1,w,c
  7990  0023B6  E115               	bnz	l3206
  7991  0023B8  0E08               	movlw	8
  7992  0023BA  5C2E               	subwf	changepass@i_70,w,c
  7993  0023BC  B0D8               	btfsc	status,0,c
  7994  0023BE  D011               	goto	l3206
  7995  0023C0                     l3200:
  7996                           
  7997                           ;changepass.c: 115: str1[i] = pass1[i];
  7998  0023C0  0E15               	movlw	low changepass@pass1
  7999  0023C2  242E               	addwf	changepass@i_70,w,c
  8000  0023C4  6ED9               	movwf	fsr2l,c
  8001  0023C6  0E00               	movlw	high changepass@pass1
  8002  0023C8  202F               	addwfc	changepass@i_70+1,w,c
  8003  0023CA  6EDA               	movwf	fsr2h,c
  8004  0023CC  0E3B               	movlw	low _str1
  8005  0023CE  242E               	addwf	changepass@i_70,w,c
  8006  0023D0  6EE1               	movwf	fsr1l,c
  8007  0023D2  0E00               	movlw	high _str1
  8008  0023D4  202F               	addwfc	changepass@i_70+1,w,c
  8009  0023D6  6EE2               	movwf	fsr1h,c
  8010  0023D8  CFDF FFE7          	movff	indf2,indf1
  8011  0023DC  4A2E               	infsnz	changepass@i_70,f,c
  8012  0023DE  2A2F               	incf	changepass@i_70+1,f,c
  8013  0023E0  D7E7               	goto	l3196
  8014  0023E2                     l3206:
  8015                           
  8016                           ;changepass.c: 116: clcd_print("   SUCCESS      ",(0xC0 + (0)));
  8017  0023E2  0EAC               	movlw	low STR_14
  8018  0023E4  6E07               	movwf	clcd_print@data,c
  8019  0023E6  0E2F               	movlw	high STR_14
  8020  0023E8  6E08               	movwf	clcd_print@data+1,c
  8021  0023EA  0EC0               	movlw	192
  8022  0023EC  6E09               	movwf	clcd_print@addr,c
  8023  0023EE  ECA5  F009         	call	_clcd_print	;wreg free
  8024                           
  8025                           ;changepass.c: 117: if(delay++ == 500)
  8026  0023F2  4A1E               	infsnz	changepass@delay,f,c
  8027  0023F4  2A1F               	incf	changepass@delay+1,f,c
  8028  0023F6  0EF5               	movlw	245
  8029  0023F8  181E               	xorwf	changepass@delay,w,c
  8030  0023FA  E103               	bnz	u2771
  8031  0023FC  041F               	decf	changepass@delay+1,w,c
  8032  0023FE  B4D8               	btfsc	status,2,c
  8033  002400  0012               	return	
  8034  002402                     u2771:
  8035  002402  D677               	goto	l3064
  8036  002404                     __end_of_changepass:
  8037                           	opt stack 0
  8038                           tblptru	equ	0xFF8
  8039                           tblptrh	equ	0xFF7
  8040                           tblptrl	equ	0xFF6
  8041                           tablat	equ	0xFF5
  8042                           intcon2	equ	0xFF1
  8043                           indf0	equ	0xFEF
  8044                           postinc0	equ	0xFEE
  8045                           fsr0h	equ	0xFEA
  8046                           fsr0l	equ	0xFE9
  8047                           wreg	equ	0xFE8
  8048                           indf1	equ	0xFE7
  8049                           postinc1	equ	0xFE6
  8050                           postdec1	equ	0xFE5
  8051                           plusw1	equ	0xFE3
  8052                           fsr1h	equ	0xFE2
  8053                           fsr1l	equ	0xFE1
  8054                           indf2	equ	0xFDF
  8055                           postinc2	equ	0xFDE
  8056                           plusw2	equ	0xFDB
  8057                           fsr2h	equ	0xFDA
  8058                           fsr2l	equ	0xFD9
  8059                           status	equ	0xFD8
  8060                           
  8061 ;; *************** function _read_switches *****************
  8062 ;; Defined at:
  8063 ;;		line 88 in file "matrix_keypad.c"
  8064 ;; Parameters:    Size  Location     Type
  8065 ;;  detection_ty    1    wreg     unsigned char 
  8066 ;; Auto vars:     Size  Location     Type
  8067 ;;  detection_ty    1    0[COMRAM] unsigned char 
  8068 ;; Return value:  Size  Location     Type
  8069 ;;                  1    wreg      unsigned char 
  8070 ;; Registers used:
  8071 ;;		wreg, status,2, status,0, cstack
  8072 ;; Tracked objects:
  8073 ;;		On entry : 0/0
  8074 ;;		On exit  : 0/0
  8075 ;;		Unchanged: 0/0
  8076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8077 ;;      Params:         0       0       0       0       0       0       0
  8078 ;;      Locals:         1       0       0       0       0       0       0
  8079 ;;      Temps:          0       0       0       0       0       0       0
  8080 ;;      Totals:         1       0       0       0       0       0       0
  8081 ;;Total ram usage:        1 bytes
  8082 ;; Hardware stack levels used:    1
  8083 ;; Hardware stack levels required when called:    1
  8084 ;; This function calls:
  8085 ;;		_scan_key
  8086 ;; This function is called by:
  8087 ;;		_changepass
  8088 ;;		_main
  8089 ;;		_pass
  8090 ;;		_view
  8091 ;;		_settime
  8092 ;; This function uses a non-reentrant model
  8093 ;;
  8094                           
  8095                           	psect	text32
  8096  001142                     __ptext32:
  8097                           	opt stack 0
  8098  001142                     _read_switches:
  8099                           	opt stack 28
  8100                           
  8101                           ;incstack = 0
  8102                           ;read_switches@detection_type stored from wreg
  8103  001142  6E01               	movwf	read_switches@detection_type,c
  8104                           
  8105                           ;matrix_keypad.c: 90: static unsigned char once = 1, key;
  8106                           ;matrix_keypad.c: 92: if (detection_type == 1)
  8107  001144  0401               	decf	read_switches@detection_type,w,c
  8108  001146  A4D8               	btfss	status,2,c
  8109  001148  D013               	goto	l2838
  8110                           
  8111                           ;matrix_keypad.c: 93: {
  8112                           ;matrix_keypad.c: 94: key = scan_key();
  8113  00114A  EC7C  F00A         	call	_scan_key	;wreg free
  8114  00114E  6E56               	movwf	read_switches@key,c
  8115                           
  8116                           ;matrix_keypad.c: 95: if(key != 0xFF && once )
  8117  001150  2856               	incf	read_switches@key,w,c
  8118  001152  B4D8               	btfsc	status,2,c
  8119  001154  D007               	goto	l2834
  8120  001156  504D               	movf	read_switches@once,w,c
  8121  001158  B4D8               	btfsc	status,2,c
  8122  00115A  D004               	goto	l2834
  8123                           
  8124                           ;matrix_keypad.c: 96: {
  8125                           ;matrix_keypad.c: 97: once = 0;
  8126  00115C  0E00               	movlw	0
  8127  00115E  6E4D               	movwf	read_switches@once,c
  8128                           
  8129                           ;matrix_keypad.c: 98: return key;
  8130  001160  5056               	movf	read_switches@key,w,c
  8131  001162  0012               	return	
  8132  001164                     l2834:
  8133                           
  8134                           ;matrix_keypad.c: 100: else if(key == 0xFF)
  8135  001164  2856               	incf	read_switches@key,w,c
  8136  001166  A4D8               	btfss	status,2,c
  8137  001168  D009               	goto	l2844
  8138                           
  8139                           ;matrix_keypad.c: 101: {
  8140                           ;matrix_keypad.c: 102: once = 1;
  8141  00116A  0E01               	movlw	1
  8142  00116C  6E4D               	movwf	read_switches@once,c
  8143                           
  8144                           ;matrix_keypad.c: 103: }
  8145                           ;matrix_keypad.c: 104: }
  8146  00116E  D006               	goto	l2844
  8147  001170                     l2838:
  8148                           
  8149                           ;matrix_keypad.c: 105: else if (detection_type == 0)
  8150  001170  5001               	movf	read_switches@detection_type,w,c
  8151  001172  A4D8               	btfss	status,2,c
  8152  001174  D003               	goto	l2844
  8153                           
  8154                           ;matrix_keypad.c: 106: {
  8155                           ;matrix_keypad.c: 107: return scan_key();
  8156  001176  EC7C  F00A         	call	_scan_key	;wreg free
  8157  00117A  0012               	return	
  8158  00117C                     l2844:
  8159                           
  8160                           ;matrix_keypad.c: 108: }
  8161                           ;matrix_keypad.c: 110: return 0xFF;
  8162  00117C  0EFF               	movlw	255
  8163  00117E  0012               	return	
  8164  001180                     __end_of_read_switches:
  8165                           	opt stack 0
  8166                           tblptru	equ	0xFF8
  8167                           tblptrh	equ	0xFF7
  8168                           tblptrl	equ	0xFF6
  8169                           tablat	equ	0xFF5
  8170                           intcon2	equ	0xFF1
  8171                           indf0	equ	0xFEF
  8172                           postinc0	equ	0xFEE
  8173                           fsr0h	equ	0xFEA
  8174                           fsr0l	equ	0xFE9
  8175                           wreg	equ	0xFE8
  8176                           indf1	equ	0xFE7
  8177                           postinc1	equ	0xFE6
  8178                           postdec1	equ	0xFE5
  8179                           plusw1	equ	0xFE3
  8180                           fsr1h	equ	0xFE2
  8181                           fsr1l	equ	0xFE1
  8182                           indf2	equ	0xFDF
  8183                           postinc2	equ	0xFDE
  8184                           plusw2	equ	0xFDB
  8185                           fsr2h	equ	0xFDA
  8186                           fsr2l	equ	0xFD9
  8187                           status	equ	0xFD8
  8188                           
  8189 ;; *************** function _scan_key *****************
  8190 ;; Defined at:
  8191 ;;		line 18 in file "matrix_keypad.c"
  8192 ;; Parameters:    Size  Location     Type
  8193 ;;		None
  8194 ;; Auto vars:     Size  Location     Type
  8195 ;;		None
  8196 ;; Return value:  Size  Location     Type
  8197 ;;                  1    wreg      unsigned char 
  8198 ;; Registers used:
  8199 ;;		wreg
  8200 ;; Tracked objects:
  8201 ;;		On entry : 0/0
  8202 ;;		On exit  : 0/0
  8203 ;;		Unchanged: 0/0
  8204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8205 ;;      Params:         0       0       0       0       0       0       0
  8206 ;;      Locals:         0       0       0       0       0       0       0
  8207 ;;      Temps:          0       0       0       0       0       0       0
  8208 ;;      Totals:         0       0       0       0       0       0       0
  8209 ;;Total ram usage:        0 bytes
  8210 ;; Hardware stack levels used:    1
  8211 ;; This function calls:
  8212 ;;		Nothing
  8213 ;; This function is called by:
  8214 ;;		_read_switches
  8215 ;; This function uses a non-reentrant model
  8216 ;;
  8217                           
  8218                           	psect	text33
  8219  0014F8                     __ptext33:
  8220                           	opt stack 0
  8221  0014F8                     _scan_key:
  8222                           	opt stack 28
  8223                           
  8224                           ;matrix_keypad.c: 20: PORTBbits.RB5 = 0;
  8225                           
  8226                           ;incstack = 0
  8227  0014F8  9A81               	bcf	3969,5,c	;volatile
  8228                           
  8229                           ;matrix_keypad.c: 21: PORTBbits.RB6 = 1;
  8230  0014FA  8C81               	bsf	3969,6,c	;volatile
  8231                           
  8232                           ;matrix_keypad.c: 22: PORTBbits.RB7 = 1;
  8233  0014FC  8E81               	bsf	3969,7,c	;volatile
  8234                           
  8235                           ;matrix_keypad.c: 24: if (PORTBbits.RB1 == 0)
  8236  0014FE  B281               	btfsc	3969,1,c	;volatile
  8237  001500  D002               	goto	l316
  8238                           
  8239                           ;matrix_keypad.c: 25: {
  8240                           ;matrix_keypad.c: 26: return 1;
  8241  001502  0E01               	movlw	1
  8242  001504  0012               	return	
  8243  001506                     l316:
  8244                           
  8245                           ;matrix_keypad.c: 28: else if (PORTBbits.RB2 == 0)
  8246  001506  B481               	btfsc	3969,2,c	;volatile
  8247  001508  D002               	goto	l319
  8248                           
  8249                           ;matrix_keypad.c: 29: {
  8250                           ;matrix_keypad.c: 30: return 4;
  8251  00150A  0E04               	movlw	4
  8252  00150C  0012               	return	
  8253  00150E                     l319:
  8254                           
  8255                           ;matrix_keypad.c: 32: else if (PORTBbits.RB3 == 0)
  8256  00150E  B681               	btfsc	3969,3,c	;volatile
  8257  001510  D002               	goto	l321
  8258                           
  8259                           ;matrix_keypad.c: 33: {
  8260                           ;matrix_keypad.c: 34: return 7;
  8261  001512  0E07               	movlw	7
  8262  001514  0012               	return	
  8263  001516                     l321:
  8264                           
  8265                           ;matrix_keypad.c: 36: else if (PORTBbits.RB4 == 0)
  8266  001516  B881               	btfsc	3969,4,c	;volatile
  8267  001518  D002               	goto	l318
  8268                           
  8269                           ;matrix_keypad.c: 37: {
  8270                           ;matrix_keypad.c: 38: return 10;
  8271  00151A  0E0A               	movlw	10
  8272  00151C  0012               	return	
  8273  00151E                     l318:
  8274                           
  8275                           ;matrix_keypad.c: 39: }
  8276                           ;matrix_keypad.c: 41: PORTBbits.RB5 = 1;
  8277  00151E  8A81               	bsf	3969,5,c	;volatile
  8278                           
  8279                           ;matrix_keypad.c: 42: PORTBbits.RB6 = 0;
  8280  001520  9C81               	bcf	3969,6,c	;volatile
  8281                           
  8282                           ;matrix_keypad.c: 43: PORTBbits.RB7 = 1;
  8283  001522  8E81               	bsf	3969,7,c	;volatile
  8284                           
  8285                           ;matrix_keypad.c: 45: if (PORTBbits.RB1 == 0)
  8286  001524  B281               	btfsc	3969,1,c	;volatile
  8287  001526  D002               	goto	l324
  8288                           
  8289                           ;matrix_keypad.c: 46: {
  8290                           ;matrix_keypad.c: 47: return 2;
  8291  001528  0E02               	movlw	2
  8292  00152A  0012               	return	
  8293  00152C                     l324:
  8294                           
  8295                           ;matrix_keypad.c: 49: else if (PORTBbits.RB2 == 0)
  8296  00152C  B481               	btfsc	3969,2,c	;volatile
  8297  00152E  D002               	goto	l326
  8298                           
  8299                           ;matrix_keypad.c: 50: {
  8300                           ;matrix_keypad.c: 51: return 5;
  8301  001530  0E05               	movlw	5
  8302  001532  0012               	return	
  8303  001534                     l326:
  8304                           
  8305                           ;matrix_keypad.c: 53: else if (PORTBbits.RB3 == 0)
  8306  001534  B681               	btfsc	3969,3,c	;volatile
  8307  001536  D002               	goto	l328
  8308                           
  8309                           ;matrix_keypad.c: 54: {
  8310                           ;matrix_keypad.c: 55: return 8;
  8311  001538  0E08               	movlw	8
  8312  00153A  0012               	return	
  8313  00153C                     l328:
  8314                           
  8315                           ;matrix_keypad.c: 57: else if (PORTBbits.RB4 == 0)
  8316  00153C  B881               	btfsc	3969,4,c	;volatile
  8317  00153E  D002               	goto	l325
  8318                           
  8319                           ;matrix_keypad.c: 58: {
  8320                           ;matrix_keypad.c: 59: return 11;
  8321  001540  0E0B               	movlw	11
  8322  001542  0012               	return	
  8323  001544                     l325:
  8324                           
  8325                           ;matrix_keypad.c: 60: }
  8326                           ;matrix_keypad.c: 62: PORTBbits.RB5 = 1;
  8327  001544  8A81               	bsf	3969,5,c	;volatile
  8328                           
  8329                           ;matrix_keypad.c: 63: PORTBbits.RB6 = 1;
  8330  001546  8C81               	bsf	3969,6,c	;volatile
  8331                           
  8332                           ;matrix_keypad.c: 64: PORTBbits.RB7 = 0;
  8333  001548  9E81               	bcf	3969,7,c	;volatile
  8334                           
  8335                           ;matrix_keypad.c: 66: PORTBbits.RB7 = 0;
  8336  00154A  9E81               	bcf	3969,7,c	;volatile
  8337                           
  8338                           ;matrix_keypad.c: 68: if (PORTBbits.RB1 == 0)
  8339  00154C  B281               	btfsc	3969,1,c	;volatile
  8340  00154E  D002               	goto	l331
  8341                           
  8342                           ;matrix_keypad.c: 69: {
  8343                           ;matrix_keypad.c: 70: return 3;
  8344  001550  0E03               	movlw	3
  8345  001552  0012               	return	
  8346  001554                     l331:
  8347                           
  8348                           ;matrix_keypad.c: 72: else if (PORTBbits.RB2 == 0)
  8349  001554  B481               	btfsc	3969,2,c	;volatile
  8350  001556  D002               	goto	l333
  8351                           
  8352                           ;matrix_keypad.c: 73: {
  8353                           ;matrix_keypad.c: 74: return 6;
  8354  001558  0E06               	movlw	6
  8355  00155A  0012               	return	
  8356  00155C                     l333:
  8357                           
  8358                           ;matrix_keypad.c: 76: else if (PORTBbits.RB3 == 0)
  8359  00155C  B681               	btfsc	3969,3,c	;volatile
  8360  00155E  D002               	goto	l335
  8361                           
  8362                           ;matrix_keypad.c: 77: {
  8363                           ;matrix_keypad.c: 78: return 9;
  8364  001560  0E09               	movlw	9
  8365  001562  0012               	return	
  8366  001564                     l335:
  8367                           
  8368                           ;matrix_keypad.c: 80: else if (PORTBbits.RB4 == 0)
  8369  001564  B881               	btfsc	3969,4,c	;volatile
  8370  001566  D002               	goto	l2816
  8371                           
  8372                           ;matrix_keypad.c: 81: {
  8373                           ;matrix_keypad.c: 82: return 12;
  8374  001568  0E0C               	movlw	12
  8375  00156A  0012               	return	
  8376  00156C                     l2816:
  8377                           
  8378                           ;matrix_keypad.c: 83: }
  8379                           ;matrix_keypad.c: 85: return 0xFF;
  8380  00156C  0EFF               	movlw	255
  8381  00156E  0012               	return	
  8382  001570                     __end_of_scan_key:
  8383                           	opt stack 0
  8384                           tblptru	equ	0xFF8
  8385                           tblptrh	equ	0xFF7
  8386                           tblptrl	equ	0xFF6
  8387                           tablat	equ	0xFF5
  8388                           intcon2	equ	0xFF1
  8389                           indf0	equ	0xFEF
  8390                           postinc0	equ	0xFEE
  8391                           fsr0h	equ	0xFEA
  8392                           fsr0l	equ	0xFE9
  8393                           wreg	equ	0xFE8
  8394                           indf1	equ	0xFE7
  8395                           postinc1	equ	0xFE6
  8396                           postdec1	equ	0xFE5
  8397                           plusw1	equ	0xFE3
  8398                           fsr1h	equ	0xFE2
  8399                           fsr1l	equ	0xFE1
  8400                           indf2	equ	0xFDF
  8401                           postinc2	equ	0xFDE
  8402                           plusw2	equ	0xFDB
  8403                           fsr2h	equ	0xFDA
  8404                           fsr2l	equ	0xFD9
  8405                           status	equ	0xFD8
  8406                           
  8407 ;; *************** function _clcd_print *****************
  8408 ;; Defined at:
  8409 ;;		line 42 in file "clcd.c"
  8410 ;; Parameters:    Size  Location     Type
  8411 ;;  data            2    6[COMRAM] PTR const unsigned char 
  8412 ;;		 -> STR_40(3), STR_39(3), STR_38(3), STR_37(17), 
  8413 ;;		 -> STR_36(17), view@display1(17), view@display(17), STR_34(16), 
  8414 ;;		 -> STR_33(16), STR_32(19), STR_31(5), STR_30(10), 
  8415 ;;		 -> STR_29(2), STR_28(2), STR_27(2), STR_26(2), 
  8416 ;;		 -> STR_25(17), STR_24(17), set(9), STR_23(17), 
  8417 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_15(17), 
  8418 ;;		 -> main@store(17), main@str(102), STR_14(17), STR_13(17), 
  8419 ;;		 -> STR_12(17), STR_11(2), STR_10(2), STR_9(2), 
  8420 ;;		 -> STR_8(2), STR_7(19), STR_6(16), STR_5(2), 
  8421 ;;		 -> STR_4(2), STR_3(2), STR_2(2), STR_1(18), 
  8422 ;;  addr            1    8[COMRAM] unsigned char 
  8423 ;; Auto vars:     Size  Location     Type
  8424 ;;		None
  8425 ;; Return value:  Size  Location     Type
  8426 ;;                  1    wreg      void 
  8427 ;; Registers used:
  8428 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8429 ;; Tracked objects:
  8430 ;;		On entry : 0/0
  8431 ;;		On exit  : 0/0
  8432 ;;		Unchanged: 0/0
  8433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8434 ;;      Params:         3       0       0       0       0       0       0
  8435 ;;      Locals:         0       0       0       0       0       0       0
  8436 ;;      Temps:          0       0       0       0       0       0       0
  8437 ;;      Totals:         3       0       0       0       0       0       0
  8438 ;;Total ram usage:        3 bytes
  8439 ;; Hardware stack levels used:    1
  8440 ;; Hardware stack levels required when called:    1
  8441 ;; This function calls:
  8442 ;;		_clcd_write
  8443 ;; This function is called by:
  8444 ;;		_changepass
  8445 ;;		_main
  8446 ;;		_pass
  8447 ;;		_view
  8448 ;;		_settime
  8449 ;; This function uses a non-reentrant model
  8450 ;;
  8451                           
  8452                           	psect	text34
  8453  00134A                     __ptext34:
  8454                           	opt stack 0
  8455  00134A                     _clcd_print:
  8456                           	opt stack 28
  8457                           
  8458                           ;clcd.c: 44: clcd_write(addr, 0);
  8459                           
  8460                           ;incstack = 0
  8461  00134A  0E00               	movlw	0
  8462  00134C  6E01               	movwf	clcd_write@control_bit,c
  8463  00134E  5009               	movf	clcd_print@addr,w,c
  8464  001350  EC0D  F008         	call	_clcd_write
  8465                           
  8466                           ;clcd.c: 45: while (*data != '\0')
  8467  001354  D016               	goto	l2854
  8468  001356                     l2850:
  8469                           
  8470                           ;clcd.c: 46: {
  8471                           ;clcd.c: 47: clcd_write(*data++, 1);
  8472  001356  0E01               	movlw	1
  8473  001358  6E01               	movwf	clcd_write@control_bit,c
  8474  00135A  C007  FFF6         	movff	clcd_print@data,tblptrl
  8475  00135E  C008  FFF7         	movff	clcd_print@data+1,tblptrh
  8476  001362  6AF8               	clrf	tblptru,c
  8477  001364  0E05               	movlw	(high __ramtop+-1)
  8478  001366  64F7               	cpfsgt	tblptrh,c
  8479  001368  D003               	bra	u2297
  8480  00136A  0008               	tblrd		*
  8481  00136C  50F5               	movf	tablat,w,c
  8482  00136E  D005               	bra	u2290
  8483  001370                     u2297:
  8484  001370  CFF6 FFE9          	movff	tblptrl,fsr0l
  8485  001374  CFF7 FFEA          	movff	tblptrh,fsr0h
  8486  001378  50EF               	movf	indf0,w,c
  8487  00137A                     u2290:
  8488  00137A  EC0D  F008         	call	_clcd_write
  8489  00137E  4A07               	infsnz	clcd_print@data,f,c
  8490  001380  2A08               	incf	clcd_print@data+1,f,c
  8491  001382                     l2854:
  8492  001382  C007  FFF6         	movff	clcd_print@data,tblptrl
  8493  001386  C008  FFF7         	movff	clcd_print@data+1,tblptrh
  8494  00138A  6AF8               	clrf	tblptru,c
  8495  00138C  0E05               	movlw	(high __ramtop+-1)
  8496  00138E  64F7               	cpfsgt	tblptrh,c
  8497  001390  D003               	bra	u2307
  8498  001392  0008               	tblrd		*
  8499  001394  50F5               	movf	tablat,w,c
  8500  001396  D005               	bra	u2300
  8501  001398                     u2307:
  8502  001398  CFF6 FFE9          	movff	tblptrl,fsr0l
  8503  00139C  CFF7 FFEA          	movff	tblptrh,fsr0h
  8504  0013A0  50EF               	movf	indf0,w,c
  8505  0013A2                     u2300:
  8506  0013A2  0900               	iorlw	0
  8507  0013A4  B4D8               	btfsc	status,2,c
  8508  0013A6  0012               	return	
  8509  0013A8  D7D6               	goto	l2850
  8510  0013AA                     __end_of_clcd_print:
  8511                           	opt stack 0
  8512                           tblptru	equ	0xFF8
  8513                           tblptrh	equ	0xFF7
  8514                           tblptrl	equ	0xFF6
  8515                           tablat	equ	0xFF5
  8516                           intcon2	equ	0xFF1
  8517                           indf0	equ	0xFEF
  8518                           postinc0	equ	0xFEE
  8519                           fsr0h	equ	0xFEA
  8520                           fsr0l	equ	0xFE9
  8521                           wreg	equ	0xFE8
  8522                           indf1	equ	0xFE7
  8523                           postinc1	equ	0xFE6
  8524                           postdec1	equ	0xFE5
  8525                           plusw1	equ	0xFE3
  8526                           fsr1h	equ	0xFE2
  8527                           fsr1l	equ	0xFE1
  8528                           indf2	equ	0xFDF
  8529                           postinc2	equ	0xFDE
  8530                           plusw2	equ	0xFDB
  8531                           fsr2h	equ	0xFDA
  8532                           fsr2l	equ	0xFD9
  8533                           status	equ	0xFD8
  8534                           
  8535 ;; *************** function _clcd_write *****************
  8536 ;; Defined at:
  8537 ;;		line 4 in file "clcd.c"
  8538 ;; Parameters:    Size  Location     Type
  8539 ;;  byte            1    wreg     unsigned char 
  8540 ;;  control_bit     1    0[COMRAM] unsigned char 
  8541 ;; Auto vars:     Size  Location     Type
  8542 ;;  byte            1    1[COMRAM] unsigned char 
  8543 ;; Return value:  Size  Location     Type
  8544 ;;                  1    wreg      void 
  8545 ;; Registers used:
  8546 ;;		wreg
  8547 ;; Tracked objects:
  8548 ;;		On entry : 0/0
  8549 ;;		On exit  : 0/0
  8550 ;;		Unchanged: 0/0
  8551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8552 ;;      Params:         1       0       0       0       0       0       0
  8553 ;;      Locals:         1       0       0       0       0       0       0
  8554 ;;      Temps:          0       0       0       0       0       0       0
  8555 ;;      Totals:         2       0       0       0       0       0       0
  8556 ;;Total ram usage:        2 bytes
  8557 ;; Hardware stack levels used:    1
  8558 ;; This function calls:
  8559 ;;		Nothing
  8560 ;; This function is called by:
  8561 ;;		_changepass
  8562 ;;		_init_clcd
  8563 ;;		_clcd_print
  8564 ;;		_clcd_putch
  8565 ;; This function uses a non-reentrant model
  8566 ;;
  8567                           
  8568                           	psect	text35
  8569  00101A                     __ptext35:
  8570                           	opt stack 0
  8571  00101A                     _clcd_write:
  8572                           	opt stack 28
  8573                           
  8574                           ;incstack = 0
  8575                           ;clcd_write@byte stored from wreg
  8576  00101A  6E02               	movwf	clcd_write@byte,c
  8577                           
  8578                           ;clcd.c: 6: RC1 = control_bit;
  8579  00101C  A001               	btfss	clcd_write@control_bit,0,c
  8580  00101E  D002               	goto	u2080
  8581  001020  8282               	bsf	3970,1,c	;volatile
  8582  001022  D001               	goto	l2702
  8583  001024                     u2080:
  8584  001024  9282               	bcf	3970,1,c	;volatile
  8585  001026                     l2702:
  8586                           
  8587                           ;clcd.c: 7: PORTD = byte;
  8588  001026  C002  FF83         	movff	clcd_write@byte,3971	;volatile
  8589                           
  8590                           ;clcd.c: 10: RC2 = 1;
  8591  00102A  8482               	bsf	3970,2,c	;volatile
  8592                           
  8593                           ;clcd.c: 11: RC2 = 0;
  8594  00102C  9482               	bcf	3970,2,c	;volatile
  8595                           
  8596                           ;clcd.c: 13: TRISD7 = 0xFF;
  8597  00102E  8E95               	bsf	3989,7,c	;volatile
  8598                           
  8599                           ;clcd.c: 14: RC0 = 1;
  8600  001030  8082               	bsf	3970,0,c	;volatile
  8601                           
  8602                           ;clcd.c: 15: RC1 = 0;
  8603  001032  9282               	bcf	3970,1,c	;volatile
  8604  001034                     l2714:
  8605                           
  8606                           ;clcd.c: 18: {
  8607                           ;clcd.c: 19: RC2 = 1;
  8608  001034  8482               	bsf	3970,2,c	;volatile
  8609                           
  8610                           ;clcd.c: 20: RC2 = 0;
  8611  001036  9482               	bcf	3970,2,c	;volatile
  8612                           
  8613                           ;clcd.c: 21: } while (RD7);
  8614  001038  BE83               	btfsc	3971,7,c	;volatile
  8615  00103A  D7FC               	goto	l2714
  8616                           
  8617                           ;clcd.c: 23: RC0 = 0;
  8618  00103C  9082               	bcf	3970,0,c	;volatile
  8619                           
  8620                           ;clcd.c: 24: TRISD7 = 0x00;
  8621  00103E  9E95               	bcf	3989,7,c	;volatile
  8622  001040  0012               	return		;funcret
  8623  001042                     __end_of_clcd_write:
  8624                           	opt stack 0
  8625                           tblptru	equ	0xFF8
  8626                           tblptrh	equ	0xFF7
  8627                           tblptrl	equ	0xFF6
  8628                           tablat	equ	0xFF5
  8629                           intcon2	equ	0xFF1
  8630                           indf0	equ	0xFEF
  8631                           postinc0	equ	0xFEE
  8632                           fsr0h	equ	0xFEA
  8633                           fsr0l	equ	0xFE9
  8634                           wreg	equ	0xFE8
  8635                           indf1	equ	0xFE7
  8636                           postinc1	equ	0xFE6
  8637                           postdec1	equ	0xFE5
  8638                           plusw1	equ	0xFE3
  8639                           fsr1h	equ	0xFE2
  8640                           fsr1l	equ	0xFE1
  8641                           indf2	equ	0xFDF
  8642                           postinc2	equ	0xFDE
  8643                           plusw2	equ	0xFDB
  8644                           fsr2h	equ	0xFDA
  8645                           fsr2l	equ	0xFD9
  8646                           status	equ	0xFD8
  8647                           
  8648 ;; *************** function ___wmul *****************
  8649 ;; Defined at:
  8650 ;;		line 15 in file "/opt/microchip/xc8/v1.36/sources/common/Umul16.c"
  8651 ;; Parameters:    Size  Location     Type
  8652 ;;  multiplier      2    0[COMRAM] unsigned int 
  8653 ;;  multiplicand    2    2[COMRAM] unsigned int 
  8654 ;; Auto vars:     Size  Location     Type
  8655 ;;  product         2    4[COMRAM] unsigned int 
  8656 ;; Return value:  Size  Location     Type
  8657 ;;                  2    0[COMRAM] unsigned int 
  8658 ;; Registers used:
  8659 ;;		wreg, status,2, status,0, prodl, prodh
  8660 ;; Tracked objects:
  8661 ;;		On entry : 0/0
  8662 ;;		On exit  : 0/0
  8663 ;;		Unchanged: 0/0
  8664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8665 ;;      Params:         4       0       0       0       0       0       0
  8666 ;;      Locals:         2       0       0       0       0       0       0
  8667 ;;      Temps:          0       0       0       0       0       0       0
  8668 ;;      Totals:         6       0       0       0       0       0       0
  8669 ;;Total ram usage:        6 bytes
  8670 ;; Hardware stack levels used:    1
  8671 ;; This function calls:
  8672 ;;		Nothing
  8673 ;; This function is called by:
  8674 ;;		_main
  8675 ;; This function uses a non-reentrant model
  8676 ;;
  8677                           
  8678                           	psect	text36
  8679  000FF4                     __ptext36:
  8680                           	opt stack 0
  8681  000FF4                     ___wmul:
  8682                           	opt stack 30
  8683                           
  8684                           ;incstack = 0
  8685  000FF4  5001               	movf	___wmul@multiplier,w,c
  8686  000FF6  0203               	mulwf	___wmul@multiplicand,c
  8687  000FF8  CFF3 F005          	movff	prodl,___wmul@product
  8688  000FFC  CFF4 F006          	movff	prodh,___wmul@product+1
  8689  001000  5001               	movf	___wmul@multiplier,w,c
  8690  001002  0204               	mulwf	___wmul@multiplicand+1,c
  8691  001004  50F3               	movf	prodl,w,c
  8692  001006  2606               	addwf	___wmul@product+1,f,c
  8693  001008  5002               	movf	___wmul@multiplier+1,w,c
  8694  00100A  0203               	mulwf	___wmul@multiplicand,c
  8695  00100C  50F3               	movf	prodl,w,c
  8696  00100E  2606               	addwf	___wmul@product+1,f,c
  8697  001010  C005  F001         	movff	___wmul@product,?___wmul
  8698  001014  C006  F002         	movff	___wmul@product+1,?___wmul+1
  8699  001018  0012               	return	
  8700  00101A                     __end_of___wmul:
  8701                           	opt stack 0
  8702                           tblptru	equ	0xFF8
  8703                           tblptrh	equ	0xFF7
  8704                           tblptrl	equ	0xFF6
  8705                           tablat	equ	0xFF5
  8706                           prodh	equ	0xFF4
  8707                           prodl	equ	0xFF3
  8708                           intcon2	equ	0xFF1
  8709                           indf0	equ	0xFEF
  8710                           postinc0	equ	0xFEE
  8711                           fsr0h	equ	0xFEA
  8712                           fsr0l	equ	0xFE9
  8713                           wreg	equ	0xFE8
  8714                           indf1	equ	0xFE7
  8715                           postinc1	equ	0xFE6
  8716                           postdec1	equ	0xFE5
  8717                           plusw1	equ	0xFE3
  8718                           fsr1h	equ	0xFE2
  8719                           fsr1l	equ	0xFE1
  8720                           indf2	equ	0xFDF
  8721                           postinc2	equ	0xFDE
  8722                           plusw2	equ	0xFDB
  8723                           fsr2h	equ	0xFDA
  8724                           fsr2l	equ	0xFD9
  8725                           status	equ	0xFD8
  8726                           
  8727 ;; *************** function ___lwtoft *****************
  8728 ;; Defined at:
  8729 ;;		line 28 in file "/opt/microchip/xc8/v1.36/sources/common/lwtoft.c"
  8730 ;; Parameters:    Size  Location     Type
  8731 ;;  c               2    8[COMRAM] unsigned int 
  8732 ;; Auto vars:     Size  Location     Type
  8733 ;;		None
  8734 ;; Return value:  Size  Location     Type
  8735 ;;                  3    8[COMRAM] float 
  8736 ;; Registers used:
  8737 ;;		wreg, status,2, status,0, cstack
  8738 ;; Tracked objects:
  8739 ;;		On entry : 0/0
  8740 ;;		On exit  : 0/0
  8741 ;;		Unchanged: 0/0
  8742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8743 ;;      Params:         3       0       0       0       0       0       0
  8744 ;;      Locals:         0       0       0       0       0       0       0
  8745 ;;      Temps:          0       0       0       0       0       0       0
  8746 ;;      Totals:         3       0       0       0       0       0       0
  8747 ;;Total ram usage:        3 bytes
  8748 ;; Hardware stack levels used:    1
  8749 ;; Hardware stack levels required when called:    1
  8750 ;; This function calls:
  8751 ;;		___ftpack
  8752 ;; This function is called by:
  8753 ;;		_main
  8754 ;; This function uses a non-reentrant model
  8755 ;;
  8756                           
  8757                           	psect	text37
  8758  000FD0                     __ptext37:
  8759                           	opt stack 0
  8760  000FD0                     ___lwtoft:
  8761                           	opt stack 29
  8762                           
  8763                           ;incstack = 0
  8764  000FD0  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  8765  000FD4  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  8766  000FD8  6A03               	clrf	___ftpack@arg+2,c
  8767  000FDA  0E8E               	movlw	142
  8768  000FDC  6E04               	movwf	___ftpack@exp,c
  8769  000FDE  0E00               	movlw	0
  8770  000FE0  6E05               	movwf	___ftpack@sign,c
  8771  000FE2  EC36  F00B         	call	___ftpack	;wreg free
  8772  000FE6  C001  F009         	movff	?___ftpack,?___lwtoft
  8773  000FEA  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  8774  000FEE  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  8775  000FF2  0012               	return	
  8776  000FF4                     __end_of___lwtoft:
  8777                           	opt stack 0
  8778                           tblptru	equ	0xFF8
  8779                           tblptrh	equ	0xFF7
  8780                           tblptrl	equ	0xFF6
  8781                           tablat	equ	0xFF5
  8782                           prodh	equ	0xFF4
  8783                           prodl	equ	0xFF3
  8784                           intcon2	equ	0xFF1
  8785                           indf0	equ	0xFEF
  8786                           postinc0	equ	0xFEE
  8787                           fsr0h	equ	0xFEA
  8788                           fsr0l	equ	0xFE9
  8789                           wreg	equ	0xFE8
  8790                           indf1	equ	0xFE7
  8791                           postinc1	equ	0xFE6
  8792                           postdec1	equ	0xFE5
  8793                           plusw1	equ	0xFE3
  8794                           fsr1h	equ	0xFE2
  8795                           fsr1l	equ	0xFE1
  8796                           indf2	equ	0xFDF
  8797                           postinc2	equ	0xFDE
  8798                           plusw2	equ	0xFDB
  8799                           fsr2h	equ	0xFDA
  8800                           fsr2l	equ	0xFD9
  8801                           status	equ	0xFD8
  8802                           
  8803 ;; *************** function ___lwmod *****************
  8804 ;; Defined at:
  8805 ;;		line 8 in file "/opt/microchip/xc8/v1.36/sources/common/lwmod.c"
  8806 ;; Parameters:    Size  Location     Type
  8807 ;;  dividend        2    0[COMRAM] unsigned int 
  8808 ;;  divisor         2    2[COMRAM] unsigned int 
  8809 ;; Auto vars:     Size  Location     Type
  8810 ;;  counter         1    4[COMRAM] unsigned char 
  8811 ;; Return value:  Size  Location     Type
  8812 ;;                  2    0[COMRAM] unsigned int 
  8813 ;; Registers used:
  8814 ;;		wreg, status,2, status,0
  8815 ;; Tracked objects:
  8816 ;;		On entry : 0/0
  8817 ;;		On exit  : 0/0
  8818 ;;		Unchanged: 0/0
  8819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8820 ;;      Params:         4       0       0       0       0       0       0
  8821 ;;      Locals:         1       0       0       0       0       0       0
  8822 ;;      Temps:          0       0       0       0       0       0       0
  8823 ;;      Totals:         5       0       0       0       0       0       0
  8824 ;;Total ram usage:        5 bytes
  8825 ;; Hardware stack levels used:    1
  8826 ;; This function calls:
  8827 ;;		Nothing
  8828 ;; This function is called by:
  8829 ;;		_main
  8830 ;; This function uses a non-reentrant model
  8831 ;;
  8832                           
  8833                           	psect	text38
  8834  0011BE                     __ptext38:
  8835                           	opt stack 0
  8836  0011BE                     ___lwmod:
  8837                           	opt stack 30
  8838                           
  8839                           ;incstack = 0
  8840  0011BE  5003               	movf	___lwmod@divisor,w,c
  8841  0011C0  1004               	iorwf	___lwmod@divisor+1,w,c
  8842  0011C2  B4D8               	btfsc	status,2,c
  8843  0011C4  D018               	goto	l1035
  8844  0011C6  0E01               	movlw	1
  8845  0011C8  6E05               	movwf	___lwmod@counter,c
  8846  0011CA  D004               	goto	l3742
  8847  0011CC                     l3740:
  8848  0011CC  90D8               	bcf	status,0,c
  8849  0011CE  3603               	rlcf	___lwmod@divisor,f,c
  8850  0011D0  3604               	rlcf	___lwmod@divisor+1,f,c
  8851  0011D2  2A05               	incf	___lwmod@counter,f,c
  8852  0011D4                     l3742:
  8853  0011D4  AE04               	btfss	___lwmod@divisor+1,7,c
  8854  0011D6  D7FA               	goto	l3740
  8855  0011D8                     l3744:
  8856  0011D8  5003               	movf	___lwmod@divisor,w,c
  8857  0011DA  5C01               	subwf	___lwmod@dividend,w,c
  8858  0011DC  5004               	movf	___lwmod@divisor+1,w,c
  8859  0011DE  5802               	subwfb	___lwmod@dividend+1,w,c
  8860  0011E0  A0D8               	btfss	status,0,c
  8861  0011E2  D004               	goto	l3748
  8862  0011E4  5003               	movf	___lwmod@divisor,w,c
  8863  0011E6  5E01               	subwf	___lwmod@dividend,f,c
  8864  0011E8  5004               	movf	___lwmod@divisor+1,w,c
  8865  0011EA  5A02               	subwfb	___lwmod@dividend+1,f,c
  8866  0011EC                     l3748:
  8867  0011EC  90D8               	bcf	status,0,c
  8868  0011EE  3204               	rrcf	___lwmod@divisor+1,f,c
  8869  0011F0  3203               	rrcf	___lwmod@divisor,f,c
  8870  0011F2  2E05               	decfsz	___lwmod@counter,f,c
  8871  0011F4  D7F1               	goto	l3744
  8872  0011F6                     l1035:
  8873  0011F6  C001  F001         	movff	___lwmod@dividend,?___lwmod
  8874  0011FA  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  8875  0011FE  0012               	return		;funcret
  8876  001200                     __end_of___lwmod:
  8877                           	opt stack 0
  8878                           tblptru	equ	0xFF8
  8879                           tblptrh	equ	0xFF7
  8880                           tblptrl	equ	0xFF6
  8881                           tablat	equ	0xFF5
  8882                           prodh	equ	0xFF4
  8883                           prodl	equ	0xFF3
  8884                           intcon2	equ	0xFF1
  8885                           indf0	equ	0xFEF
  8886                           postinc0	equ	0xFEE
  8887                           fsr0h	equ	0xFEA
  8888                           fsr0l	equ	0xFE9
  8889                           wreg	equ	0xFE8
  8890                           indf1	equ	0xFE7
  8891                           postinc1	equ	0xFE6
  8892                           postdec1	equ	0xFE5
  8893                           plusw1	equ	0xFE3
  8894                           fsr1h	equ	0xFE2
  8895                           fsr1l	equ	0xFE1
  8896                           indf2	equ	0xFDF
  8897                           postinc2	equ	0xFDE
  8898                           plusw2	equ	0xFDB
  8899                           fsr2h	equ	0xFDA
  8900                           fsr2l	equ	0xFD9
  8901                           status	equ	0xFD8
  8902                           
  8903 ;; *************** function ___lwdiv *****************
  8904 ;; Defined at:
  8905 ;;		line 8 in file "/opt/microchip/xc8/v1.36/sources/common/lwdiv.c"
  8906 ;; Parameters:    Size  Location     Type
  8907 ;;  dividend        2    5[COMRAM] unsigned int 
  8908 ;;  divisor         2    7[COMRAM] unsigned int 
  8909 ;; Auto vars:     Size  Location     Type
  8910 ;;  quotient        2    9[COMRAM] unsigned int 
  8911 ;;  counter         1   11[COMRAM] unsigned char 
  8912 ;; Return value:  Size  Location     Type
  8913 ;;                  2    5[COMRAM] unsigned int 
  8914 ;; Registers used:
  8915 ;;		wreg, status,2, status,0
  8916 ;; Tracked objects:
  8917 ;;		On entry : 0/0
  8918 ;;		On exit  : 0/0
  8919 ;;		Unchanged: 0/0
  8920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8921 ;;      Params:         4       0       0       0       0       0       0
  8922 ;;      Locals:         3       0       0       0       0       0       0
  8923 ;;      Temps:          0       0       0       0       0       0       0
  8924 ;;      Totals:         7       0       0       0       0       0       0
  8925 ;;Total ram usage:        7 bytes
  8926 ;; Hardware stack levels used:    1
  8927 ;; This function calls:
  8928 ;;		Nothing
  8929 ;; This function is called by:
  8930 ;;		_main
  8931 ;; This function uses a non-reentrant model
  8932 ;;
  8933                           
  8934                           	psect	text39
  8935  001248                     __ptext39:
  8936                           	opt stack 0
  8937  001248                     ___lwdiv:
  8938                           	opt stack 30
  8939                           
  8940                           ;incstack = 0
  8941  001248  0E00               	movlw	0
  8942  00124A  6E0B               	movwf	___lwdiv@quotient+1,c
  8943  00124C  0E00               	movlw	0
  8944  00124E  6E0A               	movwf	___lwdiv@quotient,c
  8945  001250  5008               	movf	___lwdiv@divisor,w,c
  8946  001252  1009               	iorwf	___lwdiv@divisor+1,w,c
  8947  001254  B4D8               	btfsc	status,2,c
  8948  001256  D01C               	goto	l1025
  8949  001258  0E01               	movlw	1
  8950  00125A  6E0C               	movwf	___lwdiv@counter,c
  8951  00125C  D004               	goto	l3722
  8952  00125E                     l3720:
  8953  00125E  90D8               	bcf	status,0,c
  8954  001260  3608               	rlcf	___lwdiv@divisor,f,c
  8955  001262  3609               	rlcf	___lwdiv@divisor+1,f,c
  8956  001264  2A0C               	incf	___lwdiv@counter,f,c
  8957  001266                     l3722:
  8958  001266  AE09               	btfss	___lwdiv@divisor+1,7,c
  8959  001268  D7FA               	goto	l3720
  8960  00126A                     l3724:
  8961  00126A  90D8               	bcf	status,0,c
  8962  00126C  360A               	rlcf	___lwdiv@quotient,f,c
  8963  00126E  360B               	rlcf	___lwdiv@quotient+1,f,c
  8964  001270  5008               	movf	___lwdiv@divisor,w,c
  8965  001272  5C06               	subwf	___lwdiv@dividend,w,c
  8966  001274  5009               	movf	___lwdiv@divisor+1,w,c
  8967  001276  5807               	subwfb	___lwdiv@dividend+1,w,c
  8968  001278  A0D8               	btfss	status,0,c
  8969  00127A  D005               	goto	l3732
  8970  00127C  5008               	movf	___lwdiv@divisor,w,c
  8971  00127E  5E06               	subwf	___lwdiv@dividend,f,c
  8972  001280  5009               	movf	___lwdiv@divisor+1,w,c
  8973  001282  5A07               	subwfb	___lwdiv@dividend+1,f,c
  8974  001284  800A               	bsf	___lwdiv@quotient,0,c
  8975  001286                     l3732:
  8976  001286  90D8               	bcf	status,0,c
  8977  001288  3209               	rrcf	___lwdiv@divisor+1,f,c
  8978  00128A  3208               	rrcf	___lwdiv@divisor,f,c
  8979  00128C  2E0C               	decfsz	___lwdiv@counter,f,c
  8980  00128E  D7ED               	goto	l3724
  8981  001290                     l1025:
  8982  001290  C00A  F006         	movff	___lwdiv@quotient,?___lwdiv
  8983  001294  C00B  F007         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8984  001298  0012               	return		;funcret
  8985  00129A                     __end_of___lwdiv:
  8986                           	opt stack 0
  8987                           tblptru	equ	0xFF8
  8988                           tblptrh	equ	0xFF7
  8989                           tblptrl	equ	0xFF6
  8990                           tablat	equ	0xFF5
  8991                           prodh	equ	0xFF4
  8992                           prodl	equ	0xFF3
  8993                           intcon2	equ	0xFF1
  8994                           indf0	equ	0xFEF
  8995                           postinc0	equ	0xFEE
  8996                           fsr0h	equ	0xFEA
  8997                           fsr0l	equ	0xFE9
  8998                           wreg	equ	0xFE8
  8999                           indf1	equ	0xFE7
  9000                           postinc1	equ	0xFE6
  9001                           postdec1	equ	0xFE5
  9002                           plusw1	equ	0xFE3
  9003                           fsr1h	equ	0xFE2
  9004                           fsr1l	equ	0xFE1
  9005                           indf2	equ	0xFDF
  9006                           postinc2	equ	0xFDE
  9007                           plusw2	equ	0xFDB
  9008                           fsr2h	equ	0xFDA
  9009                           fsr2l	equ	0xFD9
  9010                           status	equ	0xFD8
  9011                           
  9012 ;; *************** function ___fttol *****************
  9013 ;; Defined at:
  9014 ;;		line 44 in file "/opt/microchip/xc8/v1.36/sources/common/fttol.c"
  9015 ;; Parameters:    Size  Location     Type
  9016 ;;  f1              3   26[COMRAM] float 
  9017 ;; Auto vars:     Size  Location     Type
  9018 ;;  lval            4   36[COMRAM] unsigned long 
  9019 ;;  exp1            1   40[COMRAM] unsigned char 
  9020 ;;  sign1           1   35[COMRAM] unsigned char 
  9021 ;; Return value:  Size  Location     Type
  9022 ;;                  4   26[COMRAM] long 
  9023 ;; Registers used:
  9024 ;;		wreg, status,2, status,0
  9025 ;; Tracked objects:
  9026 ;;		On entry : 0/0
  9027 ;;		On exit  : 0/0
  9028 ;;		Unchanged: 0/0
  9029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9030 ;;      Params:         4       0       0       0       0       0       0
  9031 ;;      Locals:         6       0       0       0       0       0       0
  9032 ;;      Temps:          5       0       0       0       0       0       0
  9033 ;;      Totals:        15       0       0       0       0       0       0
  9034 ;;Total ram usage:       15 bytes
  9035 ;; Hardware stack levels used:    1
  9036 ;; This function calls:
  9037 ;;		Nothing
  9038 ;; This function is called by:
  9039 ;;		_main
  9040 ;; This function uses a non-reentrant model
  9041 ;;
  9042                           
  9043                           	psect	text40
  9044  001800                     __ptext40:
  9045                           	opt stack 0
  9046  001800                     ___fttol:
  9047                           	opt stack 30
  9048                           
  9049                           ;incstack = 0
  9050  001800  C01D  F01F         	movff	___fttol@f1+2,??___fttol
  9051  001804  6A20               	clrf	(??___fttol+1)& (0+255),c
  9052  001806  6A21               	clrf	(??___fttol+2)& (0+255),c
  9053  001808  341C               	rlcf	___fttol@f1+1,w,c
  9054  00180A  361F               	rlcf	??___fttol& (0+255),f,c
  9055  00180C  E301               	bnc	u3481
  9056  00180E  8020               	bsf	(??___fttol+1)& (0+255),0,c
  9057  001810                     u3481:
  9058  001810  501F               	movf	??___fttol,w,c
  9059  001812  6E29               	movwf	___fttol@exp1,c
  9060  001814  5029               	movf	___fttol@exp1,w,c
  9061  001816  A4D8               	btfss	status,2,c
  9062  001818  D009               	goto	l3674
  9063  00181A  0E00               	movlw	0
  9064  00181C  6E1B               	movwf	?___fttol,c
  9065  00181E  0E00               	movlw	0
  9066  001820  6E1C               	movwf	?___fttol+1,c
  9067  001822  0E00               	movlw	0
  9068  001824  6E1D               	movwf	?___fttol+2,c
  9069  001826  0E00               	movlw	0
  9070  001828  6E1E               	movwf	?___fttol+3,c
  9071  00182A  0012               	return	
  9072  00182C                     l3674:
  9073  00182C  0E17               	movlw	23
  9074  00182E  6E1F               	movwf	??___fttol& (0+255),c
  9075  001830  C01B  F020         	movff	___fttol@f1,??___fttol+1
  9076  001834  C01C  F021         	movff	___fttol@f1+1,??___fttol+2
  9077  001838  C01D  F022         	movff	___fttol@f1+2,??___fttol+3
  9078  00183C  281F               	incf	??___fttol,w,c
  9079  00183E  6E23               	movwf	(??___fttol+4)& (0+255),c
  9080  001840  D004               	goto	u3500
  9081  001842                     u3505:
  9082  001842  90D8               	bcf	status,0,c
  9083  001844  3222               	rrcf	??___fttol+3,f,c
  9084  001846  3221               	rrcf	??___fttol+2,f,c
  9085  001848  3220               	rrcf	??___fttol+1,f,c
  9086  00184A                     u3500:
  9087  00184A  2E23               	decfsz	(??___fttol+4)& (0+255),f,c
  9088  00184C  D7FA               	goto	u3505
  9089  00184E  5020               	movf	??___fttol+1,w,c
  9090  001850  6E24               	movwf	___fttol@sign1,c
  9091  001852  8E1C               	bsf	___fttol@f1+1,7,c
  9092  001854  0EFF               	movlw	255
  9093  001856  161B               	andwf	___fttol@f1,f,c
  9094  001858  0EFF               	movlw	255
  9095  00185A  161C               	andwf	___fttol@f1+1,f,c
  9096  00185C  0E00               	movlw	0
  9097  00185E  161D               	andwf	___fttol@f1+2,f,c
  9098  001860  501B               	movf	___fttol@f1,w,c
  9099  001862  6E25               	movwf	___fttol@lval,c
  9100  001864  501C               	movf	___fttol@f1+1,w,c
  9101  001866  6E26               	movwf	___fttol@lval+1,c
  9102  001868  501D               	movf	___fttol@f1+2,w,c
  9103  00186A  6E27               	movwf	___fttol@lval+2,c
  9104  00186C  6A28               	clrf	___fttol@lval+3,c
  9105  00186E  0E8E               	movlw	142
  9106  001870  5E29               	subwf	___fttol@exp1,f,c
  9107  001872  AE29               	btfss	___fttol@exp1,7,c
  9108  001874  D016               	goto	l3696
  9109  001876  5029               	movf	___fttol@exp1,w,c
  9110  001878  0A80               	xorlw	128
  9111  00187A  0F8F               	addlw	143
  9112  00187C  B0D8               	btfsc	status,0,c
  9113  00187E  D009               	goto	l3692
  9114  001880  0E00               	movlw	0
  9115  001882  6E1B               	movwf	?___fttol,c
  9116  001884  0E00               	movlw	0
  9117  001886  6E1C               	movwf	?___fttol+1,c
  9118  001888  0E00               	movlw	0
  9119  00188A  6E1D               	movwf	?___fttol+2,c
  9120  00188C  0E00               	movlw	0
  9121  00188E  6E1E               	movwf	?___fttol+3,c
  9122  001890  0012               	return	
  9123  001892                     l3692:
  9124  001892  90D8               	bcf	status,0,c
  9125  001894  3228               	rrcf	___fttol@lval+3,f,c
  9126  001896  3227               	rrcf	___fttol@lval+2,f,c
  9127  001898  3226               	rrcf	___fttol@lval+1,f,c
  9128  00189A  3225               	rrcf	___fttol@lval,f,c
  9129  00189C  3E29               	incfsz	___fttol@exp1,f,c
  9130  00189E  D7F9               	goto	l3692
  9131  0018A0  D015               	goto	l3706
  9132  0018A2                     l3696:
  9133  0018A2  0E17               	movlw	23
  9134  0018A4  6429               	cpfsgt	___fttol@exp1,c
  9135  0018A6  D00F               	goto	l3704
  9136  0018A8  0E00               	movlw	0
  9137  0018AA  6E1B               	movwf	?___fttol,c
  9138  0018AC  0E00               	movlw	0
  9139  0018AE  6E1C               	movwf	?___fttol+1,c
  9140  0018B0  0E00               	movlw	0
  9141  0018B2  6E1D               	movwf	?___fttol+2,c
  9142  0018B4  0E00               	movlw	0
  9143  0018B6  6E1E               	movwf	?___fttol+3,c
  9144  0018B8  0012               	return	
  9145  0018BA                     l3702:
  9146  0018BA  90D8               	bcf	status,0,c
  9147  0018BC  3625               	rlcf	___fttol@lval,f,c
  9148  0018BE  3626               	rlcf	___fttol@lval+1,f,c
  9149  0018C0  3627               	rlcf	___fttol@lval+2,f,c
  9150  0018C2  3628               	rlcf	___fttol@lval+3,f,c
  9151  0018C4  0629               	decf	___fttol@exp1,f,c
  9152  0018C6                     l3704:
  9153  0018C6  5029               	movf	___fttol@exp1,w,c
  9154  0018C8  A4D8               	btfss	status,2,c
  9155  0018CA  D7F7               	goto	l3702
  9156  0018CC                     l3706:
  9157  0018CC  5024               	movf	___fttol@sign1,w,c
  9158  0018CE  B4D8               	btfsc	status,2,c
  9159  0018D0  D008               	goto	l3710
  9160  0018D2  1E28               	comf	___fttol@lval+3,f,c
  9161  0018D4  1E27               	comf	___fttol@lval+2,f,c
  9162  0018D6  1E26               	comf	___fttol@lval+1,f,c
  9163  0018D8  6C25               	negf	___fttol@lval,c
  9164  0018DA  0E00               	movlw	0
  9165  0018DC  2226               	addwfc	___fttol@lval+1,f,c
  9166  0018DE  2227               	addwfc	___fttol@lval+2,f,c
  9167  0018E0  2228               	addwfc	___fttol@lval+3,f,c
  9168  0018E2                     l3710:
  9169  0018E2  C025  F01B         	movff	___fttol@lval,?___fttol
  9170  0018E6  C026  F01C         	movff	___fttol@lval+1,?___fttol+1
  9171  0018EA  C027  F01D         	movff	___fttol@lval+2,?___fttol+2
  9172  0018EE  C028  F01E         	movff	___fttol@lval+3,?___fttol+3
  9173  0018F2  0012               	return	
  9174  0018F4                     __end_of___fttol:
  9175                           	opt stack 0
  9176                           tblptru	equ	0xFF8
  9177                           tblptrh	equ	0xFF7
  9178                           tblptrl	equ	0xFF6
  9179                           tablat	equ	0xFF5
  9180                           prodh	equ	0xFF4
  9181                           prodl	equ	0xFF3
  9182                           intcon2	equ	0xFF1
  9183                           indf0	equ	0xFEF
  9184                           postinc0	equ	0xFEE
  9185                           fsr0h	equ	0xFEA
  9186                           fsr0l	equ	0xFE9
  9187                           wreg	equ	0xFE8
  9188                           indf1	equ	0xFE7
  9189                           postinc1	equ	0xFE6
  9190                           postdec1	equ	0xFE5
  9191                           plusw1	equ	0xFE3
  9192                           fsr1h	equ	0xFE2
  9193                           fsr1l	equ	0xFE1
  9194                           indf2	equ	0xFDF
  9195                           postinc2	equ	0xFDE
  9196                           plusw2	equ	0xFDB
  9197                           fsr2h	equ	0xFDA
  9198                           fsr2l	equ	0xFD9
  9199                           status	equ	0xFD8
  9200                           
  9201 ;; *************** function ___ftdiv *****************
  9202 ;; Defined at:
  9203 ;;		line 54 in file "/opt/microchip/xc8/v1.36/sources/common/ftdiv.c"
  9204 ;; Parameters:    Size  Location     Type
  9205 ;;  f1              3   11[COMRAM] float 
  9206 ;;  f2              3   14[COMRAM] float 
  9207 ;; Auto vars:     Size  Location     Type
  9208 ;;  f3              3   21[COMRAM] float 
  9209 ;;  sign            1   25[COMRAM] unsigned char 
  9210 ;;  exp             1   24[COMRAM] unsigned char 
  9211 ;;  cntr            1   20[COMRAM] unsigned char 
  9212 ;; Return value:  Size  Location     Type
  9213 ;;                  3   11[COMRAM] float 
  9214 ;; Registers used:
  9215 ;;		wreg, status,2, status,0, cstack
  9216 ;; Tracked objects:
  9217 ;;		On entry : 0/0
  9218 ;;		On exit  : 0/0
  9219 ;;		Unchanged: 0/0
  9220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9221 ;;      Params:         6       0       0       0       0       0       0
  9222 ;;      Locals:         6       0       0       0       0       0       0
  9223 ;;      Temps:          3       0       0       0       0       0       0
  9224 ;;      Totals:        15       0       0       0       0       0       0
  9225 ;;Total ram usage:       15 bytes
  9226 ;; Hardware stack levels used:    1
  9227 ;; Hardware stack levels required when called:    1
  9228 ;; This function calls:
  9229 ;;		___ftpack
  9230 ;; This function is called by:
  9231 ;;		_main
  9232 ;; This function uses a non-reentrant model
  9233 ;;
  9234                           
  9235                           	psect	text41
  9236  00171A                     __ptext41:
  9237                           	opt stack 0
  9238  00171A                     ___ftdiv:
  9239                           	opt stack 29
  9240                           
  9241                           ;incstack = 0
  9242  00171A  C00E  F012         	movff	___ftdiv@f1+2,??___ftdiv
  9243  00171E  6A13               	clrf	(??___ftdiv+1)& (0+255),c
  9244  001720  6A14               	clrf	(??___ftdiv+2)& (0+255),c
  9245  001722  340D               	rlcf	___ftdiv@f1+1,w,c
  9246  001724  3612               	rlcf	??___ftdiv& (0+255),f,c
  9247  001726  E301               	bnc	u3431
  9248  001728  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
  9249  00172A                     u3431:
  9250  00172A  5012               	movf	??___ftdiv,w,c
  9251  00172C  6E19               	movwf	___ftdiv@exp,c
  9252  00172E  5019               	movf	___ftdiv@exp,w,c
  9253  001730  A4D8               	btfss	status,2,c
  9254  001732  D007               	goto	l3628
  9255  001734  0E00               	movlw	0
  9256  001736  6E0C               	movwf	?___ftdiv,c
  9257  001738  0E00               	movlw	0
  9258  00173A  6E0D               	movwf	?___ftdiv+1,c
  9259  00173C  0E00               	movlw	0
  9260  00173E  6E0E               	movwf	?___ftdiv+2,c
  9261  001740  0012               	return	
  9262  001742                     l3628:
  9263  001742  C011  F012         	movff	___ftdiv@f2+2,??___ftdiv
  9264  001746  6A13               	clrf	(??___ftdiv+1)& (0+255),c
  9265  001748  6A14               	clrf	(??___ftdiv+2)& (0+255),c
  9266  00174A  3410               	rlcf	___ftdiv@f2+1,w,c
  9267  00174C  3612               	rlcf	??___ftdiv& (0+255),f,c
  9268  00174E  E301               	bnc	u3451
  9269  001750  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
  9270  001752                     u3451:
  9271  001752  5012               	movf	??___ftdiv,w,c
  9272  001754  6E1A               	movwf	___ftdiv@sign,c
  9273  001756  501A               	movf	___ftdiv@sign,w,c
  9274  001758  A4D8               	btfss	status,2,c
  9275  00175A  D007               	goto	l3634
  9276  00175C  0E00               	movlw	0
  9277  00175E  6E0C               	movwf	?___ftdiv,c
  9278  001760  0E00               	movlw	0
  9279  001762  6E0D               	movwf	?___ftdiv+1,c
  9280  001764  0E00               	movlw	0
  9281  001766  6E0E               	movwf	?___ftdiv+2,c
  9282  001768  0012               	return	
  9283  00176A                     l3634:
  9284  00176A  0E00               	movlw	0
  9285  00176C  6E16               	movwf	___ftdiv@f3,c
  9286  00176E  0E00               	movlw	0
  9287  001770  6E17               	movwf	___ftdiv@f3+1,c
  9288  001772  0E00               	movlw	0
  9289  001774  6E18               	movwf	___ftdiv@f3+2,c
  9290  001776  501A               	movf	___ftdiv@sign,w,c
  9291  001778  0F89               	addlw	137
  9292  00177A  5E19               	subwf	___ftdiv@exp,f,c
  9293  00177C  C00E  F01A         	movff	___ftdiv@f1+2,___ftdiv@sign
  9294  001780  5011               	movf	___ftdiv@f2+2,w,c
  9295  001782  1A1A               	xorwf	___ftdiv@sign,f,c
  9296  001784  0E80               	movlw	128
  9297  001786  161A               	andwf	___ftdiv@sign,f,c
  9298  001788  8E0D               	bsf	___ftdiv@f1+1,7,c
  9299  00178A  0EFF               	movlw	255
  9300  00178C  160C               	andwf	___ftdiv@f1,f,c
  9301  00178E  0EFF               	movlw	255
  9302  001790  160D               	andwf	___ftdiv@f1+1,f,c
  9303  001792  0E00               	movlw	0
  9304  001794  160E               	andwf	___ftdiv@f1+2,f,c
  9305  001796  8E10               	bsf	___ftdiv@f2+1,7,c
  9306  001798  0EFF               	movlw	255
  9307  00179A  160F               	andwf	___ftdiv@f2,f,c
  9308  00179C  0EFF               	movlw	255
  9309  00179E  1610               	andwf	___ftdiv@f2+1,f,c
  9310  0017A0  0E00               	movlw	0
  9311  0017A2  1611               	andwf	___ftdiv@f2+2,f,c
  9312  0017A4  0E18               	movlw	24
  9313  0017A6  6E15               	movwf	___ftdiv@cntr,c
  9314  0017A8                     l3654:
  9315  0017A8  90D8               	bcf	status,0,c
  9316  0017AA  3616               	rlcf	___ftdiv@f3,f,c
  9317  0017AC  3617               	rlcf	___ftdiv@f3+1,f,c
  9318  0017AE  3618               	rlcf	___ftdiv@f3+2,f,c
  9319  0017B0  500F               	movf	___ftdiv@f2,w,c
  9320  0017B2  5C0C               	subwf	___ftdiv@f1,w,c
  9321  0017B4  5010               	movf	___ftdiv@f2+1,w,c
  9322  0017B6  580D               	subwfb	___ftdiv@f1+1,w,c
  9323  0017B8  5011               	movf	___ftdiv@f2+2,w,c
  9324  0017BA  580E               	subwfb	___ftdiv@f1+2,w,c
  9325  0017BC  A0D8               	btfss	status,0,c
  9326  0017BE  D007               	goto	l905
  9327  0017C0  500F               	movf	___ftdiv@f2,w,c
  9328  0017C2  5E0C               	subwf	___ftdiv@f1,f,c
  9329  0017C4  5010               	movf	___ftdiv@f2+1,w,c
  9330  0017C6  5A0D               	subwfb	___ftdiv@f1+1,f,c
  9331  0017C8  5011               	movf	___ftdiv@f2+2,w,c
  9332  0017CA  5A0E               	subwfb	___ftdiv@f1+2,f,c
  9333  0017CC  8016               	bsf	___ftdiv@f3,0,c
  9334  0017CE                     l905:
  9335  0017CE  90D8               	bcf	status,0,c
  9336  0017D0  360C               	rlcf	___ftdiv@f1,f,c
  9337  0017D2  360D               	rlcf	___ftdiv@f1+1,f,c
  9338  0017D4  360E               	rlcf	___ftdiv@f1+2,f,c
  9339  0017D6  2E15               	decfsz	___ftdiv@cntr,f,c
  9340  0017D8  D7E7               	goto	l3654
  9341  0017DA  C016  F001         	movff	___ftdiv@f3,___ftpack@arg
  9342  0017DE  C017  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9343  0017E2  C018  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9344  0017E6  C019  F004         	movff	___ftdiv@exp,___ftpack@exp
  9345  0017EA  C01A  F005         	movff	___ftdiv@sign,___ftpack@sign
  9346  0017EE  EC36  F00B         	call	___ftpack	;wreg free
  9347  0017F2  C001  F00C         	movff	?___ftpack,?___ftdiv
  9348  0017F6  C002  F00D         	movff	?___ftpack+1,?___ftdiv+1
  9349  0017FA  C003  F00E         	movff	?___ftpack+2,?___ftdiv+2
  9350  0017FE  0012               	return	
  9351  001800                     __end_of___ftdiv:
  9352                           	opt stack 0
  9353                           tblptru	equ	0xFF8
  9354                           tblptrh	equ	0xFF7
  9355                           tblptrl	equ	0xFF6
  9356                           tablat	equ	0xFF5
  9357                           prodh	equ	0xFF4
  9358                           prodl	equ	0xFF3
  9359                           intcon2	equ	0xFF1
  9360                           indf0	equ	0xFEF
  9361                           postinc0	equ	0xFEE
  9362                           fsr0h	equ	0xFEA
  9363                           fsr0l	equ	0xFE9
  9364                           wreg	equ	0xFE8
  9365                           indf1	equ	0xFE7
  9366                           postinc1	equ	0xFE6
  9367                           postdec1	equ	0xFE5
  9368                           plusw1	equ	0xFE3
  9369                           fsr1h	equ	0xFE2
  9370                           fsr1l	equ	0xFE1
  9371                           indf2	equ	0xFDF
  9372                           postinc2	equ	0xFDE
  9373                           plusw2	equ	0xFDB
  9374                           fsr2h	equ	0xFDA
  9375                           fsr2l	equ	0xFD9
  9376                           status	equ	0xFD8
  9377                           
  9378 ;; *************** function ___ftpack *****************
  9379 ;; Defined at:
  9380 ;;		line 62 in file "/opt/microchip/xc8/v1.36/sources/common/float.c"
  9381 ;; Parameters:    Size  Location     Type
  9382 ;;  arg             3    0[COMRAM] unsigned um
  9383 ;;  exp             1    3[COMRAM] unsigned char 
  9384 ;;  sign            1    4[COMRAM] unsigned char 
  9385 ;; Auto vars:     Size  Location     Type
  9386 ;;		None
  9387 ;; Return value:  Size  Location     Type
  9388 ;;                  3    0[COMRAM] float 
  9389 ;; Registers used:
  9390 ;;		wreg, status,2, status,0
  9391 ;; Tracked objects:
  9392 ;;		On entry : 0/0
  9393 ;;		On exit  : 0/0
  9394 ;;		Unchanged: 0/0
  9395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9396 ;;      Params:         5       0       0       0       0       0       0
  9397 ;;      Locals:         0       0       0       0       0       0       0
  9398 ;;      Temps:          3       0       0       0       0       0       0
  9399 ;;      Totals:         8       0       0       0       0       0       0
  9400 ;;Total ram usage:        8 bytes
  9401 ;; Hardware stack levels used:    1
  9402 ;; This function calls:
  9403 ;;		Nothing
  9404 ;; This function is called by:
  9405 ;;		___ftdiv
  9406 ;;		___lwtoft
  9407 ;; This function uses a non-reentrant model
  9408 ;;
  9409                           
  9410                           	psect	text42
  9411  00166C                     __ptext42:
  9412                           	opt stack 0
  9413  00166C                     ___ftpack:
  9414                           	opt stack 29
  9415                           
  9416                           ;incstack = 0
  9417  00166C  5004               	movf	___ftpack@exp,w,c
  9418  00166E  B4D8               	btfsc	status,2,c
  9419  001670  D005               	goto	l2944
  9420  001672  5001               	movf	___ftpack@arg,w,c
  9421  001674  1002               	iorwf	___ftpack@arg+1,w,c
  9422  001676  1003               	iorwf	___ftpack@arg+2,w,c
  9423  001678  A4D8               	btfss	status,2,c
  9424  00167A  D00C               	goto	l2950
  9425  00167C                     l2944:
  9426  00167C  0E00               	movlw	0
  9427  00167E  6E01               	movwf	?___ftpack,c
  9428  001680  0E00               	movlw	0
  9429  001682  6E02               	movwf	?___ftpack+1,c
  9430  001684  0E00               	movlw	0
  9431  001686  6E03               	movwf	?___ftpack+2,c
  9432  001688  0012               	return	
  9433  00168A                     l2948:
  9434  00168A  2A04               	incf	___ftpack@exp,f,c
  9435  00168C  90D8               	bcf	status,0,c
  9436  00168E  3203               	rrcf	___ftpack@arg+2,f,c
  9437  001690  3202               	rrcf	___ftpack@arg+1,f,c
  9438  001692  3201               	rrcf	___ftpack@arg,f,c
  9439  001694                     l2950:
  9440  001694  0E00               	movlw	0
  9441  001696  1401               	andwf	___ftpack@arg,w,c
  9442  001698  6E06               	movwf	??___ftpack& (0+255),c
  9443  00169A  0E00               	movlw	0
  9444  00169C  1402               	andwf	___ftpack@arg+1,w,c
  9445  00169E  6E07               	movwf	(??___ftpack+1)& (0+255),c
  9446  0016A0  0EFE               	movlw	254
  9447  0016A2  1403               	andwf	___ftpack@arg+2,w,c
  9448  0016A4  6E08               	movwf	(??___ftpack+2)& (0+255),c
  9449  0016A6  5006               	movf	??___ftpack,w,c
  9450  0016A8  1007               	iorwf	??___ftpack+1,w,c
  9451  0016AA  1008               	iorwf	??___ftpack+2,w,c
  9452  0016AC  B4D8               	btfsc	status,2,c
  9453  0016AE  D00C               	goto	l2956
  9454  0016B0  D7EC               	goto	l2948
  9455  0016B2                     l2952:
  9456  0016B2  2A04               	incf	___ftpack@exp,f,c
  9457  0016B4  0E01               	movlw	1
  9458  0016B6  2601               	addwf	___ftpack@arg,f,c
  9459  0016B8  0E00               	movlw	0
  9460  0016BA  2202               	addwfc	___ftpack@arg+1,f,c
  9461  0016BC  0E00               	movlw	0
  9462  0016BE  2203               	addwfc	___ftpack@arg+2,f,c
  9463  0016C0  90D8               	bcf	status,0,c
  9464  0016C2  3203               	rrcf	___ftpack@arg+2,f,c
  9465  0016C4  3202               	rrcf	___ftpack@arg+1,f,c
  9466  0016C6  3201               	rrcf	___ftpack@arg,f,c
  9467  0016C8                     l2956:
  9468  0016C8  0E00               	movlw	0
  9469  0016CA  1401               	andwf	___ftpack@arg,w,c
  9470  0016CC  6E06               	movwf	??___ftpack& (0+255),c
  9471  0016CE  0E00               	movlw	0
  9472  0016D0  1402               	andwf	___ftpack@arg+1,w,c
  9473  0016D2  6E07               	movwf	(??___ftpack+1)& (0+255),c
  9474  0016D4  0EFF               	movlw	255
  9475  0016D6  1403               	andwf	___ftpack@arg+2,w,c
  9476  0016D8  6E08               	movwf	(??___ftpack+2)& (0+255),c
  9477  0016DA  5006               	movf	??___ftpack,w,c
  9478  0016DC  1007               	iorwf	??___ftpack+1,w,c
  9479  0016DE  1008               	iorwf	??___ftpack+2,w,c
  9480  0016E0  B4D8               	btfsc	status,2,c
  9481  0016E2  D006               	goto	l2960
  9482  0016E4  D7E6               	goto	l2952
  9483  0016E6                     l2958:
  9484  0016E6  0604               	decf	___ftpack@exp,f,c
  9485  0016E8  90D8               	bcf	status,0,c
  9486  0016EA  3601               	rlcf	___ftpack@arg,f,c
  9487  0016EC  3602               	rlcf	___ftpack@arg+1,f,c
  9488  0016EE  3603               	rlcf	___ftpack@arg+2,f,c
  9489  0016F0                     l2960:
  9490  0016F0  BE02               	btfsc	___ftpack@arg+1,7,c
  9491  0016F2  D003               	goto	l847
  9492  0016F4  0E02               	movlw	2
  9493  0016F6  6004               	cpfslt	___ftpack@exp,c
  9494  0016F8  D7F6               	goto	l2958
  9495  0016FA                     l847:
  9496  0016FA  A004               	btfss	___ftpack@exp,0,c
  9497  0016FC  9E02               	bcf	___ftpack@arg+1,7,c
  9498  0016FE  90D8               	bcf	status,0,c
  9499  001700  3204               	rrcf	___ftpack@exp,f,c
  9500  001702  5004               	movf	___ftpack@exp,w,c
  9501  001704  1203               	iorwf	___ftpack@arg+2,f,c
  9502  001706  5005               	movf	___ftpack@sign,w,c
  9503  001708  A4D8               	btfss	status,2,c
  9504  00170A  8E03               	bsf	___ftpack@arg+2,7,c
  9505  00170C  C001  F001         	movff	___ftpack@arg,?___ftpack
  9506  001710  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  9507  001714  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  9508  001718  0012               	return	
  9509  00171A                     __end_of___ftpack:
  9510                           	opt stack 0
  9511                           tblptru	equ	0xFF8
  9512                           tblptrh	equ	0xFF7
  9513                           tblptrl	equ	0xFF6
  9514                           tablat	equ	0xFF5
  9515                           prodh	equ	0xFF4
  9516                           prodl	equ	0xFF3
  9517                           intcon2	equ	0xFF1
  9518                           indf0	equ	0xFEF
  9519                           postinc0	equ	0xFEE
  9520                           fsr0h	equ	0xFEA
  9521                           fsr0l	equ	0xFE9
  9522                           wreg	equ	0xFE8
  9523                           indf1	equ	0xFE7
  9524                           postinc1	equ	0xFE6
  9525                           postdec1	equ	0xFE5
  9526                           plusw1	equ	0xFE3
  9527                           fsr1h	equ	0xFE2
  9528                           fsr1l	equ	0xFE1
  9529                           indf2	equ	0xFDF
  9530                           postinc2	equ	0xFDE
  9531                           plusw2	equ	0xFDB
  9532                           fsr2h	equ	0xFDA
  9533                           fsr2l	equ	0xFD9
  9534                           status	equ	0xFD8
  9535                           tblptru	equ	0xFF8
  9536                           tblptrh	equ	0xFF7
  9537                           tblptrl	equ	0xFF6
  9538                           tablat	equ	0xFF5
  9539                           prodh	equ	0xFF4
  9540                           prodl	equ	0xFF3
  9541                           intcon2	equ	0xFF1
  9542                           indf0	equ	0xFEF
  9543                           postinc0	equ	0xFEE
  9544                           fsr0h	equ	0xFEA
  9545                           fsr0l	equ	0xFE9
  9546                           wreg	equ	0xFE8
  9547                           indf1	equ	0xFE7
  9548                           postinc1	equ	0xFE6
  9549                           postdec1	equ	0xFE5
  9550                           plusw1	equ	0xFE3
  9551                           fsr1h	equ	0xFE2
  9552                           fsr1l	equ	0xFE1
  9553                           indf2	equ	0xFDF
  9554                           postinc2	equ	0xFDE
  9555                           plusw2	equ	0xFDB
  9556                           fsr2h	equ	0xFDA
  9557                           fsr2l	equ	0xFD9
  9558                           status	equ	0xFD8
  9559                           
  9560                           	psect	rparam
  9561  0000                     tblptru	equ	0xFF8
  9562                           tblptrh	equ	0xFF7
  9563                           tblptrl	equ	0xFF6
  9564                           tablat	equ	0xFF5
  9565                           prodh	equ	0xFF4
  9566                           prodl	equ	0xFF3
  9567                           intcon2	equ	0xFF1
  9568                           indf0	equ	0xFEF
  9569                           postinc0	equ	0xFEE
  9570                           fsr0h	equ	0xFEA
  9571                           fsr0l	equ	0xFE9
  9572                           wreg	equ	0xFE8
  9573                           indf1	equ	0xFE7
  9574                           postinc1	equ	0xFE6
  9575                           postdec1	equ	0xFE5
  9576                           plusw1	equ	0xFE3
  9577                           fsr1h	equ	0xFE2
  9578                           fsr1l	equ	0xFE1
  9579                           indf2	equ	0xFDF
  9580                           postinc2	equ	0xFDE
  9581                           plusw2	equ	0xFDB
  9582                           fsr2h	equ	0xFDA
  9583                           fsr2l	equ	0xFD9
  9584                           status	equ	0xFD8


Data Sizes:
    Strings     258
    Constant    0
    Data        152
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     58      95
    BANK0           160      0     120
    BANK1           256    185     198
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    puts@s	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_35(CODE[3]), download@display(COMRAM[17]), STR_19(CODE[3]), STR_18(CODE[6]), 
		 -> STR_17(CODE[3]), STR_16(CODE[6]), main@clear(BANK1[9]), main@store(BANK1[17]), 
		 -> time(COMRAM[9]), 

    clcd_print@data	PTR const unsigned char  size(2) Largest target is 102
		 -> STR_40(CODE[3]), STR_39(CODE[3]), STR_38(CODE[3]), STR_37(CODE[17]), 
		 -> STR_36(CODE[17]), view@display1(COMRAM[17]), view@display(COMRAM[17]), STR_34(CODE[16]), 
		 -> STR_33(CODE[16]), STR_32(CODE[19]), STR_31(CODE[5]), STR_30(CODE[10]), 
		 -> STR_29(CODE[2]), STR_28(CODE[2]), STR_27(CODE[2]), STR_26(CODE[2]), 
		 -> STR_25(CODE[17]), STR_24(CODE[17]), set(BANK1[9]), STR_23(CODE[17]), 
		 -> STR_22(CODE[17]), STR_21(CODE[17]), STR_20(CODE[17]), STR_15(CODE[17]), 
		 -> main@store(BANK1[17]), main@str(BANK1[102]), STR_14(CODE[17]), STR_13(CODE[17]), 
		 -> STR_12(CODE[17]), STR_11(CODE[2]), STR_10(CODE[2]), STR_9(CODE[2]), 
		 -> STR_8(CODE[2]), STR_7(CODE[19]), STR_6(CODE[16]), STR_5(CODE[2]), 
		 -> STR_4(CODE[2]), STR_3(CODE[2]), STR_2(CODE[2]), STR_1(CODE[18]), 


Critical Paths under _main in COMRAM

    _main->_view
    _writeEEP->_i2c_write
    _view->_clcd_print
    _settime->_clcd_print
    _pass->_clcd_print
    _clcd_putch->_clcd_write
    _init_config->_init_ds1307
    _init_ds1307->_read_ds1307
    _init_ds1307->_write_ds1307
    _write_ds1307->_i2c_write
    _init_clcd->_clcd_write
    _get_time->_read_ds1307
    _read_ds1307->_i2c_write
    _download->_puts
    _download->_readEEP
    _readEEP->_i2c_write
    _puts->_putch
    _changepass->_clcd_print
    _clcd_print->___wmul
    ___lwtoft->___ftpack
    ___lwdiv->___lwmod
    ___fttol->___ftdiv
    ___ftdiv->___lwtoft

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               187   187      0   63910
                                             56 COMRAM     2     2      0
                                              0 BANK1    185   185      0
                            ___ftdiv
                            ___fttol
                            ___lwdiv
                            ___lwmod
                           ___lwtoft
                             ___wmul
                         _changepass
                         _clcd_print
                         _clcd_putch
                           _download
                           _get_time
                        _init_config
                               _pass
                               _puts
                           _read_adc
                      _read_switches
                            _settime
                               _view
                           _writeEEP
                       _write_ds1307
 ---------------------------------------------------------------------------------
 (1) _writeEEP                                             4     3      1     176
                                              1 COMRAM     4     3      1
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (1) _view                                                47    47      0    9184
                                              9 COMRAM    47    47      0
                         _clcd_print
                            _readEEP
                      _read_switches
 ---------------------------------------------------------------------------------
 (1) _settime                                             16    16      0   10216
                                              9 COMRAM    16    16      0
                            ___awdiv
                            ___awmod
                         _clcd_print
                      _read_switches
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     680
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     684
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _read_adc                                             7     5      2      45
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _pass                                                40    40      0   10587
                                              9 COMRAM    40    40      0
                         _clcd_print
                         _clcd_putch
                      _read_switches
 ---------------------------------------------------------------------------------
 (2) _clcd_putch                                           2     1      1    1624
                                              2 COMRAM     2     1      1
                         _clcd_write
 ---------------------------------------------------------------------------------
 (1) _init_config                                          0     0      0    1270
                           _init_adc
                          _init_clcd
                        _init_ds1307
                           _init_i2c
                 _init_matrix_keypad
                          _init_uart
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_matrix_keypad                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_i2c                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_ds1307                                          1     1      0     650
                                              3 COMRAM     1     1      0
                        _read_ds1307
                       _write_ds1307
 ---------------------------------------------------------------------------------
 (1) _write_ds1307                                         2     1      1     514
                                              1 COMRAM     2     1      1
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (2) _init_clcd                                            0     0      0     620
                         _clcd_write
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_time                                             0     0      0      67
                        _read_ds1307
 ---------------------------------------------------------------------------------
 (3) _read_ds1307                                          2     2      0      67
                                              1 COMRAM     2     2      0
                           _i2c_read
                      _i2c_rep_start
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (1) _download                                            20    20      0     960
                                              3 COMRAM    20    20      0
                               _puts
                            _readEEP
 ---------------------------------------------------------------------------------
 (2) _readEEP                                              2     2      0      67
                                              1 COMRAM     2     2      0
                           _i2c_read
                      _i2c_rep_start
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (2) _i2c_write                                            1     1      0      22
                                              0 COMRAM     1     1      0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (2) _i2c_stop                                             0     0      0       0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (2) _i2c_start                                            0     0      0       0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (3) _i2c_rep_start                                        0     0      0       0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (3) _i2c_read                                             0     0      0       0
                         _i2c_no_ack
                        _i2c_rx_mode
 ---------------------------------------------------------------------------------
 (4) _i2c_rx_mode                                          0     0      0       0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (3) _i2c_idle                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c_no_ack                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _puts                                                 2     0      2     707
                                              1 COMRAM     2     0      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _changepass                                          45    45      0    9907
                                              9 COMRAM    45    45      0
                         _clcd_print
                         _clcd_write
                      _read_switches
 ---------------------------------------------------------------------------------
 (2) _read_switches                                        1     1      0      44
                                              0 COMRAM     1     1      0
                           _scan_key
 ---------------------------------------------------------------------------------
 (3) _scan_key                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clcd_print                                           3     0      3    8239
                                              6 COMRAM     3     0      3
                             ___wmul (ARG)
                         _clcd_write
 ---------------------------------------------------------------------------------
 (3) _clcd_write                                           2     1      1     620
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4    1951
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2078
                                              8 COMRAM     3     0      3
                           ___ftpack
                           _read_adc (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4     415
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4     418
                                              5 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             15    11      4     316
                                             26 COMRAM    15    11      4
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
                           _read_adc (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2502
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
                           _read_adc (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1992
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___ftdiv
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
       _read_adc (ARG)
     _read_adc (ARG)
   ___fttol
     ___ftdiv (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         _read_adc (ARG)
       _read_adc (ARG)
     ___lwtoft (ARG)
       ___ftpack
       _read_adc (ARG)
     _read_adc (ARG)
   ___lwdiv
     ___lwmod (ARG)
   ___lwmod
   ___lwtoft
     ___ftpack
     _read_adc (ARG)
   ___wmul
   _changepass
     _clcd_print
       ___wmul (ARG)
       _clcd_write (ARG)
     _clcd_write
     _read_switches
       _scan_key
   _clcd_print
     ___wmul (ARG)
     _clcd_write (ARG)
   _clcd_putch
     _clcd_write
   _download
     _puts
       _putch
     _readEEP
       _i2c_read
         _i2c_no_ack
         _i2c_rx_mode
           _i2c_idle
       _i2c_rep_start
         _i2c_idle
       _i2c_start
         _i2c_idle
       _i2c_stop
         _i2c_idle
       _i2c_write
         _i2c_idle
   _get_time
     _read_ds1307
       _i2c_read
         _i2c_no_ack
         _i2c_rx_mode
           _i2c_idle
       _i2c_rep_start
         _i2c_idle
       _i2c_start
         _i2c_idle
       _i2c_stop
         _i2c_idle
       _i2c_write
         _i2c_idle
   _init_config
     _init_adc
     _init_clcd
       _clcd_write
     _init_ds1307
       _read_ds1307
         _i2c_read
           _i2c_no_ack
           _i2c_rx_mode
             _i2c_idle
         _i2c_rep_start
           _i2c_idle
         _i2c_start
           _i2c_idle
         _i2c_stop
           _i2c_idle
         _i2c_write
           _i2c_idle
       _write_ds1307
         _i2c_start
           _i2c_idle
         _i2c_stop
           _i2c_idle
         _i2c_write
           _i2c_idle
     _init_i2c
     _init_matrix_keypad
     _init_uart
   _pass
     _clcd_print
       ___wmul (ARG)
       _clcd_write (ARG)
     _clcd_putch
       _clcd_write
     _read_switches
       _scan_key
   _puts
     _putch
   _read_adc
   _read_switches
     _scan_key
   _settime
     ___awdiv
     ___awmod
     _clcd_print
       ___wmul (ARG)
       _clcd_write (ARG)
     _read_switches
       _scan_key
   _view
     _clcd_print
       ___wmul (ARG)
       _clcd_write (ARG)
     _readEEP
       _i2c_read
         _i2c_no_ack
         _i2c_rx_mode
           _i2c_idle
       _i2c_rep_start
         _i2c_idle
       _i2c_start
         _i2c_idle
       _i2c_stop
         _i2c_idle
       _i2c_write
         _i2c_idle
     _read_switches
       _scan_key
   _writeEEP
     _i2c_start
       _i2c_idle
     _i2c_stop
       _i2c_idle
     _i2c_write
       _i2c_idle
   _write_ds1307
     _i2c_start
       _i2c_idle
     _i2c_stop
       _i2c_idle
     _i2c_write
       _i2c_idle

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     B9      C6       7       77.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      78       5       75.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     3A      5F       1      100.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     19D       3        0.0%
DATA                 0      0     19D      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Mon Mar  6 23:00:00 2023

             clcd_print@addr 0009               clcd_print@data 0007                           l24 2200  
                         _GO 007E11                 ___awdiv@sign 0006          ___wmul@multiplicand 0003  
         _init_matrix_keypad 0F1E                 settime@delay 000C                 settime@blink 0016  
                        l321 1516                          l145 0EEE                          l331 1554  
                        l324 152C                          l316 1506                          l260 2802  
                        l333 155C                          l325 1544                          l326 1534  
                        l318 151E                          l254 279A                          l335 1564  
                        l319 150E                          l328 153C                          l278 2A88  
                        l555 0EC4                          l619 111E                          l905 17CE  
                        l847 16FA                          _CKE 007E3E                          _RB0 007C08  
                        _RC0 007C10                          _RC1 007C11                          _RC2 007C12  
                        _RD7 007C1F                          _PEN 007E2A                          _SEN 007E28  
                        _RX9 007D5E                          _SMP 007E3F                          _TX9 007D66  
                        _WUE 007DC1                          _key 0055                          _set 01BD  
             clcd_putch@addr 0003               clcd_putch@data 0004                 ___awmod@sign 0006  
                        wreg 000FE8          ?_init_matrix_keypad 0001                 ___ftdiv@cntr 0015  
               ___ftdiv@sign 001A                         l1025 1290                         l1035 11F6  
                       l3000 162E                         l3012 1654                         l3200 23C0  
                       l3104 21D6                         l3016 1662                         l3008 164A  
                       l3040 144C                         l3032 1432                         l4000 2B7A  
                       l3122 2252                         l3124 2264                         l3052 1478  
                       l3044 1460                         l3036 1440                         l3028 1426  
                       l4004 2BA8                         l3206 23E2                         l3118 223C  
                       l3038 1448                         l4014 2BEA                         l4030 2CAC  
                       l3160 2300                         l3152 22DC                         l3072 213C  
                       l3064 20F2                         l3320 1F26                         l3312 1EF8  
                       l3048 146A                         l4024 2C3E                         l4008 2BBE  
                       l3138 22A0                         l3218 13CE                         l3306 1EE0  
                       l3410 193A                         l3402 1924                         l4042 2D30  
                       l4018 2C1C                         l3164 2310                         l3156 22F0  
                       l3092 21A0                         l3076 2152                         l3324 1F34  
                       l3316 1F20                         l3308 1EE8                         l2702 1026  
                       l3078 2164                         l3502 1304                         l3342 1FBE  
                       l3334 1F7E                         l3350 1FF0                         l3422 1964  
                       l3414 1948                         l3406 1934                         l4070 2DF4  
                       l3184 2378                         l3192 23A0                         l3360 2028  
                       l3344 1FCE                         l3280 1E64                         l3352 1FFE  
                       l3600 1D48                         l3440 19CA                         l3432 1996  
                       l2714 1034                         l3514 1330                         l3506 1314  
                       l3282 1E76                         l3266 1E0E                         l3530 1B50  
                       l3418 1958                         l3196 23B0                         l3188 239A  
                       l3364 203A                         l3348 1FE6                         l3372 205E  
                       l3276 1E4E                         l3612 1D80                         l3524 1B1E  
                       l3436 19BA                         l4084 2E76                         l4076 2E34  
                       l4068 2DE2                         l3710 18E2                         l3702 18BA  
                       l3374 2066                         l3294 1EAA                         l3542 1BAA  
                       l3534 1B66                         l3470 1A4E                         l3454 1A04  
                       l3462 1A30                         l4094 2EF8                         l3704 18C6  
                       l3720 125E                         l2816 156C                         l3368 204C  
                       l3560 1C2A                         l3536 1B76                         l3392 1100  
                       l3634 176A                         l3706 18CC                         l3722 1266  
                       l2850 1356                         l2834 1164                         l3554 1C04  
                       l3546 1BC0                         l3482 1A86                         l3458 1A0C  
                       l3802 24CE                         l3628 1742                         l3732 1286  
                       l3724 126A                         l3740 11CC                         l2844 117C  
                       l3572 1C60                         l3548 1BD0                         l3476 1A70  
                       l3388 10F0                         l2950 1694                         l3654 17A8  
                       l3742 11D4                         l2854 1382                         l2838 1170  
                       l3558 1C1A                         l3478 1A78                         l3398 1914  
                       l3902 27E6                         l3822 25CE                         l2960 16F0  
                       l2952 16B2                         l2944 167C                         l3744 11D8  
                       l3584 1CB8                         l3576 1C98                         l3488 1AA8  
                       l3920 284A                         l3912 2822                         l3840 2634  
                       l3824 25E4                         l3674 182C                         l2890 12C4  
                       l3498 12F4                         l3922 2854                         l3834 261E  
                       l3842 2638                         l2956 16C8                         l2948 168A  
                       l3692 1892                         l3748 11EC                         l3596 1D10  
                       l3588 1CF0                         l3908 280C                         l3852 266E  
                       l2958 16E6                         l2886 129C                         l2990 160C  
                       l3934 28AE                         l3942 28CC                         l3862 2698  
                       l3838 2630                         l3926 2870                         l3696 18A2  
                       l2984 15FC                         l3856 2682                         l3864 26A4  
                       l3954 2934                         l3946 28F2                         l3938 28C4  
                       l3882 2712                         l3874 26F4                         l2996 1622  
                       l3964 29A2                         l3892 27A4                         l3868 26D0  
                       l2998 162A                         l3878 270A                         l3984 2A58  
                       l3896 27BA                         _ADFM 007E07                         l3994 2B0C  
                       l3978 2A3A                         l3988 2AEA                         _ADON 007E10  
                       STR_1 2F23                         STR_2 2F0E                         STR_3 2FFD  
                       STR_4 2FFB                         STR_5 2FFB                         STR_6 2F00  
                       STR_7 2F10                         STR_8 2F0E                         STR_9 2FFD  
                       _BRGH 007D62                         _CREN 007D5C                         _FERR 007D5A  
                       _CSRC 007D67                         u2300 13A2                         u2080 1024  
                       u2320 12BC                         u2330 12E4                         u2307 1398  
                       u2327 12B2                         u2337 12DA                         u2290 137A  
                       u3500 184A                         u3431 172A                         u2551 208E  
                       u3505 1842                         u2297 1370                         u2561 20A0  
                       u2801 1DE6                         u3451 1752                         u3621 245C  
                       u3481 1810                         u2771 2402                         u2950 1FE4  
                       _RCIE 007CED                         u3940 29BC                         _RCIF 007CF5  
                       _RCEN 007E2B                         _OERR 007D59                         _SCKP 007DC4  
                       _RBPU 007F8F                         _RX9D 007D58                         _SPEN 007D5F  
                       _RSEN 007E29                         _TX9D 007D60                         _SREN 007D5D  
                       _TRMT 007D61                         _TXIE 007CEC                         _TXIF 007CF4  
                       _TXEN 007D65                         _SYNC 007D64                         _main 2404  
               ___ftpack@arg 0001                         _pass 1D8C                 ___ftpack@exp 0004  
                       _str1 003B                         _time 0057                         _view 18F4  
                       fsr0h 000FEA                         indf0 000FEF                         fsr0l 000FE9  
                       indf1 000FE7                         fsr1l 000FE1                         indf2 000FDF  
                       fsr2l 000FD9                         _puts 129A                  main@option1 016C  
                       prodh 000FF4                         prodl 000FF3                         start 0000  
       ??_init_matrix_keypad 0001                 ___param_bank 000010               clcd_write@byte 0002  
              _i2c_rep_start 0ED4                ??_i2c_rx_mode 0001                 ___fttol@exp1 0029  
               ___fttol@lval 0025                 ?_init_ds1307 0001                        _ABDEN 007DC0  
                      _ADCS0 007E00                        _ADCS1 007E01                        _ADCS2 007E02  
                      _ADDEN 007D5B                        ?_main 0001                 ?_read_ds1307 0001  
                      _ACKEN 007E2C                        _ACKDT 007E2D                        _BCLIF 007D0B  
                      _ACQT0 007E03                        _ACQT1 007E04                        _ACQT2 007E05  
            __end_of___awdiv 166C                        ?_pass 0001                        STR_10 2FFB  
                      STR_11 2FFB                        STR_12 2F9B                        STR_20 2F68  
                      STR_13 2EFF                        STR_21 2F57                        STR_30 2FDD  
                      STR_14 2FAC                        STR_22 2F79                        STR_23 2EFF  
                      STR_31 2FF3                        STR_15 2F8A                        STR_40 2F0D  
                      STR_16 2FE7                        STR_24 2F46                        STR_32 2EFD  
                      _BRG16 007DC3                        STR_25 2EFF                        STR_17 2FF8  
                      STR_33 2FCD                        STR_26 2F0E                        STR_18 2FED  
                      STR_34 2FBD                        STR_35 2FF8                        STR_19 2FF8  
                      STR_27 2FFD                        STR_36 2EFF                        STR_28 2FFB  
            __end_of___awmod 1482                        STR_29 2FFB                        STR_37 2F35  
                      STR_38 2F0D                        STR_39 2F0D              __end_of___ftdiv 1800  
                      ?_view 0001                        ?_puts 0002              ___awdiv@divisor 0003  
            __end_of___fttol 18F4              __end_of___lwdiv 129A              __end_of___lwmod 1200  
               ?_init_config 0001                        _RCIDL 007DC6              ___awdiv@counter 0005  
                      _VCFG0 007E0C                        _VCFG1 007E0D                        _RCREG 000FAE  
                      _SENDB 007D63                        _SPBRG 000FAF                        _PORTB 000F81  
                      _PORTD 000F83                        _TRISB 000F93                        _TRISC 000F94  
                      _TRISD 000F95                        _SSPIF 007CF3                        _TXREG 000FAD  
                      _flag1 0053              __end_of_readEEP 106C                ___ftpack@sign 0005  
                      _putch 0EEC                        main@a 019E                        main@c 01A5  
                      main@i 017B                        main@j 016A                        main@k 01B6  
                      pass@i 000C                        pass@j 0029                        pass@k 0030  
                      pass@m 001B                        pass@t 001D                        pass@y 000E  
                      tablat 000FF5              __end_of_settime 1D8C                        view@i 002C  
                      plusw1 000FE3                        plusw2 000FDB                  readEEP@data 0003  
                      puts@s 0002                        status 000FD8             init_ds1307@dummy 0004  
                 _i2c_no_ack 0EBE        __size_of_write_ds1307 001E              __initialization 1482  
             ?_i2c_rep_start 0001                 __end_of_main 2EFC                 __end_of_pass 2078  
               __end_of_view 1ABE                 __end_of_puts 12EC             __end_of_i2c_idle 0ECC  
           __end_of_i2c_read 0F04             __end_of_i2c_stop 0EEC                       ??_main 0039  
              ___fttol@sign1 0024                       ??_pass 000A                       ??_view 000A  
                     ??_puts 0004                __activetblptr 000002          __end_of_i2c_rx_mode 0ED4  
                     _ADCON0 000FC2                       _ADCON1 000FC1                       _ABDOVF 007DC7  
           read_switches@key 0056                       _ADRESH 000FC4                       _ADRESL 000FC3  
           ___awdiv@dividend 0001                       ?_putch 0001             __end_of___ftpack 171A  
                     _GODONE 007E11             __end_of___lwtoft 0FF4                 _write_ds1307 0F72  
                     _SSPADD 000FC8                       _TRISB0 007C98                       _TRISC3 007CA3  
                     _TRISC4 007CA4                       _TRISC6 007CA6                       _TRISC7 007CA7  
                     _TRISD7 007CAF                       _SSPBUF 000FC9           __size_of_i2c_start 0008  
         __size_of_i2c_write 000C             __end_of_get_time 1412                       ___wmul 0FF4  
                  ??___awdiv 0005                    ??___awmod 0005                    ??___ftdiv 0012  
                  ??___fttol 001F                    ??___lwdiv 000A                    ??___lwmod 0005  
           __end_of_download 134A             __end_of_init_i2c 0F5A             __end_of_init_adc 0FB0  
           __end_of_read_adc 1142                       clear_0 1488             ___awdiv@quotient 0007  
            ___awmod@divisor 0003             __end_of_scan_key 1570              ___awmod@counter 0005  
                     main@c1 01A9                       main@cl 017D                       main@sc 01B7  
                  ??_readEEP 0002                 __pdataCOMRAM 003B                 __mediumconst 2EFC  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                  ??_settime 000A             __end_of_writeEEP 1106                   __accesstop 0060  
    __end_of__initialization 14EE                ___rparam_used 000001                   ___ftdiv@f1 000C  
                 ___ftdiv@f2 000F                   ___ftdiv@f3 0016              ??_i2c_rep_start 0001  
                ?_i2c_no_ack 0001              writeEEP@address 0003                   ___fttol@f1 001B  
             __pcstackCOMRAM 0001                 __pidataBANK0 1570                 __pidataBANK1 0F11  
                _i2c_rx_mode 0ECC       __size_of_read_switches 003E                __end_of_putch 0EF8  
                 ___lwtoft@c 0009         __size_of_init_ds1307 0048            __end_of_i2c_start 0EE4  
          __end_of_i2c_write 0F10         __size_of_read_ds1307 002A         __size_of_init_config 0020  
                    ??_putch 0001                    ?_i2c_idle 0001                    ?_i2c_read 0001  
                 _changepass 2078                    ?_i2c_stop 0001           __size_of_init_clcd 0036  
         __size_of_init_uart 003E                   _clcd_print 134A                   _clcd_putch 0F5A  
                 _clcd_write 101A              read_ds1307@data 0003                      ?___wmul 0001  
          read_switches@once 004D                      _ACKSTAT 007E2E                changepass@key 0030  
                  ?___ftpack 0001                    ?___lwtoft 0009                 download@less 0015  
        __size_of_i2c_no_ack 0006                      _SSPCON1 000FC6                    ?_get_time 0001  
              _read_switches 1142                   ??_i2c_idle 0001                   ??_i2c_read 0001  
                 ??_i2c_stop 0001                    ?_download 0001                    ?_init_i2c 0001  
            changepass@flag1 0024                    ?_init_adc 0001              changepass@delay 001E  
            changepass@blink 0035                    ?_read_adc 0001              changepass@pass1 0015  
            changepass@pass2 000C              changepass@input 002A                    ?_scan_key 0001  
                    __Hparam 0000                      __Lparam 0000  __size_of_init_matrix_keypad 0012  
                    ___awdiv 15E8                      ___awmod 1412                      ___ftdiv 171A  
            __size_of___wmul 0026                 writeEEP@data 0002                      ___fttol 1800  
                    ___lwdiv 1248                      ___lwmod 11BE                      __pcinit 1482  
                 ??___ftpack 0006                      __ramtop 0600                    ?_writeEEP 0002  
                    __ptext0 2404                      __ptext1 10CC                      __ptext2 18F4  
                    __ptext3 1ABE                      __ptext4 1412                      __ptext5 15E8  
                    __ptext6 1106                      __ptext7 1D8C                      __ptext8 0F5A  
                    __ptext9 0FB0                   ??___lwtoft 000C                      _readEEP 1042  
          __end_of_init_clcd 10CC            __end_of_init_uart 11BE             ___awmod@dividend 0001  
                    _settime 1ABE               ?_read_switches 0001                      main@add 01A0  
                    main@key 01B2                      main@str 0100                   ??_get_time 0004  
       end_of_initialization 14EE                  ?_changepass 0001                   ??_download 0004  
                 ??_init_i2c 0001                   ??_init_adc 0001                __Lmediumconst 2EFC  
                 ??_read_adc 0003                      pass@key 0028                      pass@try 002D  
                 ??_scan_key 0001                  ?_clcd_print 0007                  ?_clcd_putch 0003  
                ?_clcd_write 0001                      view@key 002E                      postdec1 000FE5  
                    postinc0 000FEE                      postinc1 000FE6                      postinc2 000FDE  
                 main@F16002 01B9                   main@F16006 0060                   ??_writeEEP 0003  
                  _PORTBbits 000F81              read_adc@channel 0007                  view@display 000A  
              i2c_write@data 0001              read_adc@reg_val 0005                  settime@flag 0018  
                ___ftdiv@exp 0019                   main@option 01A3                 ??_i2c_no_ack 0001  
               ?_i2c_rx_mode 0001               __end_of___wmul 101A                __pidataCOMRAM 0F31  
        __size_of_changepass 038C          start_initialization 1482              ??_read_switches 0001  
        __size_of_clcd_print 0060          __size_of_clcd_putch 0018          __size_of_clcd_write 0028  
                  _i2c_start 0EDC                    _i2c_write 0F04           __end_of_i2c_no_ack 0EC4  
                 pass@F15952 00CF            __size_of_i2c_idle 0008            __size_of_i2c_read 000C  
          __size_of_i2c_stop 0008        __end_of_i2c_rep_start 0EDC                     ??___wmul 0005  
              ??_init_ds1307 0004                  __pdataBANK0 0060                  __pdataBANK1 01B9  
              ??_read_ds1307 0002  read_switches@detection_type 0001                ??_init_config 0005  
          __size_of___ftpack 00AE                  __pbssCOMRAM 004E            __size_of___lwtoft 0024  
              __pcstackBANK1 0100                   ?_i2c_start 0001                   ?_i2c_write 0001  
          __size_of_get_time 0068            __size_of_download 005E            __size_of_init_i2c 0016  
          __size_of_init_adc 0020            __size_of_read_adc 003C             ___lwdiv@dividend 0006  
          __size_of_scan_key 0078                __pmediumconst 2EFC                 changepass@j1 0028  
               changepass@k1 0033                     ?___awdiv 0001                     ?___awmod 0001  
                   ?___ftdiv 000C           read_ds1307@address 0002                     ?___fttol 001B  
                   ?___lwdiv 0006                    _clock_reg 004E                     ?___lwmod 0001  
                   ?_readEEP 0001               changepass@i_70 002E               changepass@i_68 0020  
             changepass@flag 0022            __size_of_writeEEP 003A          __end_of_init_ds1307 1248  
                   ?_settime 0001          __end_of_read_ds1307 1096             ___lwdiv@quotient 000A  
                  _init_clcd 1096          __end_of_init_config 0FD0                    _init_uart 1180  
             __size_of_putch 000C                ?_write_ds1307 0002                 ??_changepass 000A  
             ___wmul@product 0005                 ??_clcd_print 000A                 ??_clcd_putch 0004  
 __end_of_init_matrix_keypad 0F30                 ??_clcd_write 0002             changepass@F15943 0044  
           changepass@F15945 00C6                   view@count1 0030         __size_of_i2c_rx_mode 0008  
      clcd_write@control_bit 0001                    main@i_231 019A                    main@i_233 01AD  
                  main@i_234 01A1                    main@i_235 019C                    main@i_243 0192  
                  main@i_244 01AF                    main@i_247 0196            ___wmul@multiplier 0001  
                 settime@key 000E           __end_of_changepass 2404                    main@flag2 016E  
                  main@flag3 0170                    main@clear 0172                    main@value 01B1  
                  main@speed 0166                    main@store 017F                  ??_i2c_start 0001  
         __end_of_clcd_print 13AA                  ??_i2c_write 0001           __end_of_clcd_putch 0F72  
         __end_of_clcd_write 1042                   ?_init_clcd 0001                   ?_init_uart 0001  
                  copy_data0 14A2                    copy_data1 14C2                    copy_data2 14E2  
             ??_write_ds1307 0003             changepass@input2 002B                     _i2c_idle 0EC4  
                   _i2c_read 0EF8                     _i2c_stop 0EE4                    download@i 0016  
                   __Hrparam 0000                     __Lrparam 0000                    pass@i_371 0022  
                  pass@i_373 0019                    pass@i_366 002E                    pass@delay 001F  
                  pass@blink 0026             __size_of___awdiv 0084             __size_of___awmod 0070  
                _init_ds1307 1200             __size_of___ftdiv 00E6             __size_of___fttol 00F4  
                  pass@input 0021             __size_of___lwdiv 0052             __size_of___lwmod 0042  
                   ___ftpack 166C                  _read_ds1307 106C                     ___lwtoft 0FD0  
                _init_config 0FB0             __size_of_readEEP 002A          write_ds1307@address 0003  
            ___lwdiv@divisor 0008              ___lwdiv@counter 000C                  changepass@i 002C  
                changepass@j 0026                  changepass@k 0031                     __ptext10 1180  
                   __ptext11 0F1E                     __ptext20 1042                     __ptext12 0F44  
                   __ptext21 0F04                     __ptext13 1200                     __ptext30 0EEC  
                   __ptext22 0EE4                     __ptext14 0F72                     __ptext31 2078  
                   __ptext23 0EDC                     __ptext15 1096                     __ptext40 1800  
                   __ptext32 1142                     __ptext24 0ED4                     __ptext16 0F90  
                   __ptext41 171A                     __ptext33 14F8                     __ptext25 0EF8  
                   __ptext17 13AA                     __ptext42 166C                     __ptext34 134A  
                   __ptext26 0ECC                     __ptext18 106C                     __ptext35 101A  
                   __ptext27 0EC4                     __ptext19 12EC                     __ptext36 0FF4  
                   __ptext28 0EBE                     __ptext37 0FD0                     __ptext29 129A  
                   __ptext38 11BE                     __ptext39 1248             __size_of_settime 02CE  
                   _get_time 13AA                     _corrpass 0051                     _download 12EC  
                   _init_i2c 0F44                     _init_adc 0F90                     _read_adc 1106  
              __size_of_main 0AF8                __size_of_pass 02EC                __size_of_view 01CA  
              __size_of_puts 0052                     _scan_key 14F8                    view@i_440 0034  
                  view@i_441 0036                    view@count 0032                     main@save 0190  
                   _writeEEP 10CC                    putch@byte 0001                  ??_init_clcd 0003  
      __end_of_read_switches 1180                     pass@flag 002B                  ??_init_uart 0001  
                   pass@str2 0010             ___lwmod@dividend 0001                    writeEEP@i 0004  
            download@display 0004                     view@flag 002F                     view@read 0038  
                   settime@k 0010                     settime@l 0012                     settime@m 0014  
             readEEP@address 0002         __end_of_write_ds1307 0F90              ___lwmod@divisor 0003  
            ___lwmod@counter 0005                 view@display1 001B       __size_of_i2c_rep_start 0008  
           write_ds1307@data 0002  
